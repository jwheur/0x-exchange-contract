{
    "schemaVersion": "2.0.0",
    "contractName": "StaticCallProxy",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [],
                "name": "getProxyId",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "fallback"
            }
        ],
        "devdoc": {
            "methods": {
                "getProxyId()": {
                    "details": "Gets the proxy id associated with the proxy address.",
                    "return": "Proxy id."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506103cd806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ae25532e1461031a575b7fffffffff00000000000000000000000000000000000000000000000000000000600035167fa85e59e400000000000000000000000000000000000000000000000000000000811415610314576004803501803560206004820306606482101715610101577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c19494e56414c49445f41535345545f444154415f4c454e475448000000604052600060605260646000fd5b60208101820136811115610180577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c16494e56414c49445f41535345545f444154415f454e44000000000000604052600060605260646000fd5b604480840135840160248101359350838101820191018282111561022e577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1f494e56414c49445f5354415449435f43414c4c5f444154415f4f46466040527f534554000000000000000000000000000000000000000000000000000000000060605260646000fd5b838160003750505073ffffffffffffffffffffffffffffffffffffffff602483013516600080836000845afa3d9250826000803e8061026c57826000fd5b50506000206064820135908181031561030f577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1d554e45585045435445445f5354415449435f43414c4c5f524553554c6040527f540000000000000000000000000000000000000000000000000000000000000060605260646000fd5b505050005b50600080fd5b610322610357565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b60006040518080610378602191396021019050604051809103902090509056fe53746174696343616c6c28616464726573732c62797465732c6279746573333229a265627a7a723058208fed7c742a650c0c3b776c37acdceb512197aeb68e4aba4578a8fef09e67ddb164736f6c634300050a0032",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAE25532E EQ PUSH2 0x31A JUMPI JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD AND PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 EQ ISZERO PUSH2 0x314 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD ADD DUP1 CALLDATALOAD PUSH1 0x20 PUSH1 0x4 DUP3 SUB MOD PUSH1 0x64 DUP3 LT OR ISZERO PUSH2 0x101 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x19494E56414C49445F41535345545F444154415F4C454E475448000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 ADD CALLDATASIZE DUP2 GT ISZERO PUSH2 0x180 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x16494E56414C49445F41535345545F444154415F454E44000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x44 DUP1 DUP5 ADD CALLDATALOAD DUP5 ADD PUSH1 0x24 DUP2 ADD CALLDATALOAD SWAP4 POP DUP4 DUP2 ADD DUP3 ADD SWAP2 ADD DUP3 DUP3 GT ISZERO PUSH2 0x22E JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x1F494E56414C49445F5354415449435F43414C4C5F444154415F4F4646 PUSH1 0x40 MSTORE PUSH32 0x5345540000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP2 PUSH1 0x0 CALLDATACOPY POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 DUP4 ADD CALLDATALOAD AND PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 DUP5 GAS STATICCALL RETURNDATASIZE SWAP3 POP DUP3 PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH2 0x26C JUMPI DUP3 PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 KECCAK256 PUSH1 0x64 DUP3 ADD CALLDATALOAD SWAP1 DUP2 DUP2 SUB ISZERO PUSH2 0x30F JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x1D554E45585045435445445F5354415449435F43414C4C5F524553554C PUSH1 0x40 MSTORE PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP POP STOP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x322 PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH2 0x378 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x21 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP SWAP1 JUMP INVALID MSTORE8 PUSH21 0x6174696343616C6C28616464726573732C62797465 PUSH20 0x2C6279746573333229A265627A7A723058208FED PUSH29 0x742A650C0C3B776C37ACDCEB512197AEB68E4ABA4578A8FEF09E67DDB1 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",
                "sourceMap": "606:9918:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;606:9918:6;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ae25532e1461031a575b7fffffffff00000000000000000000000000000000000000000000000000000000600035167fa85e59e400000000000000000000000000000000000000000000000000000000811415610314576004803501803560206004820306606482101715610101577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c19494e56414c49445f41535345545f444154415f4c454e475448000000604052600060605260646000fd5b60208101820136811115610180577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c16494e56414c49445f41535345545f444154415f454e44000000000000604052600060605260646000fd5b604480840135840160248101359350838101820191018282111561022e577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1f494e56414c49445f5354415449435f43414c4c5f444154415f4f46466040527f534554000000000000000000000000000000000000000000000000000000000060605260646000fd5b838160003750505073ffffffffffffffffffffffffffffffffffffffff602483013516600080836000845afa3d9250826000803e8061026c57826000fd5b50506000206064820135908181031561030f577f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c1d554e45585045435445445f5354415449435f43414c4c5f524553554c6040527f540000000000000000000000000000000000000000000000000000000000000060605260646000fd5b505050005b50600080fd5b610322610357565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b60006040518080610378602191396021019050604051809103902090509056fe53746174696343616c6c28616464726573732c62797465732c6279746573333229a265627a7a723058208fed7c742a650c0c3b776c37acdceb512197aeb68e4aba4578a8fef09e67ddb164736f6c634300050a0032",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAE25532E EQ PUSH2 0x31A JUMPI JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD AND PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP2 EQ ISZERO PUSH2 0x314 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD ADD DUP1 CALLDATALOAD PUSH1 0x20 PUSH1 0x4 DUP3 SUB MOD PUSH1 0x64 DUP3 LT OR ISZERO PUSH2 0x101 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x19494E56414C49445F41535345545F444154415F4C454E475448000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 ADD CALLDATASIZE DUP2 GT ISZERO PUSH2 0x180 JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x16494E56414C49445F41535345545F444154415F454E44000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x44 DUP1 DUP5 ADD CALLDATALOAD DUP5 ADD PUSH1 0x24 DUP2 ADD CALLDATALOAD SWAP4 POP DUP4 DUP2 ADD DUP3 ADD SWAP2 ADD DUP3 DUP3 GT ISZERO PUSH2 0x22E JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x1F494E56414C49445F5354415449435F43414C4C5F444154415F4F4646 PUSH1 0x40 MSTORE PUSH32 0x5345540000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP2 PUSH1 0x0 CALLDATACOPY POP POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 DUP4 ADD CALLDATALOAD AND PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 DUP5 GAS STATICCALL RETURNDATASIZE SWAP3 POP DUP3 PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH2 0x26C JUMPI DUP3 PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 KECCAK256 PUSH1 0x64 DUP3 ADD CALLDATALOAD SWAP1 DUP2 DUP2 SUB ISZERO PUSH2 0x30F JUMPI PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0x1D554E45585045435445445F5354415449435F43414C4C5F524553554C PUSH1 0x40 MSTORE PUSH32 0x5400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP POP STOP JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x322 PUSH2 0x357 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH2 0x378 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x21 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP SWAP1 JUMP INVALID MSTORE8 PUSH21 0x6174696343616C6C28616464726573732C62797465 PUSH20 0x2C6279746573333229A265627A7A723058208FED PUSH29 0x742A650C0C3B776C37ACDCEB512197AEB68E4ABA4578A8FEF09E67DDB1 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",
                "sourceMap": "606:9918:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;606:9918:6;;;;;;;;;;;;;;;;986:66;982:1;969:15;965:88;1448:66;1438:8;1435:80;1432:2;;;3482:1;3478;3465:15;3461:23;3585:15;3572:29;3673:2;3669:1;3655:12;3651:20;3647:29;3641:3;3627:12;3624:21;3621:56;3618:2;;;3782:66;3779:1;3772:77;3881:66;3877:2;3870:78;3980:66;3976:2;3969:78;4079:1;4075:2;4068:13;4112:3;4109:1;4102:14;3618:2;4278;4264:12;4260:21;4243:15;4239:43;4319:14;4305:12;4302:32;4299:2;;;4436:66;4433:1;4426:77;4535:66;4531:2;4524:78;4634:66;4630:2;4623:78;4733:1;4729:2;4722:13;4766:3;4763:1;4756:14;4299:2;6200;6179:24;;;6166:38;6137:68;;6089:2;6137:68;;6299:34;;-1:-1:-1;6533:43:6;;;;;;6462:29;6596:35;;;6593:2;;;6742:66;6739:1;6732:77;6841:66;6837:2;6830:78;6940:66;6936:2;6929:78;7039:66;7035:2;7028:78;7137:3;7134:1;7127:14;6593:2;7448:17;7367:19;7264:1;7230:303;;;;7839:66;7813:2;7796:15;7792:24;7779:38;7754:169;8441:1;8347;8279:17;8201:1;8123:10;8055:3;8023:495;8610:16;8593:33;;8808:9;8740:1;8679;8643:224;8985:7;8975:2;;9026:9;9023:1;9016:20;8975:2;-1:-1:-1;;9148:1:6;9138:23;9520:3;9499:25;;9486:39;;9546;;;9543:2;;;9694:66;9691:1;9684:77;9793:66;9789:2;9782:78;9892:66;9888:2;9881:78;9991:66;9987:2;9980:78;10089:3;10086:1;10079:14;9543:2;-1:-1:-1;;;10189:12:6;1432:2;;10293:1;10290;10283:12;10409:113;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;10478:6;706:46;;;;;;;;;;;;;;;;;;;10500:15;;10409:113;:::o"
            }
        }
    },
    "sources": {
        "src/StaticCallProxy.sol": {
            "id": 6
        }
    },
    "sourceCodes": {
        "src/StaticCallProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract StaticCallProxy {\n\n    // Id of this proxy.\n    bytes4 constant internal PROXY_ID = bytes4(keccak256(\"StaticCall(address,bytes,bytes32)\"));\n\n    // solhint-disable-next-line payable-fallback\n    function ()\n        external\n    {\n        assembly {\n            // The first 4 bytes of calldata holds the function selector\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n            // `transferFrom` will be called with the following parameters:\n            // assetData Encoded byte array.\n            // from Address to transfer asset from.\n            // to Address to transfer asset to.\n            // amount Amount of asset to transfer.\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n                // `transferFrom`.\n                // The function is marked `external`, so no abi decoding is done for\n                // us. Instead, we expect the `calldata` memory to contain the\n                // following:\n                //\n                // | Area     | Offset | Length  | Contents                            |\n                // |----------|--------|---------|-------------------------------------|\n                // | Header   | 0      | 4       | function selector                   |\n                // | Params   |        | 4 * 32  | function parameters:                |\n                // |          | 4      |         |   1. offset to assetData (*)        |\n                // |          | 36     |         |   2. from                           |\n                // |          | 68     |         |   3. to                             |\n                // |          | 100    |         |   4. amount                         |\n                // | Data     |        |         | assetData:                          |\n                // |          | 132    | 32      | assetData Length                    |\n                // |          | 164    | **      | assetData Contents                  |\n                //\n                // (*): offset is computed from start of function parameters, so offset\n                //      by an additional 4 bytes in the calldata.\n                //\n                // (**): see table below to compute length of assetData Contents\n                // (***): Note that the `from`, `to`, and `amount` params in calldata are ignored in this function.\n                //\n                // WARNING: The ABIv2 specification allows additional padding between\n                //          the Params and Data section. This will result in a larger\n                //          offset to assetData.\n\n                // Load offset to `assetData`\n                let assetDataOffset := add(calldataload(4), 4)\n\n                // Validate length of `assetData`\n                let assetDataLen := calldataload(assetDataOffset)\n                if or(lt(assetDataLen, 100), mod(sub(assetDataLen, 4), 32)) {\n                    // Revert with `Error(\"INVALID_ASSET_DATA_LENGTH\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x00000019494e56414c49445f41535345545f444154415f4c454e475448000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // Ensure that `assetData` ends inside of calldata\n                let assetDataEnd := add(assetDataOffset, add(assetDataLen, 32))\n                if gt(assetDataEnd, calldatasize()) {\n                    // Revert with `Error(\"INVALID_ASSET_DATA_END\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x00000016494e56414c49445f41535345545f444154415f454e44000000000000)\n                    mstore(96, 0)\n                    revert(0, 100)\n                }\n\n                // Asset data is encoded as follows:\n                // | Area     | Offset      | Length  | Contents                             |\n                // |----------|-------------|---------|--------------------------------------|\n                // | Header   | 0           | 4       | assetProxyId                         |\n                // | Params   |             | 4 * 32  | function parameters:                 |\n                // |          | 4           |         |   1. address of callTarget           |\n                // |          | 36          |         |   2. offset to staticCallData (*)    |\n                // |          | 68          |         |   3. expected 32 byte hash of output |\n                // | Data     |             |         | staticCallData:                      |\n                // |          | 100         | 32      |   1. staticCallData Length           |\n                // |          | 132         | a       |   2. staticCallData Contents         | \n\n                // In order to find the offset to `staticCallData`, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (proxyId)\n                // + 32 (callTarget)\n                let paramsInAssetDataOffset := add(assetDataOffset, 36)\n                let staticCallDataOffset := add(paramsInAssetDataOffset, calldataload(add(assetDataOffset, 68)))\n\n                // Load length of `staticCallData`\n                let staticCallDataLen := calldataload(staticCallDataOffset)\n\n                // Ensure `staticCallData` does not begin to outside of `assetData`\n                let staticCallDataBegin := add(staticCallDataOffset, 32)\n                let staticCallDataEnd := add(staticCallDataBegin, staticCallDataLen)\n                if gt(staticCallDataEnd, assetDataEnd) {\n                    // Revert with `Error(\"INVALID_STATIC_CALL_DATA_OFFSET\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001f494e56414c49445f5354415449435f43414c4c5f444154415f4f4646)\n                    mstore(96, 0x5345540000000000000000000000000000000000000000000000000000000000)\n                    revert(0, 100)\n                }\n\n                // Copy `staticCallData` into memory\n                calldatacopy(\n                    0,                              // memory can be safely overwritten from beginning\n                    staticCallDataBegin,            // start of `staticCallData`\n                    staticCallDataLen               // copy the entire `staticCallData`\n                )\n\n                // In order to find the offset to `callTarget`, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (proxyId)\n                let callTarget := and(\n                    calldataload(add(assetDataOffset, 36)),\n                    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff\n                )\n\n                // Perform `callTarget.staticcall(staticCallData)`\n                let success := staticcall(\n                    gas,                         // forward all gas\n                    callTarget,                  // call address `callTarget`\n                    0,                           // pointer to start of input\n                    staticCallDataLen,           // length of input\n                    0,                           // start of memory can be safely overwritten\n                    0                            // don't copy output to memory\n                )\n\n                // Copy entire output to start of memory\n                let outputLen := returndatasize()\n                returndatacopy(\n                    0,                // copy to memory at 0\n                    0,                // copy from return data at 0\n                    outputLen         // copy all return data\n                )\n\n                // Revert with reason given by `callTarget` if staticcall is unsuccessful\n                if iszero(success) {\n                    revert(0, outputLen)\n                }\n\n                // Calculate hash of output\n                let callResultHash := keccak256(0, outputLen)\n\n                // In order to find the offset to `expectedCallResultHash`, we must add:\n                // assetDataOffset\n                // + 32 (assetData len)\n                // + 4 (proxyId)\n                // + 32 (callTarget)\n                // + 32 (staticCallDataOffset)\n                let expectedResultHash := calldataload(add(assetDataOffset, 100))\n\n                if sub(callResultHash, expectedResultHash) {\n                    // Revert with `Error(\"UNEXPECTED_STATIC_CALL_RESULT\")`\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                    mstore(64, 0x0000001d554e45585045435445445f5354415449435f43414c4c5f524553554c)\n                    mstore(96, 0x5400000000000000000000000000000000000000000000000000000000000000)\n                    revert(0, 100)\n                }\n\n                // Return if output matched expected output\n                return(0, 0)\n            }\n\n            // Revert if undefined function is called\n            revert(0, 0)\n        }\n    }\n\n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4)\n    {\n        return PROXY_ID;\n    }\n}"
    },
    "sourceTreeHashHex": "0x6c3ee7c5a78c63061d57c12337e23d71c254dd9244bd91f186e379e9c824be5d",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.10+commit.5a6ea5b1.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "constantinople",
            "remappings": [
                "@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/asset-proxy/node_modules/@0x/contracts-utils"
            ]
        }
    },
    "networks": {}
}
