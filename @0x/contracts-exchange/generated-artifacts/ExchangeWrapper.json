{
	"schemaVersion": "2.0.0",
	"contractName": "ExchangeWrapper",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "salt",
						"type": "uint256"
					},
					{
						"name": "orderSignature",
						"type": "bytes"
					},
					{
						"name": "takerSignature",
						"type": "bytes"
					}
				],
				"name": "fillOrder",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "targetOrderEpoch",
						"type": "uint256"
					},
					{
						"name": "salt",
						"type": "uint256"
					},
					{
						"name": "makerSignature",
						"type": "bytes"
					}
				],
				"name": "cancelOrdersUpTo",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"methods": {
				"cancelOrdersUpTo(uint256,uint256,bytes)": {
					"details": "Cancels all orders created by sender with a salt less than or equal to the targetOrderEpoch      and senderAddress equal to this contract.",
					"params": {
						"makerSignature": "Proof that maker wishes to call this function with given params.",
						"salt": "Arbitrary value to gaurantee uniqueness of 0x transaction hash.",
						"targetOrderEpoch": "Orders created with a salt less or equal to this value will be cancelled."
					}
				},
				"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,uint256,bytes,bytes)": {
					"details": "Fills an order using `msg.sender` as the taker.",
					"params": {
						"order": "Order struct containing order specifications.",
						"orderSignature": "Proof that order has been created by maker.",
						"salt": "Arbitrary value to gaurantee uniqueness of 0x transaction hash.",
						"takerAssetFillAmount": "Desired amount of takerAsset to sell.",
						"takerSignature": "Proof that taker wishes to call this function with given params."
					}
				}
			}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b5060405161093038038061093083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61089d806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a2dbfe651461003b578063f7de1c8b14610050575b600080fd5b61004e6100493660046103b5565b610063565b005b61004e61005e366004610531565b6101b5565b60405133906060907fb4be83d5000000000000000000000000000000000000000000000000000000009061009f90899089908890602401610634565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260005491517fbfc8bfce00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff9091169063bfc8bfce9061017a9088908690869089906004016107e1565b600060405180830381600087803b15801561019457600080fd5b505af11580156101a8573d6000803e3d6000fd5b5050505050505050505050565b60405133906060907f4f9559b100000000000000000000000000000000000000000000000000000000906101ed908890602401610750565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260005491517fbfc8bfce00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff9091169063bfc8bfce906102ca908890869086908a908a90600401610759565b600060405180830381600087803b1580156102e457600080fd5b505af11580156102f8573d6000803e3d6000fd5b50505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461032857600080fd5b92915050565b600082601f83011261033e578081fd5b813567ffffffffffffffff811115610354578182fd5b61038560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610833565b915080825283602082850101111561039c57600080fd5b8060208401602084013760009082016020015292915050565b600080600080600060a086880312156103cc578081fd5b853567ffffffffffffffff808211156103e3578283fd5b610180918801808a038313156103f7578384fd5b61040083610833565b61040a8b83610304565b81526104198b60208401610304565b602082015261042b8b60408401610304565b604082015261043d8b60608401610304565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100935083820135848201526101209350838201358482015261014093508382013583811115610499578586fd5b6104a58c82850161032e565b8583015250610160935083820135838111156104bf578586fd5b6104cb8c82850161032e565b85830152508098505050602088013595506040880135945060608801359150808211156104f6578283fd5b61050289838a0161032e565b93506080880135915080821115610517578283fd5b506105248882890161032e565b9150509295509295909350565b6000806000806060858703121561054757600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561056c578384fd5b81870188601f82011261057d578485fd5b803592508183111561058d578485fd5b88602084830101111561059e578485fd5b959894975050602090940194505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260005b818110156105ef576020818501810151868301820152016105d3565b81811115610601576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060825261018061064b6060840187516105af565b602086015161065d60808501826105af565b50604086015161067060a08501826105af565b50606086015161068360c08501826105af565b50608086015160e084015260a0860151610100818186015260c08801519150610120828187015260e089015192506101408381880152828a0151935061016092508383880152818a015185880152808a015193505050826101a08601526106ee6101e08601836105c9565b9250808801519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0848303016101c085015261072c82826105c9565b866020860152848103604086015261074481876105c9565b98975050505050505050565b90815260200190565b600086825273ffffffffffffffffffffffffffffffffffffffff861660208301526080604083015261078e60808301866105c9565b82810360608401528381528385602083013760006020858301015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168201019150509695505050505050565b600085825273ffffffffffffffffffffffffffffffffffffffff851660208301526080604083015261081660808301856105c9565b828103606084015261082881856105c9565b979650505050505050565b60405181810167ffffffffffffffff8111828210171561085257600080fd5b60405291905056fea365627a7a72305820bf01a31c0bfd3b13e2ca5484b7e827a1997eca94e395e55a4309e29a1021444e6c6578706572696d656e74616cf564736f6c634300050a0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x930 CODESIZE SUB DUP1 PUSH2 0x930 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x89D DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA2DBFE65 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF7DE1C8B EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x63 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x531 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x60 SWAP1 PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x9F SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x634 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x0 SLOAD SWAP2 MLOAD PUSH32 0xBFC8BFCE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xBFC8BFCE SWAP1 PUSH2 0x17A SWAP1 DUP9 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x4F9559B100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1ED SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x750 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x0 SLOAD SWAP2 MLOAD PUSH32 0xBFC8BFCE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xBFC8BFCE SWAP1 PUSH2 0x2CA SWAP1 DUP9 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x759 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x33E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x354 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x385 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x833 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x39C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3E3 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x180 SWAP2 DUP9 ADD DUP1 DUP11 SUB DUP4 SGT ISZERO PUSH2 0x3F7 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x400 DUP4 PUSH2 0x833 JUMP JUMPDEST PUSH2 0x40A DUP12 DUP4 PUSH2 0x304 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x419 DUP12 PUSH1 0x20 DUP5 ADD PUSH2 0x304 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x42B DUP12 PUSH1 0x40 DUP5 ADD PUSH2 0x304 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x43D DUP12 PUSH1 0x60 DUP5 ADD PUSH2 0x304 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x499 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4A5 DUP13 DUP3 DUP6 ADD PUSH2 0x32E JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x160 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x4BF JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4CB DUP13 DUP3 DUP6 ADD PUSH2 0x32E JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP DUP1 SWAP9 POP POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4F6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x502 DUP10 DUP4 DUP11 ADD PUSH2 0x32E JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x517 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x524 DUP9 DUP3 DUP10 ADD PUSH2 0x32E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x56C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x57D JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x58D JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x59E JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5EF JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x5D3 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x180 PUSH2 0x64B PUSH1 0x60 DUP5 ADD DUP8 MLOAD PUSH2 0x5AF JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x65D PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x5AF JUMP JUMPDEST POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x670 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x5AF JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x683 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x5AF JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP7 ADD MSTORE PUSH1 0xC0 DUP9 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP8 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD SWAP3 POP PUSH2 0x140 DUP4 DUP2 DUP9 ADD MSTORE DUP3 DUP11 ADD MLOAD SWAP4 POP PUSH2 0x160 SWAP3 POP DUP4 DUP4 DUP9 ADD MSTORE DUP2 DUP11 ADD MLOAD DUP6 DUP9 ADD MSTORE DUP1 DUP11 ADD MLOAD SWAP4 POP POP POP DUP3 PUSH2 0x1A0 DUP7 ADD MSTORE PUSH2 0x6EE PUSH2 0x1E0 DUP7 ADD DUP4 PUSH2 0x5C9 JUMP JUMPDEST SWAP3 POP DUP1 DUP9 ADD MLOAD SWAP2 POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP5 DUP4 SUB ADD PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0x72C DUP3 DUP3 PUSH2 0x5C9 JUMP JUMPDEST DUP7 PUSH1 0x20 DUP7 ADD MSTORE DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x744 DUP2 DUP8 PUSH2 0x5C9 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x78E PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x5C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE DUP4 DUP2 MSTORE DUP4 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP3 ADD ADD SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x816 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x5C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x828 DUP2 DUP6 PUSH2 0x5C9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0xbf ADD LOG3 SHR SIGNEXTEND REVERT EXTCODESIZE SGT 0xe2 0xca SLOAD DUP5 0xb7 0xe8 0x27 LOG1 SWAP10 PUSH31 0xCA94E395E55A4309E29A1021444E6C6578706572696D656E74616CF564736F PUSH13 0x634300050A0040000000000000 ",
				"sourceMap": "748:2427:0:-;;;892:99;8:9:-1;5:2;;;30:1;27;20:12;5:2;892:99:0;;;;;;;;;;;;;;;;;;;;;953:8;:31;;-1:-1:-1;;;;;;953:31:0;-1:-1:-1;;;;;953:31:0;;;;;;;;;;748:2427;;146:263:-1;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;576:54;;701:35;;691:2;;-1:-1;;740:12;691:2;319:74;223:186;-1:-1;;;223:186;;748:2427:0;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063a2dbfe651461003b578063f7de1c8b14610050575b600080fd5b61004e6100493660046103b5565b610063565b005b61004e61005e366004610531565b6101b5565b60405133906060907fb4be83d5000000000000000000000000000000000000000000000000000000009061009f90899089908890602401610634565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260005491517fbfc8bfce00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff9091169063bfc8bfce9061017a9088908690869089906004016107e1565b600060405180830381600087803b15801561019457600080fd5b505af11580156101a8573d6000803e3d6000fd5b5050505050505050505050565b60405133906060907f4f9559b100000000000000000000000000000000000000000000000000000000906101ed908890602401610750565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260005491517fbfc8bfce00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff9091169063bfc8bfce906102ca908890869086908a908a90600401610759565b600060405180830381600087803b1580156102e457600080fd5b505af11580156102f8573d6000803e3d6000fd5b50505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461032857600080fd5b92915050565b600082601f83011261033e578081fd5b813567ffffffffffffffff811115610354578182fd5b61038560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610833565b915080825283602082850101111561039c57600080fd5b8060208401602084013760009082016020015292915050565b600080600080600060a086880312156103cc578081fd5b853567ffffffffffffffff808211156103e3578283fd5b610180918801808a038313156103f7578384fd5b61040083610833565b61040a8b83610304565b81526104198b60208401610304565b602082015261042b8b60408401610304565b604082015261043d8b60608401610304565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100935083820135848201526101209350838201358482015261014093508382013583811115610499578586fd5b6104a58c82850161032e565b8583015250610160935083820135838111156104bf578586fd5b6104cb8c82850161032e565b85830152508098505050602088013595506040880135945060608801359150808211156104f6578283fd5b61050289838a0161032e565b93506080880135915080821115610517578283fd5b506105248882890161032e565b9150509295509295909350565b6000806000806060858703121561054757600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561056c578384fd5b81870188601f82011261057d578485fd5b803592508183111561058d578485fd5b88602084830101111561059e578485fd5b959894975050602090940194505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260005b818110156105ef576020818501810151868301820152016105d3565b81811115610601576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060825261018061064b6060840187516105af565b602086015161065d60808501826105af565b50604086015161067060a08501826105af565b50606086015161068360c08501826105af565b50608086015160e084015260a0860151610100818186015260c08801519150610120828187015260e089015192506101408381880152828a0151935061016092508383880152818a015185880152808a015193505050826101a08601526106ee6101e08601836105c9565b9250808801519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0848303016101c085015261072c82826105c9565b866020860152848103604086015261074481876105c9565b98975050505050505050565b90815260200190565b600086825273ffffffffffffffffffffffffffffffffffffffff861660208301526080604083015261078e60808301866105c9565b82810360608401528381528385602083013760006020858301015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168201019150509695505050505050565b600085825273ffffffffffffffffffffffffffffffffffffffff851660208301526080604083015261081660808301856105c9565b828103606084015261082881856105c9565b979650505050505050565b60405181810167ffffffffffffffff8111828210171561085257600080fd5b60405291905056fea365627a7a72305820bf01a31c0bfd3b13e2ca5484b7e827a1997eca94e395e55a4309e29a1021444e6c6578706572696d656e74616cf564736f6c634300050a0040",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA2DBFE65 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xF7DE1C8B EQ PUSH2 0x50 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x63 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x5E CALLDATASIZE PUSH1 0x4 PUSH2 0x531 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x60 SWAP1 PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x9F SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x634 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x0 SLOAD SWAP2 MLOAD PUSH32 0xBFC8BFCE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xBFC8BFCE SWAP1 PUSH2 0x17A SWAP1 DUP9 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x4F9559B100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1ED SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x750 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x0 SLOAD SWAP2 MLOAD PUSH32 0xBFC8BFCE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xBFC8BFCE SWAP1 PUSH2 0x2CA SWAP1 DUP9 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x759 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x328 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x33E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x354 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x385 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x833 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x39C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3E3 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x180 SWAP2 DUP9 ADD DUP1 DUP11 SUB DUP4 SGT ISZERO PUSH2 0x3F7 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x400 DUP4 PUSH2 0x833 JUMP JUMPDEST PUSH2 0x40A DUP12 DUP4 PUSH2 0x304 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x419 DUP12 PUSH1 0x20 DUP5 ADD PUSH2 0x304 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x42B DUP12 PUSH1 0x40 DUP5 ADD PUSH2 0x304 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x43D DUP12 PUSH1 0x60 DUP5 ADD PUSH2 0x304 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x499 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4A5 DUP13 DUP3 DUP6 ADD PUSH2 0x32E JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x160 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x4BF JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x4CB DUP13 DUP3 DUP6 ADD PUSH2 0x32E JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP DUP1 SWAP9 POP POP POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4F6 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x502 DUP10 DUP4 DUP11 ADD PUSH2 0x32E JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x517 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x524 DUP9 DUP3 DUP10 ADD PUSH2 0x32E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x56C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x57D JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x58D JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x59E JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5EF JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x5D3 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x180 PUSH2 0x64B PUSH1 0x60 DUP5 ADD DUP8 MLOAD PUSH2 0x5AF JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x65D PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x5AF JUMP JUMPDEST POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x670 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x5AF JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x683 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x5AF JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP7 ADD MSTORE PUSH1 0xC0 DUP9 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP8 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD SWAP3 POP PUSH2 0x140 DUP4 DUP2 DUP9 ADD MSTORE DUP3 DUP11 ADD MLOAD SWAP4 POP PUSH2 0x160 SWAP3 POP DUP4 DUP4 DUP9 ADD MSTORE DUP2 DUP11 ADD MLOAD DUP6 DUP9 ADD MSTORE DUP1 DUP11 ADD MLOAD SWAP4 POP POP POP DUP3 PUSH2 0x1A0 DUP7 ADD MSTORE PUSH2 0x6EE PUSH2 0x1E0 DUP7 ADD DUP4 PUSH2 0x5C9 JUMP JUMPDEST SWAP3 POP DUP1 DUP9 ADD MLOAD SWAP2 POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP5 DUP4 SUB ADD PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0x72C DUP3 DUP3 PUSH2 0x5C9 JUMP JUMPDEST DUP7 PUSH1 0x20 DUP7 ADD MSTORE DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x744 DUP2 DUP8 PUSH2 0x5C9 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x78E PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x5C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE DUP4 DUP2 MSTORE DUP4 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND DUP3 ADD ADD SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x816 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x5C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x828 DUP2 DUP6 PUSH2 0x5C9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x852 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0xbf ADD LOG3 SHR SIGNEXTEND REVERT EXTCODESIZE SGT 0xe2 0xca SLOAD DUP5 0xb7 0xe8 0x27 LOG1 SWAP10 PUSH31 0xCA94E395E55A4309E29A1021444E6C6578706572696D656E74616CF564736F PUSH13 0x634300050A0040000000000000 ",
				"sourceMap": "748:2427:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;748:2427:0;;;;;;;;;;;;;;;;;;;;;;;;2486:687;;;;;;;;;:::i;:::-;;1442:583;;;;;;;;;:::i;2486:687::-;2820:154;;2734:10;;2800:17;;2856:27;;2820:154;;2897:5;;2916:20;;2950:14;;2820:154;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2820:154:0;;;49:4:-1;25:18;;61:17;;2820:154:0;182:15:-1;2820:154:0;;;;179:29:-1;;;;160:49;;;-1:-1;3039:8:0;:127;;;;;2820:154;;-1:-1:-1;3039:8:0;;;;;:27;;:127;;3080:4;;3098:12;;2820:154;;3142:14;;3039:127;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3039:127:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3039:127:0;;;;2486:687;;;;;;;:::o;1442:583::-;1709:110;;1623:10;;1689:17;;1745:34;;1709:110;;1793:16;;1709:110;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1709:110:0;;;49:4:-1;25:18;;61:17;;1709:110:0;182:15:-1;1709:110:0;;;;179:29:-1;;;;160:49;;;-1:-1;1891:8:0;:127;;;;;1709:110;;-1:-1:-1;1891:8:0;;;;;:27;;:127;;1932:4;;1950:12;;1709:110;;1994:14;;;;1891:127;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1891:127:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1891:127:0;;;;1442:583;;;;;;:::o;5:130:-1:-;72:20;;13309:42;13298:54;;14038:35;;14028:2;;14087:1;;14077:12;14028:2;57:78;;;;;500:432;;597:3;590:4;582:6;578:17;574:27;564:2;;-1:-1;;605:12;564:2;652:6;639:20;12041:18;12033:6;12030:30;12027:2;;;-1:-1;;12063:12;12027:2;674:60;12204:4;12136:9;590:4;12121:6;12117:17;12113:33;12194:15;674:60;;;665:69;;754:6;747:5;740:21;858:3;12204:4;849:6;782;840:16;;837:25;834:2;;;875:1;;865:12;834:2;13525:6;12204:4;782:6;778:17;12204:4;816:5;812:16;13502:30;13581:1;13563:16;;;12204:4;13563:16;13556:27;816:5;557:375;-1:-1;;557:375;3770:1083;;;;;;3983:3;3971:9;3962:7;3958:23;3954:33;3951:2;;;4000:1;3997;3990:12;3951:2;4048:17;4035:31;4086:18;;4078:6;4075:30;4072:2;;;4118:1;4115;4108:12;4072:2;1529:5;;4182:22;;1508:19;;;1504:31;-1:-1;1501:2;;;1548:1;1545;1538:12;1501:2;1566:21;1581:5;1566:21;;;1676:49;1721:3;1697:22;1676:49;;;1659:15;1652:74;1828:49;1873:3;1795:2;1853:9;1849:22;1828:49;;;1795:2;1814:5;1810:16;1803:75;1987:49;2032:3;1954:2;2012:9;2008:22;1987:49;;;1954:2;1973:5;1969:16;1962:75;2140:49;2185:3;2107:2;2165:9;2161:22;2140:49;;;2107:2;2126:5;2122:16;2115:75;2263:3;2322:9;2318:22;3700:20;2263:3;2283:5;2279:16;2272:75;3983:3;2479:9;2475:22;3700:20;3983:3;2440:5;2436:16;2429:75;2569:3;2628:9;2624:22;3700:20;2569:3;2589:5;2585:16;2578:75;2718:3;2777:9;2773:22;3700:20;2718:3;2738:5;2734:16;2727:75;2880:3;2866:17;;2951:6;2940:9;2936:22;3700:20;2907:5;2900;2896:17;2889:76;3026:3;3012:17;;3097:6;3086:9;3082:22;3700:20;3053:5;3046;3042:17;3035:76;3210:3;;;;3199:9;3195:19;3182:33;3235:18;3227:6;3224:30;3221:2;;;3267:1;3264;3257:12;3221:2;3303:54;3353:3;3344:6;3333:9;3329:22;3303:54;;;3295:5;3288;3284:17;3277:81;;3457:3;;;;3446:9;3442:19;3429:33;3482:18;3474:6;3471:30;3468:2;;;3514:1;3511;3504:12;3468:2;3550:54;3600:3;3591:6;3580:9;3576:22;3550:54;;;3542:5;3535;3531:17;3524:81;;4128:86;;;;;1795:2;4294:9;4290:22;3700:20;4259:63;;1954:2;4402:9;4398:22;3700:20;4367:63;;2107:2;4484:9;4480:18;4467:32;4453:46;;4519:18;4511:6;4508:30;4505:2;;;4551:1;4548;4541:12;4505:2;4571:62;4625:7;4616:6;4605:9;4601:22;4571:62;;;4561:72;;2263:3;4687:9;4683:19;4670:33;4656:47;;4723:18;4715:6;4712:30;4709:2;;;4755:1;4752;4745:12;4709:2;;4775:62;4829:7;4820:6;4809:9;4805:22;4775:62;;;4765:72;;;3945:908;;;;;;;;;4860:615;;;;;5017:2;5005:9;4996:7;4992:23;4988:32;4985:2;;;-1:-1;;5023:12;4985:2;3713:6;3700:20;5075:63;;5175:2;5218:9;5214:22;3700:20;5183:63;;5311:2;5300:9;5296:18;5283:32;5335:18;;5327:6;5324:30;5321:2;;;5367:1;5364;5357:12;5321:2;5442:6;5431:9;5427:22;270:3;263:4;255:6;251:17;247:27;237:2;;288:1;285;278:12;237:2;321:6;308:20;298:30;;348:18;340:6;337:30;334:2;;;380:1;377;370:12;334:2;464:3;5175:2;445:16;406:6;431:31;;428:40;425:2;;;481:1;478;471:12;425:2;4979:496;;;;-1:-1;;5175:2;402:17;;;;-1:-1;;;4979:496;5482:103;13309:42;13298:54;5543:37;;5537:48;6040:343;;6182:5;12637:12;12911:6;12906:3;12899:19;-1:-1;13670:101;13684:6;13681:1;13678:13;13670:101;;;12948:4;13751:11;;;;;13745:18;13732:11;;;;;13725:39;13699:10;13670:101;;;13786:6;13783:1;13780:13;13777:2;;;-1:-1;12948:4;13842:6;12943:3;13833:16;;13826:27;13777:2;-1:-1;13962:2;13942:14;13958:7;13938:28;6339:39;;;;12948:4;6339:39;;6130:253;-1:-1;;6130:253;9289:659;;9527:2;9548:17;9541:47;6912:5;7015:62;9527:2;9516:9;9512:18;6993:15;6987:22;7015:62;;;7164:4;7157:5;7153:16;7147:23;7176:63;7224:14;9516:9;7224:14;7210:12;7176:63;;;;7333:4;7326:5;7322:16;7316:23;7345:63;7393:14;9516:9;7393:14;7379:12;7345:63;;;;9527:2;7489:5;7485:16;7479:23;7508:63;7556:14;9516:9;7556:14;7542:12;7508:63;;;;7224:14;7655:5;7651:16;7645:23;7722:14;9516:9;7722:14;9120:37;7393:14;7821:5;7817:16;7811:23;7888:14;9150:5;7888:14;9516:9;7888:14;9120:37;7556:14;7979:5;7975:16;7969:23;7949:43;;8046:14;9150:5;8046:14;9516:9;8046:14;9120:37;7722:14;8137:5;8133:16;8127:23;8107:43;;8204:14;9150:5;8204:14;9516:9;8204:14;9120:37;8315:5;8308;8304:17;8298:24;8278:44;;8376:15;;;9150:5;8376:15;9516:9;8376:15;9120:37;8471:5;8464;8460:17;8454:24;8532:15;9516:9;8532:15;9120:37;8637:5;8630;8626:17;8620:24;8600:44;;;;8681:14;8664:15;9516:9;8664:15;8657:39;8711:67;6903:15;9516:9;6903:15;8759:12;8711:67;;;8703:75;;8873:5;8866;8862:17;8856:24;8836:44;;;8917:14;9516:9;8921:4;8917:14;;8900:15;9516:9;8900:15;8893:39;8947:67;9009:4;8995:12;8947:67;;;9150:5;7164:4;9774:9;9770:18;9120:37;9837:9;9831:4;9827:20;7333:4;9811:9;9807:18;9800:48;9862:76;9933:4;9924:6;9862:76;;;9854:84;9498:450;-1:-1;;;;;;;;9498:450;9955:213;9120:37;;;10073:2;10058:18;;10044:124;10175:735;;9150:5;9127:3;9120:37;13309:42;5573:5;13298:54;10588:2;10577:9;10573:18;5543:37;10423:3;10625:2;10614:9;10610:18;10603:48;10665:76;10423:3;10412:9;10408:19;10727:6;10665:76;;;10789:9;10783:4;10779:20;10774:2;10763:9;10759:18;10752:48;12911:6;12906:3;12899:19;13525:6;13520:3;10588:2;12943:3;12939:14;13502:30;-1:-1;10588:2;13572:6;12943:3;13563:16;;13556:27;10588:2;13958:7;13962:2;6018:6;13942:14;13938:28;12943:3;5987:39;;10806:94;;;10394:516;;;;;;;;;10917:715;;9150:5;9127:3;9120:37;13309:42;13302:5;13298:54;11320:2;11309:9;11305:18;5543:37;11155:3;11357:2;11346:9;11342:18;11335:48;11397:76;11155:3;11144:9;11140:19;11459:6;11397:76;;;11521:9;11515:4;11511:20;11506:2;11495:9;11491:18;11484:48;11546:76;11617:4;11608:6;11546:76;;;11538:84;11126:506;-1:-1;;;;;;;11126:506;11639:256;11701:2;11695:9;11727:17;;;11802:18;11787:34;;11823:22;;;11784:62;11781:2;;;11859:1;;11849:12;11781:2;11701;11868:22;11679:216;;-1:-1;11679:216"
			}
		}
	},
	"sources": {
		"examples/ExchangeWrapper.sol": {
			"id": 0
		},
		"src/interfaces/IExchange.sol": {
			"id": 13
		},
		"src/interfaces/IExchangeCore.sol": {
			"id": 14
		},
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
			"id": 40
		},
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": {
			"id": 36
		},
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
			"id": 38
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 44
		},
		"src/interfaces/IMatchOrders.sol": {
			"id": 15
		},
		"src/interfaces/ISignatureValidator.sol": {
			"id": 16
		},
		"src/interfaces/ITransactions.sol": {
			"id": 17
		},
		"src/interfaces/IAssetProxyDispatcher.sol": {
			"id": 12
		},
		"src/interfaces/IWrapperFunctions.sol": {
			"id": 20
		}
	},
	"sourceCodes": {
		"examples/ExchangeWrapper.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\n\n\ncontract ExchangeWrapper {\n\n    // Exchange contract.\n    // solhint-disable-next-line var-name-mixedcase\n    IExchange internal EXCHANGE;\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n    }\n\n    /// @dev Cancels all orders created by sender with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to this contract.\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    /// @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n    /// @param makerSignature Proof that maker wishes to call this function with given params.\n    function cancelOrdersUpTo(\n        uint256 targetOrderEpoch,\n        uint256 salt,\n        bytes calldata makerSignature\n    )\n        external\n    {\n        address makerAddress = msg.sender;\n\n        // Encode arguments into byte array.\n        bytes memory data = abi.encodeWithSelector(\n            EXCHANGE.cancelOrdersUpTo.selector,\n            targetOrderEpoch\n        );\n\n        // Call `cancelOrdersUpTo` via `executeTransaction`.\n        EXCHANGE.executeTransaction(\n            salt,\n            makerAddress,\n            data,\n            makerSignature\n        );\n    }\n\n    /// @dev Fills an order using `msg.sender` as the taker.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n    /// @param orderSignature Proof that order has been created by maker.\n    /// @param takerSignature Proof that taker wishes to call this function with given params.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        uint256 salt,\n        bytes memory orderSignature,\n        bytes memory takerSignature\n    )\n        public\n    {\n        address takerAddress = msg.sender;\n\n        // Encode arguments into byte array.\n        bytes memory data = abi.encodeWithSelector(\n            EXCHANGE.fillOrder.selector,\n            order,\n            takerAssetFillAmount,\n            orderSignature\n        );\n\n        // Call `fillOrder` via `executeTransaction`.\n        EXCHANGE.executeTransaction(\n            salt,\n            takerAddress,\n            data,\n            takerSignature\n        );\n    }\n}\n",
		"src/interfaces/IExchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n",
		"src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            uint256(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.5;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes calldata data,\n        bytes calldata signature\n    )\n        external;\n}\n",
		"src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n"
	},
	"sourceTreeHashHex": "0xdc6572d5c56513d3df4576adc1d31fd99a03510cb339f03ba863eb7c958ac1ed",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.10+commit.5a6ea5b1.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": [
				"@0x/contracts-exchange-libs=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-exchange-libs",
				"@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-utils",
				"@0x/contracts-erc20=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-erc20"
			]
		}
	},
	"networks": {}
}