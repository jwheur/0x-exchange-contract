{
	"schemaVersion": "2.0.0",
	"contractName": "Whitelist",
	"compilerOutput": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"components": [
							{
								"name": "makerAddress",
								"type": "address"
							},
							{
								"name": "takerAddress",
								"type": "address"
							},
							{
								"name": "feeRecipientAddress",
								"type": "address"
							},
							{
								"name": "senderAddress",
								"type": "address"
							},
							{
								"name": "makerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "takerAssetAmount",
								"type": "uint256"
							},
							{
								"name": "makerFee",
								"type": "uint256"
							},
							{
								"name": "takerFee",
								"type": "uint256"
							},
							{
								"name": "expirationTimeSeconds",
								"type": "uint256"
							},
							{
								"name": "salt",
								"type": "uint256"
							},
							{
								"name": "makerAssetData",
								"type": "bytes"
							},
							{
								"name": "takerAssetData",
								"type": "bytes"
							}
						],
						"name": "order",
						"type": "tuple"
					},
					{
						"name": "takerAssetFillAmount",
						"type": "uint256"
					},
					{
						"name": "salt",
						"type": "uint256"
					},
					{
						"name": "orderSignature",
						"type": "bytes"
					}
				],
				"name": "fillOrderIfWhitelisted",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "isWhitelisted",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "hash",
						"type": "bytes32"
					},
					{
						"name": "signerAddress",
						"type": "address"
					},
					{
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"name": "isValid",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "target",
						"type": "address"
					},
					{
						"name": "isApproved",
						"type": "bool"
					}
				],
				"name": "updateWhitelistStatus",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_exchange",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b5060405160208062000dc383398101806040526100309190810190610152565b60008054336001600160a01b031991821617909155600280549091166001600160a01b03831617905560405161008c9030907f050000000000000000000000000000000000000000000000000000000000000090602001610182565b604051602081830303815290604052600390805190602001906100b09291906100b7565b50506101c0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f857805160ff1916838001178555610125565b82800160010185558215610125579182015b8281111561012557825182559160200191906001019061010a565b50610131929150610135565b5090565b61014f91905b80821115610131576000815560010161013b565b90565b60006020828403121561016457600080fd5b81516001600160a01b038116811461017b57600080fd5b9392505050565b6001600160a01b039290921660601b82527fff0000000000000000000000000000000000000000000000000000000000000016601482015260150190565b610bf380620001d06000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063936347021161005057806393634702146100ca578063c07732a3146100dd578063f2fde38b146100f057610072565b8063141da876146100775780633af32abf1461008c5780638da5cb5b146100b5575b600080fd5b61008a610085366004610695565b610103565b005b61009f61009a3660046105b0565b610355565b6040516100ac9190610894565b60405180910390f35b6100bd61036a565b6040516100ac9190610873565b61009f6100d8366004610610565b610386565b61008a6100eb3660046105d3565b6103a7565b61008a6100fe3660046105b0565b61044e565b33328114610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d90610944565b60405180910390fd5b845173ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff166101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d9061090d565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff16610205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d9061089f565b6040516060907fb4be83d5000000000000000000000000000000000000000000000000000000009061023f9088908890879060240161097b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260025491517fbfc8bfce00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff9091169063bfc8bfce9061031b90879086908690600390600401610a97565b600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b50505050505050505050565b60016020526000908152604090205460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff83163214949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d906108d6565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d906108d6565b73ffffffffffffffffffffffffffffffffffffffff8116156104fc57600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b803573ffffffffffffffffffffffffffffffffffffffff8116811461052357600080fd5b92915050565b600082601f830112610539578081fd5b813567ffffffffffffffff81111561054f578182fd5b61058060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610b7d565b915080825283602082850101111561059757600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156105c257600080fd5b6105cc83836104ff565b9392505050565b600080604083850312156105e657600080fd5b6105f084846104ff565b91506020830135801515811461060557600080fd5b809150509250929050565b60008060008060608587031215610625578182fd5b8435935061063686602087016104ff565b9250604085013567ffffffffffffffff80821115610652578384fd5b81870188601f820112610663578485fd5b8035925081831115610673578485fd5b886020848301011115610684578485fd5b959894975050602090940194505050565b600080600080608085870312156106aa578384fd5b843567ffffffffffffffff808211156106c1578586fd5b6101809187018089038313156106d5578687fd5b6106de83610b7d565b6106e88a836104ff565b81526106f78a602084016104ff565b60208201526107098a604084016104ff565b604082015261071b8a606084016104ff565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100935083820135848201526101209350838201358482015261014093508382013583811115610777578889fd5b6107838b828501610529565b85830152506101609350838201358381111561079d578889fd5b6107a98b828501610529565b85830152508097505050602087013594506040870135935060608701359150808211156107d557600080fd5b506107e287828801610529565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260005b8181101561082e57602081850181015186830182015201610812565b81811115610840576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b60208082526015908201527f54414b45525f4e4f545f57484954454c49535445440000000000000000000000604082015260600190565b60208082526013908201527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000604082015260600190565b60208082526015908201527f4d414b45525f4e4f545f57484954454c49535445440000000000000000000000604082015260600190565b6020808252600e908201527f494e56414c49445f53454e444552000000000000000000000000000000000000604082015260600190565b6000606082526101806109926060840187516107ee565b60208601516109a460808501826107ee565b5060408601516109b760a08501826107ee565b5060608601516109ca60c08501826107ee565b50608086015160e084015260a0860151610100818186015260c08801519150610120828187015260e089015192506101408381880152828a0151935061016092508383880152818a015185880152808a015193505050826101a0860152610a356101e0860183610808565b9250808801519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0848303016101c0850152610a738282610808565b8660208601528481036040860152610a8b8187610808565b98975050505050505050565b600085825273ffffffffffffffffffffffffffffffffffffffff8516602083015260806040830152610acc6080830185610808565b8281036060840152600084546001811660008114610af15760018114610b3057610b6f565b610b01607f600284041685610bb0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831681526020019250610b6f565b60028204610b3e8186610bb0565b610b4789610ba4565b60005b83811015610b6657815483820152600190910190602001610b4a565b91909101945050505b509098975050505050505050565b60405181810167ffffffffffffffff81118282101715610b9c57600080fd5b604052919050565b60009081526020902090565b9081526020019056fea265627a7a7230582030142b91e8a0c8ea4dbc0431f962e470f668a8d6ce3966524f761cf4abd95eb36c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH3 0xDC3 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH2 0x30 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x152 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x8C SWAP1 ADDRESS SWAP1 PUSH32 0x500000000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x20 ADD PUSH2 0x182 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xB0 SWAP3 SWAP2 SWAP1 PUSH2 0xB7 JUMP JUMPDEST POP POP PUSH2 0x1C0 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0xF8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x125 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x125 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x125 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x10A JUMP JUMPDEST POP PUSH2 0x131 SWAP3 SWAP2 POP PUSH2 0x135 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x14F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x13B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 SHL DUP3 MSTORE PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST PUSH2 0xBF3 DUP1 PUSH3 0x1D0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x93634702 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0xC07732A3 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xF0 JUMPI PUSH2 0x72 JUMP JUMPDEST DUP1 PUSH4 0x141DA876 EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x695 JUMP JUMPDEST PUSH2 0x103 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBD PUSH2 0x36A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x9F PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x386 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xEB CALLDATASIZE PUSH1 0x4 PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xFE CALLDATASIZE PUSH1 0x4 PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0x146 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x944 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x89F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x23F SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x97B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x2 SLOAD SWAP2 MLOAD PUSH32 0xBFC8BFCE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xBFC8BFCE SWAP1 PUSH2 0x31B SWAP1 DUP8 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x4 ADD PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x349 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ORIGIN EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x8D6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x49F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x8D6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x539 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x54F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x580 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xB7D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5CC DUP4 DUP4 PUSH2 0x4FF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F0 DUP5 DUP5 PUSH2 0x4FF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x625 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x636 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x4FF JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x652 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x663 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x673 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x684 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6AA JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6C1 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x180 SWAP2 DUP8 ADD DUP1 DUP10 SUB DUP4 SGT ISZERO PUSH2 0x6D5 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x6DE DUP4 PUSH2 0xB7D JUMP JUMPDEST PUSH2 0x6E8 DUP11 DUP4 PUSH2 0x4FF JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6F7 DUP11 PUSH1 0x20 DUP5 ADD PUSH2 0x4FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x709 DUP11 PUSH1 0x40 DUP5 ADD PUSH2 0x4FF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x71B DUP11 PUSH1 0x60 DUP5 ADD PUSH2 0x4FF JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x777 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x783 DUP12 DUP3 DUP6 ADD PUSH2 0x529 JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x160 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x79D JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x7A9 DUP12 DUP3 DUP6 ADD PUSH2 0x529 JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP DUP1 SWAP8 POP POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7E2 DUP8 DUP3 DUP9 ADD PUSH2 0x529 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x82E JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x812 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x840 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x54414B45525F4E4F545F57484954454C49535445440000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D414B45525F4E4F545F57484954454C49535445440000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x180 PUSH2 0x992 PUSH1 0x60 DUP5 ADD DUP8 MLOAD PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x9A4 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x9B7 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x9CA PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP7 ADD MSTORE PUSH1 0xC0 DUP9 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP8 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD SWAP3 POP PUSH2 0x140 DUP4 DUP2 DUP9 ADD MSTORE DUP3 DUP11 ADD MLOAD SWAP4 POP PUSH2 0x160 SWAP3 POP DUP4 DUP4 DUP9 ADD MSTORE DUP2 DUP11 ADD MLOAD DUP6 DUP9 ADD MSTORE DUP1 DUP11 ADD MLOAD SWAP4 POP POP POP DUP3 PUSH2 0x1A0 DUP7 ADD MSTORE PUSH2 0xA35 PUSH2 0x1E0 DUP7 ADD DUP4 PUSH2 0x808 JUMP JUMPDEST SWAP3 POP DUP1 DUP9 ADD MLOAD SWAP2 POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP5 DUP4 SUB ADD PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0xA73 DUP3 DUP3 PUSH2 0x808 JUMP JUMPDEST DUP7 PUSH1 0x20 DUP7 ADD MSTORE DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xA8B DUP2 DUP8 PUSH2 0x808 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xACC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x808 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x0 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0xAF1 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xB30 JUMPI PUSH2 0xB6F JUMP JUMPDEST PUSH2 0xB01 PUSH1 0x7F PUSH1 0x2 DUP5 DIV AND DUP6 PUSH2 0xBB0 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP4 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH2 0xB6F JUMP JUMPDEST PUSH1 0x2 DUP3 DIV PUSH2 0xB3E DUP2 DUP7 PUSH2 0xBB0 JUMP JUMPDEST PUSH2 0xB47 DUP10 PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB66 JUMPI DUP2 SLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0xB4A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP5 POP POP POP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 ADDRESS EQ 0x2b SWAP2 0xe8 LOG0 0xc8 0xea 0x4d 0xbc DIV BALANCE 0xf9 PUSH3 0xE470F6 PUSH9 0xA8D6CE3966524F761C DELEGATECALL 0xab 0xd9 0x5e 0xb3 PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "804:3565:3:-;;;1191:188;8:9:-1;5:2;;;30:1;27;20:12;5:2;1191:188:3;;;;;;;;;;;;;;;;;;;;;;173:5:42;:18;;181:10;-1:-1:-1;;;;;;173:18:42;;;;;;;1252:8:3;:31;;;;;-1:-1:-1;;;;;1252:31:3;;;;;1315:57;;;;1340:4;;1347:24;;1315:57;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1315:57:3;;;1293:19;:79;;;;;;;;;;;;:::i;:::-;;1191:188;804:3565;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;804:3565:3;;;-1:-1:-1;804:3565:3;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;146:263:-1:-;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;89:6;83:13;-1:-1;;;;;1948:5;1426:54;1923:5;1920:35;1910:2;;-1:-1;;1959:12;1910:2;319:74;223:186;-1:-1;;;223:186;730:378;-1:-1;;;;;1426:54;;;;1836:2;1832:14;505:58;;1285:66;1274:78;972:2;963:12;;662:56;1072:11;;;863:245;;804:3565:3;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063936347021161005057806393634702146100ca578063c07732a3146100dd578063f2fde38b146100f057610072565b8063141da876146100775780633af32abf1461008c5780638da5cb5b146100b5575b600080fd5b61008a610085366004610695565b610103565b005b61009f61009a3660046105b0565b610355565b6040516100ac9190610894565b60405180910390f35b6100bd61036a565b6040516100ac9190610873565b61009f6100d8366004610610565b610386565b61008a6100eb3660046105d3565b6103a7565b61008a6100fe3660046105b0565b61044e565b33328114610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d90610944565b60405180910390fd5b845173ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff166101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d9061090d565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205460ff16610205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d9061089f565b6040516060907fb4be83d5000000000000000000000000000000000000000000000000000000009061023f9088908890879060240161097b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260025491517fbfc8bfce00000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff9091169063bfc8bfce9061031b90879086908690600390600401610a97565b600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b50505050505050505050565b60016020526000908152604090205460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff83163214949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d906108d6565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d906108d6565b73ffffffffffffffffffffffffffffffffffffffff8116156104fc57600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b803573ffffffffffffffffffffffffffffffffffffffff8116811461052357600080fd5b92915050565b600082601f830112610539578081fd5b813567ffffffffffffffff81111561054f578182fd5b61058060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610b7d565b915080825283602082850101111561059757600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156105c257600080fd5b6105cc83836104ff565b9392505050565b600080604083850312156105e657600080fd5b6105f084846104ff565b91506020830135801515811461060557600080fd5b809150509250929050565b60008060008060608587031215610625578182fd5b8435935061063686602087016104ff565b9250604085013567ffffffffffffffff80821115610652578384fd5b81870188601f820112610663578485fd5b8035925081831115610673578485fd5b886020848301011115610684578485fd5b959894975050602090940194505050565b600080600080608085870312156106aa578384fd5b843567ffffffffffffffff808211156106c1578586fd5b6101809187018089038313156106d5578687fd5b6106de83610b7d565b6106e88a836104ff565b81526106f78a602084016104ff565b60208201526107098a604084016104ff565b604082015261071b8a606084016104ff565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100935083820135848201526101209350838201358482015261014093508382013583811115610777578889fd5b6107838b828501610529565b85830152506101609350838201358381111561079d578889fd5b6107a98b828501610529565b85830152508097505050602087013594506040870135935060608701359150808211156107d557600080fd5b506107e287828801610529565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260005b8181101561082e57602081850181015186830182015201610812565b81811115610840576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b60208082526015908201527f54414b45525f4e4f545f57484954454c49535445440000000000000000000000604082015260600190565b60208082526013908201527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000604082015260600190565b60208082526015908201527f4d414b45525f4e4f545f57484954454c49535445440000000000000000000000604082015260600190565b6020808252600e908201527f494e56414c49445f53454e444552000000000000000000000000000000000000604082015260600190565b6000606082526101806109926060840187516107ee565b60208601516109a460808501826107ee565b5060408601516109b760a08501826107ee565b5060608601516109ca60c08501826107ee565b50608086015160e084015260a0860151610100818186015260c08801519150610120828187015260e089015192506101408381880152828a0151935061016092508383880152818a015185880152808a015193505050826101a0860152610a356101e0860183610808565b9250808801519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0848303016101c0850152610a738282610808565b8660208601528481036040860152610a8b8187610808565b98975050505050505050565b600085825273ffffffffffffffffffffffffffffffffffffffff8516602083015260806040830152610acc6080830185610808565b8281036060840152600084546001811660008114610af15760018114610b3057610b6f565b610b01607f600284041685610bb0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831681526020019250610b6f565b60028204610b3e8186610bb0565b610b4789610ba4565b60005b83811015610b6657815483820152600190910190602001610b4a565b91909101945050505b509098975050505050505050565b60405181810167ffffffffffffffff81118282101715610b9c57600080fd5b604052919050565b60009081526020902090565b9081526020019056fea265627a7a7230582030142b91e8a0c8ea4dbc0431f962e470f668a8d6ce3966524f761cf4abd95eb36c6578706572696d656e74616cf50037",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x93634702 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0xC07732A3 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xF0 JUMPI PUSH2 0x72 JUMP JUMPDEST DUP1 PUSH4 0x141DA876 EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x695 JUMP JUMPDEST PUSH2 0x103 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x894 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBD PUSH2 0x36A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x9F PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x386 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xEB CALLDATASIZE PUSH1 0x4 PUSH2 0x5D3 JUMP JUMPDEST PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x8A PUSH2 0xFE CALLDATASIZE PUSH1 0x4 PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x44E JUMP JUMPDEST CALLER ORIGIN DUP2 EQ PUSH2 0x146 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x944 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1A6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x90D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x89F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x23F SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x97B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x2 SLOAD SWAP2 MLOAD PUSH32 0xBFC8BFCE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xBFC8BFCE SWAP1 PUSH2 0x31B SWAP1 DUP8 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x4 ADD PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x349 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ORIGIN EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x8D6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x49F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13D SWAP1 PUSH2 0x8D6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x539 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x54F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x580 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xB7D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x597 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5CC DUP4 DUP4 PUSH2 0x4FF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F0 DUP5 DUP5 PUSH2 0x4FF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x625 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x636 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x4FF JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x652 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x663 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x673 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x684 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 SWAP1 SWAP5 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6AA JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6C1 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x180 SWAP2 DUP8 ADD DUP1 DUP10 SUB DUP4 SGT ISZERO PUSH2 0x6D5 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x6DE DUP4 PUSH2 0xB7D JUMP JUMPDEST PUSH2 0x6E8 DUP11 DUP4 PUSH2 0x4FF JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6F7 DUP11 PUSH1 0x20 DUP5 ADD PUSH2 0x4FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x709 DUP11 PUSH1 0x40 DUP5 ADD PUSH2 0x4FF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x71B DUP11 PUSH1 0x60 DUP5 ADD PUSH2 0x4FF JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x777 JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x783 DUP12 DUP3 DUP6 ADD PUSH2 0x529 JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP PUSH2 0x160 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x79D JUMPI DUP9 DUP10 REVERT JUMPDEST PUSH2 0x7A9 DUP12 DUP3 DUP6 ADD PUSH2 0x529 JUMP JUMPDEST DUP6 DUP4 ADD MSTORE POP DUP1 SWAP8 POP POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7E2 DUP8 DUP3 DUP9 ADD PUSH2 0x529 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x82E JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x812 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x840 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x54414B45525F4E4F545F57484954454C49535445440000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D414B45525F4E4F545F57484954454C49535445440000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x180 PUSH2 0x992 PUSH1 0x60 DUP5 ADD DUP8 MLOAD PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x9A4 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x9B7 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD PUSH2 0x9CA PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x7EE JUMP JUMPDEST POP PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH2 0x100 DUP2 DUP2 DUP7 ADD MSTORE PUSH1 0xC0 DUP9 ADD MLOAD SWAP2 POP PUSH2 0x120 DUP3 DUP2 DUP8 ADD MSTORE PUSH1 0xE0 DUP10 ADD MLOAD SWAP3 POP PUSH2 0x140 DUP4 DUP2 DUP9 ADD MSTORE DUP3 DUP11 ADD MLOAD SWAP4 POP PUSH2 0x160 SWAP3 POP DUP4 DUP4 DUP9 ADD MSTORE DUP2 DUP11 ADD MLOAD DUP6 DUP9 ADD MSTORE DUP1 DUP11 ADD MLOAD SWAP4 POP POP POP DUP3 PUSH2 0x1A0 DUP7 ADD MSTORE PUSH2 0xA35 PUSH2 0x1E0 DUP7 ADD DUP4 PUSH2 0x808 JUMP JUMPDEST SWAP3 POP DUP1 DUP9 ADD MLOAD SWAP2 POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP5 DUP4 SUB ADD PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0xA73 DUP3 DUP3 PUSH2 0x808 JUMP JUMPDEST DUP7 PUSH1 0x20 DUP7 ADD MSTORE DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0xA8B DUP2 DUP8 PUSH2 0x808 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xACC PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x808 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x0 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0xAF1 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xB30 JUMPI PUSH2 0xB6F JUMP JUMPDEST PUSH2 0xB01 PUSH1 0x7F PUSH1 0x2 DUP5 DIV AND DUP6 PUSH2 0xBB0 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP4 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH2 0xB6F JUMP JUMPDEST PUSH1 0x2 DUP3 DIV PUSH2 0xB3E DUP2 DUP7 PUSH2 0xBB0 JUMP JUMPDEST PUSH2 0xB47 DUP10 PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB66 JUMPI DUP2 SLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0xB4A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP5 POP POP POP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 ADDRESS EQ 0x2b SWAP2 0xe8 LOG0 0xc8 0xea 0x4d 0xbc DIV BALANCE 0xf9 PUSH3 0xE470F6 PUSH9 0xA8D6CE3966524F761C DELEGATECALL 0xab 0xd9 0x5e 0xb3 PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
				"sourceMap": "804:3565:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;804:3565:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3163:1204;;;;;;;;;:::i;:::-;;892:46;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;102:20:42;;;:::i;:::-;;;;;;;;2227:287:3;;;;;;;;;:::i;1573:176::-;;;;;;;;;:::i;344:167:42:-;;;;;;;;;:::i;3163:1204:3:-;3387:10;3572:9;3556:25;;3478:143;;;;;;;;;;;;;;;;;;;;;;3714:18;;3700:33;;;;;;:13;:33;;;;;;;;3679:101;;;;;;;;;;;;;;3859:27;;;;;;;:13;:27;;;;;;;;3838:95;;;;;;;;;;;;;;4009:154;;3989:17;;4045:27;;4009:154;;4086:5;;4105:20;;4139:14;;4009:154;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;4009:154:3;;;49:4:-1;25:18;;61:17;;4009:154:3;182:15:-1;4009:154:3;;;;179:29:-1;;;;160:49;;;4228:8:3;;:132;;;;;4009:154;;-1:-1:-1;4228:8:3;;;;;:27;;:132;;4269:4;;4287:12;;4009:154;;4331:19;;4228:132;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4228:132:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4228:132:3;;;;3163:1204;;;;;;:::o;892:46::-;;;;;;;;;;;;;;;:::o;102:20:42:-;;;;;;:::o;2227:287:3:-;2481:26;;;2498:9;2481:26;2227:287;;;;;;:::o;1573:176::-;270:5:42;;;;256:10;:19;235:85;;;;;;;;;;;;;;1708:21:3;;;;;;;;;:13;:21;;;;;:34;;;;;;;;;;;;;1573:176::o;344:167:42:-;270:5;;;;256:10;:19;235:85;;;;;;;;;;;;;;440:22;;;;436:69;;478:5;:16;;;;;;;;;;436:69;344:167;:::o;5:130:-1:-;72:20;;17500:42;17489:54;;18229:35;;18219:2;;18278:1;;18268:12;18219:2;57:78;;;;;768:432;;865:3;858:4;850:6;846:17;842:27;832:2;;-1:-1;;873:12;832:2;920:6;907:20;15934:18;15926:6;15923:30;15920:2;;;-1:-1;;15956:12;15920:2;942:60;16039:4;16006:9;858:4;15991:6;15987:17;15983:33;16029:15;942:60;;;933:69;;1022:6;1015:5;1008:21;1126:3;16039:4;1117:6;1050;1108:16;;1105:25;1102:2;;;1143:1;;1133:12;1102:2;17716:6;16039:4;1050:6;1046:17;16039:4;1084:5;1080:16;17693:30;17772:1;17754:16;;;16039:4;17754:16;17747:27;1084:5;825:375;-1:-1;;825:375;4038:241;;4142:2;4130:9;4121:7;4117:23;4113:32;4110:2;;;-1:-1;;4148:12;4110:2;4210:53;4255:7;4231:22;4210:53;;;4200:63;4104:175;-1:-1;;;4104:175;4286:360;;;4404:2;4392:9;4383:7;4379:23;4375:32;4372:2;;;-1:-1;;4410:12;4372:2;4472:53;4517:7;4493:22;4472:53;;;4462:63;;4562:2;4602:9;4598:22;206:20;18375:5;17322:13;17315:21;18353:5;18350:32;18340:2;;-1:-1;;18386:12;18340:2;4570:60;;;;4366:280;;;;;;4653:615;;;;;4810:2;4798:9;4789:7;4785:23;4781:32;4778:2;;;4826:1;4823;4816:12;4778:2;353:6;340:20;4868:63;;4986:53;5031:7;4968:2;5011:9;5007:22;4986:53;;;4976:63;;5104:2;5093:9;5089:18;5076:32;5128:18;;5120:6;5117:30;5114:2;;;5160:1;5157;5150:12;5114:2;5235:6;5224:9;5220:22;538:3;531:4;523:6;519:17;515:27;505:2;;556:1;553;546:12;505:2;589:6;576:20;566:30;;616:18;608:6;605:30;602:2;;;648:1;645;638:12;602:2;732:3;4968:2;713:16;674:6;699:31;;696:40;693:2;;;749:1;746;739:12;693:2;4772:496;;;;-1:-1;;4968:2;670:17;;;;-1:-1;;;4772:496;5275:853;;;;;5462:3;5450:9;5441:7;5437:23;5433:33;5430:2;;;5479:1;5476;5469:12;5430:2;5527:17;5514:31;5565:18;;5557:6;5554:30;5551:2;;;5597:1;5594;5587:12;5551:2;1797:5;;5661:22;;1776:19;;;1772:31;-1:-1;1769:2;;;1816:1;1813;1806:12;1769:2;1834:21;1849:5;1834:21;;;1944:49;1989:3;1965:22;1944:49;;;1927:15;1920:74;2096:49;2141:3;2063:2;2121:9;2117:22;2096:49;;;2063:2;2082:5;2078:16;2071:75;2255:49;2300:3;2222:2;2280:9;2276:22;2255:49;;;2222:2;2241:5;2237:16;2230:75;2408:49;2453:3;2375:2;2433:9;2429:22;2408:49;;;2375:2;2394:5;2390:16;2383:75;5462:3;2590:9;2586:22;3968:20;5462:3;2551:5;2547:16;2540:75;2688:3;2747:9;2743:22;3968:20;2688:3;2708:5;2704:16;2697:75;2837:3;2896:9;2892:22;3968:20;2837:3;2857:5;2853:16;2846:75;2986:3;3045:9;3041:22;3968:20;2986:3;3006:5;3002:16;2995:75;3148:3;3134:17;;3219:6;3208:9;3204:22;3968:20;3175:5;3168;3164:17;3157:76;3294:3;3280:17;;3365:6;3354:9;3350:22;3968:20;3321:5;3314;3310:17;3303:76;3478:3;;;;3467:9;3463:19;3450:33;3503:18;3495:6;3492:30;3489:2;;;3535:1;3532;3525:12;3489:2;3571:54;3621:3;3612:6;3601:9;3597:22;3571:54;;;3563:5;3556;3552:17;3545:81;;3725:3;;;;3714:9;3710:19;3697:33;3750:18;3742:6;3739:30;3736:2;;;3782:1;3779;3772:12;3736:2;3818:54;3868:3;3859:6;3848:9;3844:22;3818:54;;;3810:5;3803;3799:17;3792:81;;5607:86;;;;;2063:2;5773:9;5769:22;3968:20;5738:63;;2222:2;5881:9;5877:22;3968:20;5846:63;;2375:2;5963:9;5959:18;5946:32;5932:46;;5998:18;5990:6;5987:30;5984:2;;;-1:-1;;6020:12;5984:2;;6050:62;6104:7;6095:6;6084:9;6080:22;6050:62;;;6040:72;;;5424:704;;;;;;;;6135:103;17500:42;17489:54;6196:37;;6190:48;6476:343;;6618:5;16532:12;16759:6;16754:3;16747:19;-1:-1;17861:101;17875:6;17872:1;17869:13;17861:101;;;16796:4;17942:11;;;;;17936:18;17923:11;;;;;17916:39;17890:10;17861:101;;;17977:6;17974:1;17971:13;17968:2;;;-1:-1;16796:4;18033:6;16791:3;18024:16;;18017:27;17968:2;-1:-1;18153:2;18133:14;18149:7;18129:28;6775:39;;;;16796:4;6775:39;;6566:253;-1:-1;;6566:253;12066:213;17500:42;17489:54;;;;6196:37;;12184:2;12169:18;;12155:124;12286:201;17322:13;;17315:21;6430:34;;12398:2;12383:18;;12369:118;12494:407;12685:2;12699:47;;;8222:2;12670:18;;;16747:19;8258:66;16787:14;;;8238:87;8344:12;;;12656:245;12908:407;13099:2;13113:47;;;8595:2;13084:18;;;16747:19;8631:66;16787:14;;;8611:87;8717:12;;;13070:245;13322:407;13513:2;13527:47;;;8968:2;13498:18;;;16747:19;9004:66;16787:14;;;8984:87;9090:12;;;13484:245;13736:407;13927:2;13941:47;;;9341:2;13912:18;;;16747:19;9377:66;16787:14;;;9357:87;9463:12;;;13898:245;14150:659;;14388:2;14409:17;14402:47;9689:5;9792:62;14388:2;14377:9;14373:18;9770:15;9764:22;9792:62;;;9941:4;9934:5;9930:16;9924:23;9953:63;10001:14;14377:9;10001:14;9987:12;9953:63;;;;10110:4;10103:5;10099:16;10093:23;10122:63;10170:14;14377:9;10170:14;10156:12;10122:63;;;;14388:2;10266:5;10262:16;10256:23;10285:63;10333:14;14377:9;10333:14;10319:12;10285:63;;;;10001:14;10432:5;10428:16;10422:23;10499:14;14377:9;10499:14;11897:37;10170:14;10598:5;10594:16;10588:23;10665:14;11927:5;10665:14;14377:9;10665:14;11897:37;10333:14;10756:5;10752:16;10746:23;10726:43;;10823:14;11927:5;10823:14;14377:9;10823:14;11897:37;10499:14;10914:5;10910:16;10904:23;10884:43;;10981:14;11927:5;10981:14;14377:9;10981:14;11897:37;11092:5;11085;11081:17;11075:24;11055:44;;11153:15;;;11927:5;11153:15;14377:9;11153:15;11897:37;11248:5;11241;11237:17;11231:24;11309:15;14377:9;11309:15;11897:37;11414:5;11407;11403:17;11397:24;11377:44;;;;11458:14;11441:15;14377:9;11441:15;11434:39;11488:67;9680:15;14377:9;9680:15;11536:12;11488:67;;;11480:75;;11650:5;11643;11639:17;11633:24;11613:44;;;11694:14;14377:9;11698:4;11694:14;;11677:15;14377:9;11677:15;11670:39;11724:67;11786:4;11772:12;11724:67;;;11927:5;9941:4;14635:9;14631:18;11897:37;14698:9;14692:4;14688:20;10110:4;14672:9;14668:18;14661:48;14723:76;14794:4;14785:6;14723:76;;;14715:84;14359:450;-1:-1;;;;;;;;14359:450;14816:709;;11927:5;11904:3;11897:37;17500:42;6226:5;17489:54;15216:2;15205:9;15201:18;6196:37;15051:3;15253:2;15242:9;15238:18;15231:48;15293:76;15051:3;15040:9;15036:19;15355:6;15293:76;;;15417:9;15411:4;15407:20;15402:2;15391:9;15387:18;15380:48;-1:-1;7288:5;7282:12;7322:1;7311:9;7307:17;7335:1;7330:247;;;;7588:1;7583:400;;;;7300:683;;7330:247;7427:70;7408:4;7404:1;7393:9;7389:17;7385:28;7485:3;7427:70;;;7531:9;7516:25;;7504:38;;15216:2;7556:14;;-1:-1;7330:247;;7583:400;7652:1;7641:9;7637:17;7668:70;7731:6;7726:3;7668:70;;;7760:37;7791:5;7760:37;;;-1:-1;7821:130;7835:6;7832:1;7829:13;7821:130;;;7894:14;;7881:11;;;7874:35;7322:1;7928:15;;;;15216:2;7850:12;7821:130;;;7965:11;;;;;-1:-1;;;7300:683;-1:-1;15434:81;;15022:503;-1:-1;;;;;;;;15022:503;15532:256;15594:2;15588:9;15620:17;;;15695:18;15680:34;;15716:22;;;15677:62;15674:2;;;15752:1;;15742:12;15674:2;15594;15761:22;15572:216;;-1:-1;15572:216;16324:128;;16391:15;;;16439:4;16426:18;;;16382:70;16655:152;16747:19;;;16796:4;16787:14;;16740:67"
			}
		}
	},
	"sources": {
		"examples/Whitelist.sol": {
			"id": 3
		},
		"src/interfaces/IExchange.sol": {
			"id": 13
		},
		"src/interfaces/IExchangeCore.sol": {
			"id": 14
		},
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
			"id": 40
		},
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": {
			"id": 36
		},
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
			"id": 38
		},
		"@0x/contracts-utils/contracts/src/SafeMath.sol": {
			"id": 44
		},
		"src/interfaces/IMatchOrders.sol": {
			"id": 15
		},
		"src/interfaces/ISignatureValidator.sol": {
			"id": 16
		},
		"src/interfaces/ITransactions.sol": {
			"id": 17
		},
		"src/interfaces/IAssetProxyDispatcher.sol": {
			"id": 12
		},
		"src/interfaces/IWrapperFunctions.sol": {
			"id": 20
		},
		"@0x/contracts-utils/contracts/src/Ownable.sol": {
			"id": 42
		},
		"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol": {
			"id": 45
		}
	},
	"sourceCodes": {
		"examples/Whitelist.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\n\n\ncontract Whitelist is\n    Ownable\n{\n\n    // Mapping of address => whitelist status.\n    mapping (address => bool) public isWhitelisted;\n\n    // Exchange contract.\n    // solhint-disable var-name-mixedcase\n    IExchange internal EXCHANGE;\n    bytes internal TX_ORIGIN_SIGNATURE;\n    // solhint-enable var-name-mixedcase\n\n    byte constant internal VALIDATOR_SIGNATURE_BYTE = \"\\x05\";\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n        TX_ORIGIN_SIGNATURE = abi.encodePacked(address(this), VALIDATOR_SIGNATURE_BYTE);\n    }\n\n    /// @dev Adds or removes an address from the whitelist.\n    /// @param target Address to add or remove from whitelist.\n    /// @param isApproved Whitelist status to assign to address.\n    function updateWhitelistStatus(\n        address target,\n        bool isApproved\n    )\n        external\n        onlyOwner\n    {\n        isWhitelisted[target] = isApproved;\n    }\n\n    /// @dev Verifies signer is same as signer of current Ethereum transaction.\n    ///      NOTE: This function can currently be used to validate signatures coming from outside of this contract.\n    ///      Extra safety checks can be added for a production contract.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    // solhint-disable no-unused-vars\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid)\n    {\n        // solhint-disable-next-line avoid-tx-origin\n        return signerAddress == tx.origin;\n    }\n    // solhint-enable no-unused-vars\n\n    /// @dev Fills an order using `msg.sender` as the taker.\n    ///      The transaction will revert if both the maker and taker are not whitelisted.\n    ///      Orders should specify this contract as the `senderAddress` in order to gaurantee\n    ///      that both maker and taker have been whitelisted.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param salt Arbitrary value to gaurantee uniqueness of 0x transaction hash.\n    /// @param orderSignature Proof that order has been created by maker.\n    function fillOrderIfWhitelisted(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        uint256 salt,\n        bytes memory orderSignature\n    )\n        public\n    {\n        address takerAddress = msg.sender;\n\n        // This contract must be the entry point for the transaction.\n        require(\n            // solhint-disable-next-line avoid-tx-origin\n            takerAddress == tx.origin,\n            \"INVALID_SENDER\"\n        );\n\n        // Check if maker is on the whitelist.\n        require(\n            isWhitelisted[order.makerAddress],\n            \"MAKER_NOT_WHITELISTED\"\n        );\n\n        // Check if taker is on the whitelist.\n        require(\n            isWhitelisted[takerAddress],\n            \"TAKER_NOT_WHITELISTED\"\n        );\n\n        // Encode arguments into byte array.\n        bytes memory data = abi.encodeWithSelector(\n            EXCHANGE.fillOrder.selector,\n            order,\n            takerAssetFillAmount,\n            orderSignature\n        );\n\n        // Call `fillOrder` via `executeTransaction`.\n        EXCHANGE.executeTransaction(\n            salt,\n            takerAddress,\n            data,\n            TX_ORIGIN_SIGNATURE\n        );\n    }\n}\n",
		"src/interfaces/IExchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n",
		"src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            uint256(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
		"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.5;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
		"src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
		"src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
		"src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes calldata data,\n        bytes calldata signature\n    )\n        external;\n}\n",
		"src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
		"src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n",
		"@0x/contracts-utils/contracts/src/Ownable.sol": "pragma solidity ^0.5.5;\n\nimport \"./interfaces/IOwnable.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n",
		"@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol": "pragma solidity ^0.5.5;\n\n\ncontract IOwnable {\n\n    function transferOwnership(address newOwner)\n        public;\n}\n"
	},
	"sourceTreeHashHex": "0x4eeb134f3a21214bbb46f2f60cd63c5520941718f55bbcfd8360f879ea5bf78a",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.8+commit.23d335f2.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": [
				"@0x/contracts-exchange-libs=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-exchange-libs",
				"@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-utils",
				"@0x/contracts-erc20=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-erc20"
			]
		}
	},
	"networks": {}
}