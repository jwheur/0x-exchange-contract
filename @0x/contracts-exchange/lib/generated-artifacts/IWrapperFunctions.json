{
    "schemaVersion": "2.0.0",
    "contractName": "IWrapperFunctions",
    "compilerOutput": {
        "abi": [
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchFillOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "fillOrderNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    }
                ],
                "name": "batchCancelOrders",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchFillOrKillOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchFillOrdersNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "fillOrKillOrder",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketSellOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    }
                ],
                "name": "getOrdersInfo",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "orderStatus",
                                "type": "uint8"
                            },
                            {
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "name": "orderTakerAssetFilledAmount",
                                "type": "uint256"
                            }
                        ],
                        "name": "",
                        "type": "tuple[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "makerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketBuyOrdersNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketSellOrdersNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "makerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketBuyOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "batchCancelOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
                    "details": "Synchronously cancels multiple orders in a single transaction.",
                    "params": {
                        "orders": "Array of order specifications."
                    }
                },
                "batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
                    "details": "Synchronously executes multiple calls of fillOrKill.",
                    "params": {
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been created by makers.",
                        "takerAssetFillAmounts": "Array of desired amounts of takerAsset to sell in orders."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                },
                "batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
                    "details": "Synchronously executes multiple calls of fillOrder.",
                    "params": {
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been created by makers.",
                        "takerAssetFillAmounts": "Array of desired amounts of takerAsset to sell in orders."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                },
                "batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
                    "details": "Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.",
                    "params": {
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been created by makers.",
                        "takerAssetFillAmounts": "Array of desired amounts of takerAsset to sell in orders."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                },
                "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
                    "details": "Fills the input order. Reverts if exact takerAssetFillAmount not filled.",
                    "params": {
                        "order": "LibOrder.Order struct containing order specifications.",
                        "signature": "Proof that order has been created by maker.",
                        "takerAssetFillAmount": "Desired amount of takerAsset to sell."
                    }
                },
                "fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
                    "details": "Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.",
                    "params": {
                        "order": "LibOrder.Order struct containing order specifications.",
                        "signature": "Proof that order has been created by maker.",
                        "takerAssetFillAmount": "Desired amount of takerAsset to sell."
                    },
                    "return": "Amounts filled and fees paid by maker and taker."
                },
                "getOrdersInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
                    "details": "Fetches information for all passed in orders",
                    "params": {
                        "orders": "Array of order specifications."
                    },
                    "return": "Array of OrderInfo instances that correspond to each order."
                },
                "marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                    "details": "Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.",
                    "params": {
                        "makerAssetFillAmount": "Desired amount of makerAsset to buy.",
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been signed by makers."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                },
                "marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                    "details": "Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.      Returns false if the transaction would otherwise revert.",
                    "params": {
                        "makerAssetFillAmount": "Desired amount of makerAsset to buy.",
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been signed by makers."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                },
                "marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                    "details": "Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.",
                    "params": {
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been created by makers.",
                        "takerAssetFillAmount": "Desired amount of takerAsset to sell."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                },
                "marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                    "details": "Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.      Returns false if the transaction would otherwise revert.",
                    "params": {
                        "orders": "Array of order specifications.",
                        "signatures": "Proofs that orders have been signed by makers.",
                        "takerAssetFillAmount": "Desired amount of takerAsset to sell."
                    },
                    "return": "Amounts filled and fees paid by makers and taker."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x",
                "opcodes": "",
                "sourceMap": ""
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x",
                "opcodes": "",
                "sourceMap": ""
            }
        }
    },
    "sources": {
        "src/interfaces/IWrapperFunctions.sol": {
            "id": 20
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 40
        },
        "@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": {
            "id": 36
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 38
        },
        "@0x/contracts-utils/contracts/src/SafeMath.sol": {
            "id": 44
        }
    },
    "sourceCodes": {
        "src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            uint256(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.5;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "sourceTreeHashHex": "0xeddad94fd90080cc4ea646b8af2d4e2e113b6bba59cc04a5555c4c29a043c254",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.10+commit.5a6ea5b1.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "constantinople",
            "remappings": [
                "@0x/contracts-exchange-libs=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-erc20"
            ]
        }
    },
    "networks": {}
}
