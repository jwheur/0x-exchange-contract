{
    "schemaVersion": "2.0.0",
    "contractName": "TestExchangeInternals",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicIsRoundingErrorFloor",
                "outputs": [
                    {
                        "name": "isError",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAddress",
                        "type": "address"
                    },
                    {
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "name": "orderTakerAssetFilledAmount",
                        "type": "uint256"
                    },
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "name": "publicUpdateFilledState",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicGetPartialAmountCeil",
                "outputs": [
                    {
                        "name": "partialAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "name": "filled",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchFillOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "name": "cancelled",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "hash",
                        "type": "bytes32"
                    },
                    {
                        "name": "signerAddress",
                        "type": "address"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "preSign",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "leftOrder",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "rightOrder",
                        "type": "tuple"
                    },
                    {
                        "name": "leftSignature",
                        "type": "bytes"
                    },
                    {
                        "name": "rightSignature",
                        "type": "bytes"
                    }
                ],
                "name": "matchOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "components": [
                                    {
                                        "name": "makerAssetFilledAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "name": "takerAssetFilledAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "name": "makerFeePaid",
                                        "type": "uint256"
                                    },
                                    {
                                        "name": "takerFeePaid",
                                        "type": "uint256"
                                    }
                                ],
                                "name": "left",
                                "type": "tuple"
                            },
                            {
                                "components": [
                                    {
                                        "name": "makerAssetFilledAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "name": "takerAssetFilledAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "name": "makerFeePaid",
                                        "type": "uint256"
                                    },
                                    {
                                        "name": "takerFeePaid",
                                        "type": "uint256"
                                    }
                                ],
                                "name": "right",
                                "type": "tuple"
                            },
                            {
                                "name": "leftMakerAssetSpreadAmount",
                                "type": "uint256"
                            }
                        ],
                        "name": "matchedFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "fillOrderNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "bytes4"
                    }
                ],
                "name": "assetProxies",
                "outputs": [
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    }
                ],
                "name": "batchCancelOrders",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchFillOrKillOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "targetOrderEpoch",
                        "type": "uint256"
                    }
                ],
                "name": "cancelOrdersUpTo",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchFillOrdersNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "assetProxyId",
                        "type": "bytes4"
                    }
                ],
                "name": "getAssetProxy",
                "outputs": [
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "name": "transactions",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "fillOrKillOrder",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "singleFillResults",
                        "type": "tuple"
                    }
                ],
                "name": "publicAddFillResults",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicIsRoundingErrorCeil",
                "outputs": [
                    {
                        "name": "isError",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "validatorAddress",
                        "type": "address"
                    },
                    {
                        "name": "approval",
                        "type": "bool"
                    }
                ],
                "name": "setSignatureValidatorApproval",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "address"
                    },
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "allowedValidators",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketSellOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    }
                ],
                "name": "getOrdersInfo",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "orderStatus",
                                "type": "uint8"
                            },
                            {
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "name": "orderTakerAssetFilledAmount",
                                "type": "uint256"
                            }
                        ],
                        "name": "",
                        "type": "tuple[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "preSigned",
                "outputs": [
                    {
                        "name": "",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "owner",
                "outputs": [
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "hash",
                        "type": "bytes32"
                    },
                    {
                        "name": "signerAddress",
                        "type": "address"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "isValidSignature",
                "outputs": [
                    {
                        "name": "isValid",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "makerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketBuyOrdersNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "fillOrder",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicGetPartialAmountFloor",
                "outputs": [
                    {
                        "name": "partialAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "salt",
                        "type": "uint256"
                    },
                    {
                        "name": "signerAddress",
                        "type": "address"
                    },
                    {
                        "name": "data",
                        "type": "bytes"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "executeTransaction",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "assetProxy",
                        "type": "address"
                    }
                ],
                "name": "registerAssetProxy",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getOrderInfo",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "orderStatus",
                                "type": "uint8"
                            },
                            {
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "name": "orderTakerAssetFilledAmount",
                                "type": "uint256"
                            }
                        ],
                        "name": "orderInfo",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "cancelOrder",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "",
                        "type": "address"
                    },
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "orderEpoch",
                "outputs": [
                    {
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "ZRX_ASSET_DATA",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketSellOrdersNoThrow",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicSafeGetPartialAmountFloor",
                "outputs": [
                    {
                        "name": "partialAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicSafeGetPartialAmountCeil",
                "outputs": [
                    {
                        "name": "partialAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFilledAmount",
                        "type": "uint256"
                    }
                ],
                "name": "publicCalculateFillResults",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "fillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "EIP712_DOMAIN_HASH",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "name": "makerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "marketBuyOrders",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "currentContextAddress",
                "outputs": [
                    {
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "transferOwnership",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "VERSION",
                "outputs": [
                    {
                        "name": "",
                        "type": "string"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "name": "signerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "name": "validatorAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "name": "approved",
                        "type": "bool"
                    }
                ],
                "name": "SignatureValidatorApproval",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "name": "makerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "name": "feeRecipientAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "name": "takerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "name": "senderAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "name": "makerAssetFilledAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "name": "takerAssetFilledAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "name": "makerFeePaid",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "name": "takerFeePaid",
                        "type": "uint256"
                    },
                    {
                        "indexed": true,
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "name": "makerAssetData",
                        "type": "bytes"
                    },
                    {
                        "indexed": false,
                        "name": "takerAssetData",
                        "type": "bytes"
                    }
                ],
                "name": "Fill",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "name": "makerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "name": "feeRecipientAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "name": "senderAddress",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "name": "makerAssetData",
                        "type": "bytes"
                    },
                    {
                        "indexed": false,
                        "name": "takerAssetData",
                        "type": "bytes"
                    }
                ],
                "name": "Cancel",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "name": "makerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "name": "senderAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "name": "orderEpoch",
                        "type": "uint256"
                    }
                ],
                "name": "CancelUpTo",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "name": "id",
                        "type": "bytes4"
                    },
                    {
                        "indexed": false,
                        "name": "assetProxy",
                        "type": "address"
                    }
                ],
                "name": "AssetProxyRegistered",
                "type": "event"
            }
        ],
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH3 0x3F SWAP2 PUSH1 0x1 SWAP2 PUSH3 0x154 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x52 SWAP1 PUSH3 0x214 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP4 DUP4 ADD DUP4 MSTORE PUSH1 0xB DUP5 MSTORE PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3200000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH3 0x120 SWAP3 SWAP2 PUSH32 0xF0F24618F4C4BE1E62E026FB039A20EF96F4495294817D1027FFAA6D1F70E61E SWAP2 PUSH32 0xAD7C5BEF027816A800DA1736444FB58A807EF4C9603B7848673F7E3A68EB14A5 SWAP2 ADDRESS SWAP2 ADD PUSH3 0x1F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x2 SSTORE POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH3 0x2D5 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x197 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1C7 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1C7 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1C7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1AA JUMP JUMPDEST POP PUSH3 0x1D5 SWAP3 SWAP2 POP PUSH3 0x1D9 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x1F6 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1D5 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0xD DUP3 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x19 DUP3 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x41 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH2 0x54FC DUP1 PUSH3 0x2E5 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2F4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E9D74DC GT PUSH2 0x191 JUMPI DUP1 PUSH4 0xD9BFA73E GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xE0B701E3 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEEA086BA GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x671 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xE0B701E3 EQ PUSH2 0x628 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x63B JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x643 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xDD1C7D18 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x5EF JUMPI DUP1 PUSH4 0xDE30200D EQ PUSH2 0x602 JUMPI DUP1 PUSH4 0xE0ACD33D EQ PUSH2 0x615 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xD9BFA73E EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0xDB123B1A EQ PUSH2 0x5DA JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xB4BE83D5 GT PUSH2 0x145 JUMPI DUP1 PUSH4 0xC585BB93 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0xC585BB93 EQ PUSH2 0x581 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x594 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x5B4 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0xBE7ADA1E EQ PUSH2 0x55B JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x56E JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x522 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x535 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x7E9D74DC EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x507 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x4D0AE546 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x64A3BC15 GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0x77FCCE68 GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x4D4 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0x66758D7B EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x679D2F9A EQ PUSH2 0x49B JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x50DDE190 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x60704108 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x462 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x429 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x2AC12622 GT PUSH2 0x2AC JUMPI DUP1 PUSH4 0x3E228BAE GT PUSH2 0x286 JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0x3FD3C997 EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x403 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x3B0 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x20777F70 GT PUSH2 0x2DD JUMPI DUP1 PUSH4 0x20777F70 EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x288CDC91 EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x36A JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x1BE23901 EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x1EA1E3D8 EQ PUSH2 0x322 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30C PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x679 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4B3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x335 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x43B0 JUMP JUMPDEST PUSH2 0x690 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x34A PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4B48 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x365 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0x6C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x53AA JUMP JUMPDEST PUSH2 0x30C PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0x7D9 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x426A JUMP JUMPDEST PUSH2 0x7EE JUMP JUMPDEST PUSH2 0x3C3 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x4425 JUMP JUMPDEST PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x53B8 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x4513 JUMP JUMPDEST PUSH2 0xA77 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4314 JUMP JUMPDEST PUSH2 0xACC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4A0F JUMP JUMPDEST PUSH2 0x335 PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C0 JUMP JUMPDEST PUSH2 0xAF4 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0xE41 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x4314 JUMP JUMPDEST PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0x30C PUSH2 0x470 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0xF04 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x4513 JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x496 CALLDATASIZE PUSH1 0x4 PUSH2 0x434E JUMP JUMPDEST PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x30C PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0xFDF JUMP JUMPDEST PUSH2 0x335 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4083 JUMP JUMPDEST PUSH2 0xFEC JUMP JUMPDEST PUSH2 0x30C PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x404E JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x1145 JUMP JUMPDEST PUSH2 0x4FA PUSH2 0x4F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C0 JUMP JUMPDEST PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4AEF JUMP JUMPDEST PUSH2 0x30C PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x4245 JUMP JUMPDEST PUSH2 0x132A JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x134A JUMP JUMPDEST PUSH2 0x30C PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x42C5 JUMP JUMPDEST PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x17E5 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x4513 JUMP JUMPDEST PUSH2 0x18E4 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x569 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x195F JUMP JUMPDEST PUSH2 0x335 PUSH2 0x57C CALLDATASIZE PUSH1 0x4 PUSH2 0x4573 JUMP JUMPDEST PUSH2 0x196C JUMP JUMPDEST PUSH2 0x335 PUSH2 0x58F CALLDATASIZE PUSH1 0x4 PUSH2 0x4032 JUMP JUMPDEST PUSH2 0x1C3B JUMP JUMPDEST PUSH2 0x5A7 PUSH2 0x5A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x437B JUMP JUMPDEST PUSH2 0x1E3D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x53F0 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x437B JUMP JUMPDEST PUSH2 0x1F33 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x5D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x404E JUMP JUMPDEST PUSH2 0x1FCF JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0x1FEC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4C0E JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5FD CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x2097 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x2150 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x623 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x215D JUMP JUMPDEST PUSH2 0x37D PUSH2 0x636 CALLDATASIZE PUSH1 0x4 PUSH2 0x44CE JUMP JUMPDEST PUSH2 0x216A JUMP JUMPDEST PUSH2 0x34A PUSH2 0x217C JUMP JUMPDEST PUSH2 0x37D PUSH2 0x651 CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x2182 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x22B3 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x4032 JUMP JUMPDEST PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0x2380 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x69D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x243C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x24FE JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x6CB PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x711 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD SWAP1 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7A8 JUMPI PUSH2 0x74F PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x793 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x75E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x772 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x786 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x255F JUMP JUMPDEST SWAP1 POP PUSH2 0x79F DUP5 DUP3 PUSH2 0x25FE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x740 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND CALLER EQ PUSH2 0x882 JUMPI PUSH2 0x84C DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1366 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x882 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4EDB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x8E7 PUSH2 0x3CE7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x924 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x160 DUP1 DUP7 ADD MLOAD PUSH2 0x140 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 ADD MLOAD SWAP1 DUP6 ADD MSTORE PUSH2 0x96F PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x978 DUP7 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH2 0x982 PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x98B DUP7 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x997 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP PUSH2 0x9A5 DUP9 DUP5 DUP4 DUP10 PUSH2 0x2692 JUMP JUMPDEST PUSH2 0x9B1 DUP8 DUP4 DUP4 DUP9 PUSH2 0x2692 JUMP JUMPDEST PUSH2 0x9BB DUP9 DUP9 PUSH2 0x2824 JUMP JUMPDEST PUSH2 0x9CF DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2884 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD SWAP2 SWAP6 POP PUSH2 0x9EA SWAP2 DUP11 SWAP2 DUP7 SWAP2 DUP2 SWAP1 PUSH2 0x2A0D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP2 ADD MLOAD SWAP1 MLOAD PUSH2 0xA06 SWAP2 DUP10 SWAP2 DUP6 SWAP2 SWAP1 DUP2 SWAP1 PUSH2 0x2A0D JUMP JUMPDEST PUSH2 0xA1F DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x243C JUMP JUMPDEST PUSH2 0xA38 DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x243C JUMP JUMPDEST PUSH2 0xA44 DUP9 DUP9 DUP4 DUP8 PUSH2 0x2B1D JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xA7F PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8C DUP6 DUP6 DUP6 PUSH2 0x2CF5 JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP2 DUP3 MLOAD PUSH1 0x20 DUP5 ADD ADDRESS GAS DELEGATECALL DUP1 ISZERO PUSH2 0xAC3 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP2 MLOAD SWAP1 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB8B JUMPI PUSH2 0xB83 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2ECA JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB60 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD SWAP1 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7A8 JUMPI PUSH2 0xC3B PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0xC7F DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8B DUP5 DUP3 PUSH2 0x25FE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC2C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xCD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH2 0xD04 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND CALLER EQ PUSH2 0xD2B JUMPI CALLER PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 DUP5 ADD SWAP1 DUP1 DUP3 GT PUSH2 0xDA2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x50F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x82AF639571738F4EBD4268FB0363D8957EBE1BBB9E78DBA5EBD69EED39B154F0 SWAP1 PUSH2 0xE0A SWAP1 DUP7 SWAP1 PUSH2 0x4B48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xE49 PUSH2 0x3CBF JUMP JUMPDEST DUP4 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xAC3 JUMPI PUSH2 0xE5D PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0xEA1 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE6C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA77 JUMP JUMPDEST SWAP1 POP PUSH2 0xEAD DUP5 DUP3 PUSH2 0x25FE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE4E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF21 PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xF94 DUP5 DUP5 DUP5 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFCC PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0xFD6 DUP4 DUP4 PUSH2 0x25FE JUMP JUMPDEST POP DUP2 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1029 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH2 0x105C PUSH2 0x2660 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP8 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0xA8656E308026EEABCE8F0BC18048433252318AB80AC79DA0B3D3D8697DFBA891 SWAP1 PUSH2 0x10F0 SWAP1 DUP7 SWAP1 PUSH2 0x4B3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x114D PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x118A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD PUSH1 0x60 SWAP2 DUP7 SWAP2 PUSH2 0x11C2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1264 JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x120E DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x1218 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x123C DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1227 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x786 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1248 DUP7 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP8 DUP7 PUSH1 0x20 ADD MLOAD LT PUSH2 0x125A JUMPI POP POP PUSH2 0x1264 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x11DA JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12DA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x12C7 PUSH2 0x3D15 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x12BF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 EQ PUSH2 0x1322 JUMPI PUSH2 0x1303 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1E3D JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x130F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x12E0 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH2 0x13A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x50B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13AD DUP4 PUSH2 0x300A JUMP JUMPDEST PUSH1 0xF8 SHR SWAP1 POP PUSH1 0x7 DUP2 LT PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4D91 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x13FD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1411 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1449 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5082 JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1457 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x14A6 JUMPI DUP8 MLOAD ISZERO PUSH2 0x1496 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5373 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 POP PUSH2 0x689 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x14B4 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x15CF JUMPI DUP8 MLOAD PUSH1 0x41 EQ PUSH2 0x14F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C21 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1502 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SWAP1 DUP2 SHR DUP2 SHL SWAP1 SHR SWAP4 POP PUSH2 0x1523 DUP9 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP3 POP PUSH2 0x1536 DUP9 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP11 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x155B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4BA8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x157D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP2 AND SWAP2 AND EQ SWAP8 POP PUSH2 0x689 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x15DD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16AA JUMPI DUP8 MLOAD PUSH1 0x41 EQ PUSH2 0x161E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C21 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x162B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SWAP1 DUP2 SHR DUP2 SHL SWAP1 SHR SWAP4 POP PUSH2 0x164C DUP9 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP3 POP PUSH2 0x165F DUP9 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1674 SWAP2 SWAP1 PUSH2 0x4760 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x155B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4BA8 JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x16B8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16D7 JUMPI PUSH2 0x16C9 DUP11 DUP11 DUP11 PUSH2 0x30D6 JUMP JUMPDEST SWAP7 POP PUSH2 0x689 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x16E5 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x175E JUMPI PUSH1 0x0 PUSH2 0x16F6 DUP10 PUSH2 0x322B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x1743 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x689 JUMP JUMPDEST PUSH2 0x174F DUP2 DUP13 DUP13 DUP13 PUSH2 0x32A2 JUMP JUMPDEST SWAP8 POP PUSH2 0x689 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x176C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x17B3 JUMPI POP POP POP PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 POP PUSH2 0x689 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4D91 JUMP JUMPDEST PUSH2 0x17ED PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x60 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17FC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x18DA JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1828 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x140 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x1848 DUP8 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1885 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x185B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1873 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP5 PUSH2 0x33FE JUMP JUMPDEST SWAP1 POP PUSH2 0x188F PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x18B3 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x189E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xE94 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x18BF DUP8 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x18CF JUMPI POP POP POP PUSH2 0x18DA JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1814 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x18EC PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1929 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xF94 DUP5 DUP5 DUP5 PUSH2 0x255F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x33FE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A07 PUSH2 0x1A02 DUP9 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3446 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x34CE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x1A53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4EA4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND CALLER EQ PUSH2 0x1B28 JUMPI PUSH2 0x1AB1 DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1366 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x533C JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 PUSH2 0x1B70 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x4731 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BAB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BB0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1BEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F49 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND CALLER EQ PUSH2 0x1C31 JUMPI PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1C8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5203 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1D0C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4331 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x1D8F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4CFD JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE MLOAD PUSH32 0xD2C6B762299C609BDB96520B58A49BFB80186934D4F71A86A367571A15C03194 SWAP1 PUSH2 0x1E30 SWAP1 DUP5 SWAP1 DUP7 SWAP1 PUSH2 0x4BC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x1E45 PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x1E4E DUP3 PUSH2 0x350B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x4 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1E80 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0xEFF JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1E90 JUMPI PUSH1 0x2 PUSH2 0x1E76 JUMP JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD DUP2 PUSH1 0x40 ADD MLOAD LT PUSH2 0x1EA6 JUMPI PUSH1 0x5 PUSH2 0x1E76 JUMP JUMPDEST DUP2 PUSH2 0x100 ADD MLOAD TIMESTAMP LT PUSH2 0x1EB9 JUMPI PUSH1 0x4 PUSH2 0x1E76 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1EDD JUMPI PUSH1 0x6 PUSH2 0x1E76 JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD GT ISZERO PUSH2 0x1F2A JUMPI PUSH1 0x6 PUSH2 0x1E76 JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1F70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1FA4 DUP2 PUSH2 0x2ECA JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 DUP5 DUP7 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x208F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2064 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x208F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2072 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x209F PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x60 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x20AE JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x18DA JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x20FA DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x2104 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x2128 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2113 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE94 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x2134 DUP7 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP8 DUP7 PUSH1 0x20 ADD MLOAD LT PUSH2 0x2146 JUMPI POP POP PUSH2 0x18DA JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x20C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x3596 JUMP JUMPDEST PUSH2 0x2172 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x689 DUP4 DUP4 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x218A PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x21C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD PUSH1 0x60 SWAP2 DUP7 SWAP2 PUSH2 0x21FF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1264 JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x222B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x140 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x224B DUP8 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x225E DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x185B JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x2268 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x228C DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2277 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x786 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x2298 DUP8 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x22A8 JUMPI POP POP POP PUSH2 0x1264 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2217 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5203 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x237D JUMPI PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x332E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x23F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x23FF JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x240C JUMPI POP PUSH1 0x0 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x2416 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x2425 DUP6 DUP5 PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2431 PUSH2 0x3E8 DUP4 PUSH2 0x3674 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x244A DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBCC4C97732E47D9946F229EDB95F5B6323F601300E4690DE719993F3C371129 DUP8 CALLER DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP15 PUSH2 0x140 ADD MLOAD DUP16 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x24EF SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4A7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x686 PUSH2 0x2559 PUSH2 0x2549 DUP7 DUP6 PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2554 DUP7 PUSH1 0x1 PUSH2 0x2FC8 JUMP JUMPDEST PUSH2 0x36C8 JUMP JUMPDEST DUP5 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2567 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x256F PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x2578 DUP6 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2584 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP PUSH2 0x2592 DUP7 DUP4 DUP4 DUP8 PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25A6 DUP8 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x25B4 DUP8 DUP4 PUSH2 0x371C JUMP JUMPDEST SWAP1 POP PUSH2 0x25C7 DUP9 DUP6 DUP10 DUP5 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0x2A0D JUMP JUMPDEST PUSH2 0x25D1 DUP9 DUP3 PUSH2 0x3613 JUMP JUMPDEST SWAP5 POP PUSH2 0x25E8 DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x243C JUMP JUMPDEST PUSH2 0x25F3 DUP9 DUP5 DUP8 PUSH2 0x372B JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x260C SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2622 SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x263B SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2654 SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP2 ISZERO PUSH2 0x2689 JUMPI DUP2 PUSH2 0x268B JUMP JUMPDEST CALLER JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x26D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5297 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x2743 JUMPI PUSH1 0x60 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2743 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x52CE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x27CC JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x27CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C58 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x281E JUMPI PUSH2 0x27E8 DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x281E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DFF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2836 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2848 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x3674 JUMP JUMPDEST LT ISZERO PUSH2 0x2880 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5305 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x288C PUSH2 0x3CE7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x289C DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28B3 DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x3519 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28C5 DUP8 PUSH1 0xA0 ADD MLOAD DUP7 PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28DC DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x3519 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 LT PUSH2 0x291F JUMPI PUSH1 0x20 DUP1 DUP7 ADD DUP1 MLOAD DUP4 SWAP1 MSTORE DUP1 MLOAD DUP3 ADD DUP5 SWAP1 MSTORE MLOAD MLOAD DUP7 MLOAD DUP3 ADD MSTORE PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xA0 DUP12 ADD MLOAD DUP8 MLOAD SWAP1 SWAP3 ADD MLOAD PUSH2 0x2917 SWAP3 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 MLOAD MSTORE PUSH2 0x295C JUMP JUMPDEST DUP5 MLOAD DUP4 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x20 SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 MLOAD DUP2 ADD MLOAD SWAP1 DUP7 ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH1 0x80 DUP11 ADD MLOAD SWAP2 MLOAD MLOAD PUSH2 0x2953 SWAP3 SWAP1 PUSH2 0x3596 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MSTORE JUMPDEST DUP5 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MLOAD PUSH2 0x2971 SWAP2 SWAP1 PUSH2 0x2FC8 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE DUP5 MLOAD MLOAD PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD PUSH2 0x298E SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x40 ADD MSTORE DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0xA0 DUP11 ADD MLOAD PUSH1 0xE0 DUP12 ADD MLOAD PUSH2 0x29AF SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x20 DUP6 ADD MLOAD MLOAD PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xC0 DUP11 ADD MLOAD PUSH2 0x29D0 SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x29F8 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x60 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x2A44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4FB7 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x2A7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F80 JUMP JUMPDEST DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x2A91 DUP6 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x36C8 JUMP JUMPDEST GT ISZERO PUSH2 0x2AC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C8F JUMP JUMPDEST PUSH2 0x2AD7 DUP6 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2AE5 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x3674 JUMP JUMPDEST GT ISZERO PUSH2 0x69D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5195 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 DUP8 DUP10 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2BC6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B9B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2BC6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BA9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2BEE DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x140 DUP5 ADD MLOAD DUP5 MLOAD DUP7 MLOAD DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2C0A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x2C23 DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x2C3F DUP2 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x2C5B DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2CC5 JUMPI PUSH2 0x2CC0 DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x2CBB DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x36C8 JUMP JUMPDEST PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x69D JUMP JUMPDEST PUSH2 0x2CDD DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x69D DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD DUP2 DUP2 MSTORE DUP8 MLOAD PUSH1 0x84 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 DUP5 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP5 DUP9 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 DUP8 ADD MLOAD PUSH1 0xE4 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x104 DUP5 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x164 DUP5 ADD MSTORE PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x184 DUP5 ADD MSTORE PUSH2 0x120 DUP8 ADD MLOAD PUSH2 0x1A4 DUP5 ADD MSTORE PUSH2 0x140 DUP8 ADD DUP1 MLOAD PUSH2 0x1C4 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH2 0x1E4 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x204 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP5 PUSH2 0x224 DUP7 ADD SWAP5 SWAP3 SWAP4 PUSH1 0x44 DUP8 ADD SWAP4 SWAP2 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2DFA JUMPI DUP4 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2DDC JUMP JUMPDEST POP POP POP POP DUP1 DUP5 SUB PUSH2 0x160 SWAP2 DUP3 ADD MSTORE DUP8 ADD MLOAD DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x0 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP5 LT ISZERO PUSH2 0x2E46 JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH2 0x2E23 JUMP JUMPDEST POP POP POP DUP7 DUP3 MSTORE SWAP2 DUP4 SUB PUSH1 0x20 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE DUP6 MLOAD DUP1 DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x0 SWAP4 SWAP2 SWAP3 DUP8 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP7 LT ISZERO PUSH2 0x2E93 JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP7 ADD SWAP6 POP PUSH2 0x2E70 JUMP JUMPDEST POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP6 SUB ADD DUP6 MSTORE POP POP POP PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2ED2 PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x2EDB DUP3 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH2 0x2EE7 DUP3 DUP3 PUSH2 0x39DA JUMP JUMPDEST PUSH2 0x2880 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3B05 JUMP JUMPDEST PUSH2 0x2EFD PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x2F08 DUP5 DUP5 DUP5 PUSH2 0x255F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x20 ADD MLOAD EQ PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x515E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2F82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x2F8D JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x2F9A JUMPI POP PUSH1 0x0 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x2FA4 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP DUP4 PUSH2 0x2FB4 DUP6 DUP4 PUSH2 0x2FC8 JUMP JUMPDEST DUP2 PUSH2 0x2FBB JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH2 0x2425 DUP6 DUP5 PUSH2 0x3674 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3004 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4CC6 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH2 0x3046 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5025 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3056 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 SWAP1 DUP2 SHR SWAP1 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x30CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4D34 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x3111 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x4B8F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP9 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x31AE JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x321F JUMPI PUSH2 0x25F3 JUMP JUMPDEST PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xC57414C4C45545F4552524F5200000000000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH2 0x3269 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x523A JUMP JUMPDEST PUSH2 0x3277 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x3BAC JUMP JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x32DF SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4B51 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP11 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x337C JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x33ED JUMPI PUSH2 0x33F2 JUMP JUMPDEST PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF56414C494441544F525F4552524F5200000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP3 MLOAD SWAP5 POP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3439 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x686 PUSH2 0x2559 DUP6 DUP5 PUSH2 0x3674 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3458 SWAP1 PUSH2 0x4791 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP7 MLOAD DUP8 DUP4 ADD KECCAK256 SWAP1 DUP5 MSTORE SWAP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 KECCAK256 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD9 PUSH2 0x1A02 DUP4 PUSH2 0x3C0B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3554 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x355F DUP5 DUP5 DUP5 PUSH2 0x23B9 JUMP JUMPDEST ISZERO PUSH2 0x3439 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F12 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x35D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x35DC DUP5 DUP5 DUP5 PUSH2 0x2F47 JUMP JUMPDEST ISZERO PUSH2 0x2539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F12 JUMP JUMPDEST PUSH2 0x361B PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x3637 SWAP2 DUP5 SWAP2 PUSH2 0x3519 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x364F SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0x3669 SWAP2 DUP5 SWAP2 PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3683 JUMPI POP PUSH1 0x0 PUSH2 0xFD9 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3690 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4E6D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4E6D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 PUSH2 0x3713 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xFD6 JUMPI DUP2 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 DUP8 DUP10 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x37D4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x37A9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x37D4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37B7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x37F4 DUP5 PUSH2 0x140 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP6 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x380D DUP5 PUSH2 0x160 ADD MLOAD DUP5 DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x3825 DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x281E DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3871 JUMPI POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x281E JUMPI PUSH1 0x3 DUP5 MLOAD GT PUSH2 0x38B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5127 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x3936 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4FEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x80 PUSH1 0x4 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE DUP7 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 DUP1 DUP4 ADD SWAP2 PUSH1 0x3F ADD PUSH7 0xFFFFFFFFFFFE0 AND DUP4 ADD ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x39C1 JUMPI DUP9 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x39A6 JUMP JUMPDEST PUSH2 0x200 DUP4 DUP5 DUP4 SUB DUP6 PUSH1 0x0 DUP9 GAS CALL SWAP2 POP POP DUP1 PUSH2 0x1C31 JUMPI RETURNDATASIZE DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x3A18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5297 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x3A8B JUMPI PUSH1 0x60 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3A8B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x52CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A95 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3B00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4E36 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xDC47B3613D9FE400085F6DBDC99453462279057E6207385042827ED6B1A62CF7 SWAP3 PUSH2 0x3BA0 SWAP3 CALLER SWAP3 SWAP1 PUSH2 0x4A30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x3BEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x523A JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C1D SWAP1 PUSH2 0x4852 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C4A SWAP2 SWAP1 PUSH2 0x4744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x0 DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C69 SWAP2 SWAP1 PUSH2 0x4744 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 ADD DUP1 MLOAD PUSH2 0x140 DUP9 ADD DUP1 MLOAD PUSH2 0x160 SWAP1 SWAP10 ADD DUP1 MLOAD SWAP8 DUP5 MSTORE SWAP6 DUP2 MSTORE SWAP3 DUP6 MSTORE PUSH2 0x1A0 DUP3 KECCAK256 SWAP2 MSTORE SWAP6 SWAP1 MSTORE POP MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3CFB PUSH2 0x3CBF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3D08 PUSH2 0x3CBF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3D69 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3D7C PUSH2 0x3D77 DUP3 PUSH2 0x5425 JUMP JUMPDEST PUSH2 0x53FE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DB9 JUMPI PUSH2 0x3DA4 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x3E67 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3D8C JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DD3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DE1 PUSH2 0x3D77 DUP3 PUSH2 0x5425 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DB9 JUMPI PUSH2 0x3E09 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x3F33 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3DF1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3E30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E77 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E8D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3EBE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x53FE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3ED5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EFF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3F09 PUSH1 0x80 PUSH2 0x53FE JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F46 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3F4F DUP2 PUSH2 0x53FE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F5C DUP4 DUP4 PUSH2 0x3D35 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x3F6B DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3F7D DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3F8F DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FFD DUP7 DUP4 DUP8 ADD PUSH2 0x3E67 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4026 DUP6 DUP3 DUP7 ADD PUSH2 0x3E67 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4044 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x689 DUP4 DUP4 PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4061 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x406B DUP5 DUP5 PUSH2 0x3D35 JUMP JUMPDEST SWAP2 POP PUSH2 0x407A DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40A0 DUP5 DUP5 PUSH2 0x3D35 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x40B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40F5 DUP5 DUP3 DUP6 ADD PUSH2 0x3DC3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4111 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4128 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4134 DUP8 DUP4 DUP9 ADD PUSH2 0x3DC3 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x414A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x415B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x416B PUSH2 0x3D77 DUP4 PUSH2 0x5425 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP7 DUP6 MUL DUP5 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x4187 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x41A9 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x418B JUMP JUMPDEST POP SWAP7 POP POP POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x41C2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x41CF DUP7 DUP3 DUP8 ADD PUSH2 0x3D59 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x41ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4204 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4210 DUP8 DUP4 DUP9 ADD PUSH2 0x3DC3 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x41C2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x423E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x40B5 DUP2 PUSH2 0x5472 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x4291 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x42AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x42B9 DUP8 DUP3 DUP9 ADD PUSH2 0x3E1E JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x42DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x42EC DUP2 PUSH2 0x5472 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41CF DUP7 DUP3 DUP8 ADD PUSH2 0x3E67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x689 DUP2 PUSH2 0x5494 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x689 DUP2 PUSH2 0x5494 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x436C DUP5 DUP5 PUSH2 0x3EEE JUMP JUMPDEST SWAP2 POP PUSH2 0x407A DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x3EEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x438D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x43A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40F5 DUP5 DUP3 DUP6 ADD PUSH2 0x3F33 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x43C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x43E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43EC DUP9 DUP3 DUP10 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP6 POP POP PUSH2 0x43FC DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH2 0x4419 DUP8 PUSH1 0x80 DUP9 ADD PUSH2 0x3EEE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x443A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4451 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x445D DUP9 DUP4 DUP10 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4472 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x447E DUP9 DUP4 DUP10 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4493 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x449F DUP9 DUP4 DUP10 ADD PUSH2 0x3E67 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x44B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44C2 DUP8 DUP3 DUP9 ADD PUSH2 0x3E67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4504 DUP6 DUP3 DUP7 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4527 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x453E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x454A DUP8 DUP4 DUP9 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4566 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x41CF DUP7 DUP3 DUP8 ADD PUSH2 0x3E67 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x458C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH2 0x459D DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x45BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x45C6 DUP11 DUP4 DUP12 ADD PUSH2 0x3E1E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x45DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45EC DUP10 DUP3 DUP11 ADD PUSH2 0x3E1E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4642 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 DUP2 MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST PUSH32 0x62797465732074616B6572417373657444617461000000000000000000000000 DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4756 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x5446 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST PUSH32 0x5A65726F45785472616E73616374696F6E280000000000000000000000000000 DUP2 MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0x12 DUP3 ADD MSTORE PUSH32 0x61646472657373207369676E6572416464726573732C00000000000000000000 PUSH1 0x1F DUP3 ADD MSTORE PUSH32 0x6279746573206461746100000000000000000000000000000000000000000000 PUSH1 0x35 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x3F DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x6 DUP4 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x1B DUP4 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x30 DUP4 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x4C DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x62 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x7B DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0x94 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xA5 DUP4 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xB6 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xD4 DUP4 ADD MSTORE PUSH2 0xFD9 PUSH2 0x4A0A PUSH2 0x4A05 PUSH1 0xE1 DUP6 ADD PUSH2 0x4674 JUMP JUMPDEST PUSH2 0x469D JUMP JUMPDEST PUSH2 0x46C6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4A5F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x462A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4A71 DUP2 DUP6 PUSH2 0x462A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE DUP1 DUP12 AND PUSH1 0x20 DUP6 ADD MSTORE POP DUP9 PUSH1 0x40 DUP5 ADD MSTORE DUP8 PUSH1 0x60 DUP5 ADD MSTORE DUP7 PUSH1 0x80 DUP5 ADD MSTORE DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x4ACD DUP2 DUP5 ADD DUP7 PUSH2 0x462A JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x4ADF DUP2 DUP7 PUSH2 0x462A JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4B32 JUMPI PUSH2 0x4B1C DUP4 DUP6 MLOAD PUSH2 0x4715 JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x60 SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4B09 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4B86 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x462A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x686 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x462A JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x689 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x462A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F36355F52455155495245440000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F524445525F4F56455246494C4C000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x41535345545F50524F58595F414C52454144595F455849535453000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x54414B45525F4F56455250415900000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x41535345545F50524F58595F444F45535F4E4F545F4558495354000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4E45575F4F524445525F45504F4348000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F335F52455155495245440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F46494C4C5F50524943450000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F305F5245515549524544000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xFD9 DUP3 DUP5 PUSH2 0x46EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x53CC DUP3 DUP5 MLOAD PUSH2 0x46EF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x53DE PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x46EF JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x100 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xFD9 DUP3 DUP5 PUSH2 0x4715 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x541D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x543C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5461 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5449 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x281E JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x237D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x237D JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xef 0x5f 0xf8 PUSH3 0x95EC45 0x28 PUSH16 0x9F52D461489D3E10EB0581BB148D6BBB EXTCODECOPY 0xd1 0x47 SWAP12 0xe1 GT SWAP10 PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
                "sourceMap": "706:5376:29:-;;;689:5:43;667:27;;-1:-1:-1;;667:27:43;;;759:57:29;5:2:-1;;;;30:1;27;20:12;5:2;-1:-1;1257:316:4;;;;;;;;;;-1:-1:-1;1257:316:4;;;;;;;1919:29:35;;:14;;:29;:::i;:::-;;1850:105;1045:148:36;;;;;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1045:148:36;;;1035:159;;49:4:-1;1035:159:36;;;;1511:18;;;;;;;;;;;;;;;;1561:21;;;;;;;;;;;;;;;1416:214;;;;1035:159;1495:36;;1545:39;;1614:4;;1416:214;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1416:214:36;;;1406:225;;49:4:-1;1406:225:36;;;;1385:18;:246;-1:-1:-1;173:5:42;:18;;-1:-1:-1;;;;;;173:18:42;181:10;173:18;;;706:5376:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;706:5376:29;;;-1:-1:-1;706:5376:29;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;2366:661:-1:-;94:58;;;2666:2;2657:12;;94:58;;;;2768:12;;;94:58;2879:12;;;94:58;2990:12;;;2557:470;3034:1440;2095:66;2075:87;;461:66;2059:2;2181:12;;441:87;1686:66;547:12;;;1666:87;870:66;1772:12;;;850:87;1278:66;956:12;;;1258:87;1364:11;;;3618:856;;706:5376:29;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106102f45760003560e01c80637e9d74dc11610191578063d9bfa73e116100e3578063e0b701e311610097578063eea086ba11610071578063eea086ba14610656578063f2fde38b1461065e578063ffa1ad7414610671576102f4565b8063e0b701e314610628578063e306f7791461063b578063e5fa431b14610643576102f4565b8063dd1c7d18116100c8578063dd1c7d18146105ef578063de30200d14610602578063e0acd33d14610615576102f4565b8063d9bfa73e146105c7578063db123b1a146105da576102f4565b8063b4be83d511610145578063c585bb931161011f578063c585bb9314610581578063c75e0a8114610594578063d46b02c3146105b4576102f4565b8063b4be83d514610548578063be7ada1e1461055b578063bfc8bfce1461056e576102f4565b80638da5cb5b116101765780638da5cb5b1461051a5780639363470214610522578063a3e2038014610535576102f4565b80637e9d74dc146104e757806382c174d014610507576102f4565b80634d0ae5461161024a57806364a3bc15116101fe57806377fcce68116101d857806377fcce68146104ae5780637b8e3514146104c15780637e1d9808146104d4576102f4565b806364a3bc151461047557806366758d7b14610488578063679d2f9a1461049b576102f4565b806350dde1901161022f57806350dde1901461043c578063607041081461044f578063642f2eaf14610462576102f4565b80634d0ae546146104165780634f9559b114610429576102f4565b80632ac12622116102ac5780633e228bae116102865780633e228bae146103d05780633fd3c997146103e35780634ac1478214610403576102f4565b80632ac126221461038a5780633683ef8e1461039d5780633c28d861146103b0576102f4565b806320777f70116102dd57806320777f7014610337578063288cdc9114610357578063297bb70b1461036a576102f4565b80631be23901146102f95780631ea1e3d814610322575b600080fd5b61030c6103073660046145fe565b610679565b6040516103199190614b3d565b60405180910390f35b6103356103303660046143b0565b610690565b005b61034a6103453660046145fe565b6106a4565b6040516103199190614b48565b61034a61036536600461422c565b6106b1565b61037d6103783660046140fd565b6106c3565b60405161031991906153aa565b61030c61039836600461422c565b6107d9565b6103356103ab36600461426a565b6107ee565b6103c36103be366004614425565b6108df565b60405161031991906153b8565b61037d6103de366004614513565b610a77565b6103f66103f1366004614314565b610acc565b6040516103199190614a0f565b6103356104113660046140c0565b610af4565b61037d6104243660046140fd565b610bb8565b61033561043736600461422c565b610c94565b61037d61044a3660046140fd565b610e41565b6103f661045d366004614314565b610eb6565b61030c61047036600461422c565b610f04565b61037d610483366004614513565b610f19565b61037d61049636600461434e565b610fc4565b61030c6104a93660046145fe565b610fdf565b6103356104bc366004614083565b610fec565b61030c6104cf36600461404e565b611125565b61037d6104e23660046141d9565b611145565b6104fa6104f53660046140c0565b611296565b6040516103199190614aef565b61030c610515366004614245565b61132a565b6103f661134a565b61030c6105303660046142c5565b611366565b61037d6105433660046141d9565b6117e5565b61037d610556366004614513565b6118e4565b61034a6105693660046145fe565b61195f565b61033561057c366004614573565b61196c565b61033561058f366004614032565b611c3b565b6105a76105a236600461437b565b611e3d565b60405161031991906153f0565b6103356105c236600461437b565b611f33565b61034a6105d536600461404e565b611fcf565b6105e2611fec565b6040516103199190614c0e565b61037d6105fd3660046141d9565b612097565b61034a6106103660046145fe565b612150565b61034a6106233660046145fe565b61215d565b61037d6106363660046144ce565b61216a565b61034a61217c565b61037d6106513660046141d9565b612182565b6103f66122b3565b61033561066c366004614032565b6122cf565b6105e2612380565b60006106868484846123b9565b90505b9392505050565b61069d858585858561243c565b5050505050565b60006106868484846124fe565b60046020526000908152604090205481565b6106cb613cbf565b60005460ff1615610711576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781558451905b8181146107a85761074f613cbf565b61079387838151811061075e57fe5b602002602001015187848151811061077257fe5b602002602001015187858151811061078657fe5b602002602001015161255f565b905061079f84826125fe565b50600101610740565b5050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690559392505050565b60056020526000908152604090205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff831633146108825761084c848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061136692505050565b610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614edb565b5050600091825260076020908152604080842073ffffffffffffffffffffffffffffffffffffffff9093168452919052902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6108e7613ce7565b60005460ff1615610924576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561016080860151610140808701919091528601519085015261096f613d15565b61097886611e3d565b9050610982613d15565b61098b86611e3d565b90506000610997612660565b90506109a588848389612692565b6109b187838388612692565b6109bb8888612824565b6109cf888885604001518560400151612884565b8051602081015190519195506109ea918a9186918190612a0d565b602080850151908101519051610a069189918591908190612a0d565b610a1f888285602001518660400151886000015161243c565b610a38878284602001518560400151886020015161243c565b610a4488888387612b1d565b505050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055949350505050565b610a7f613cbf565b6060610a8c858585612cf5565b9050608081825160208401305af48015610ac357815183526020820151602084015260408201516040840152606082015160608401525b50509392505050565b600b6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60005460ff1615610b31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781558151905b818114610b8b57610b83838281518110610b7657fe5b6020026020010151612eca565b600101610b60565b5050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905550565b610bc0613cbf565b60005460ff1615610bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781558451905b8181146107a857610c3b613cbf565b610c7f878381518110610c4a57fe5b6020026020010151878481518110610c5e57fe5b6020026020010151878581518110610c7257fe5b6020026020010151612ef5565b9050610c8b84826125fe565b50600101610c2c565b60005460ff1615610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001178155610d04612660565b9050600073ffffffffffffffffffffffffffffffffffffffff82163314610d2b5733610d2e565b60005b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600660209081526040808320938516835292905220549091506001840190808211610da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906150f0565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526006602090815260408083209488168084529490915290819020859055517f82af639571738f4ebd4268fb0363d8957ebe1bbb9e78dba5ebd69eed39b154f090610e0a908690614b48565b60405180910390a35050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050565b610e49613cbf565b835160005b818114610ac357610e5d613cbf565b610ea1878381518110610e6c57fe5b6020026020010151878481518110610e8057fe5b6020026020010151878581518110610e9457fe5b6020026020010151610a77565b9050610ead84826125fe565b50600101610e4e565b7fffffffff0000000000000000000000000000000000000000000000000000000081166000908152600b602052604090205473ffffffffffffffffffffffffffffffffffffffff165b919050565b60096020526000908152604090205460ff1681565b610f21613cbf565b60005460ff1615610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f94848484612ef5565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055949350505050565b610fcc613cbf565b610fd683836125fe565b50815b92915050565b6000610686848484612f47565b60005460ff1615611029576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117815561105c612660565b73ffffffffffffffffffffffffffffffffffffffff8181166000818152600860209081526040808320948916808452949091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168715151790555192935090917fa8656e308026eeabce8f0bc18048433252318ab80ac79da0b3d3d8697dfba891906110f0908690614b3d565b60405180910390a35050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905550565b600860209081526000928352604080842090915290825290205460ff1681565b61114d613cbf565b60005460ff161561118a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001178155845160609186916111c257fe5b60209081029190910101516101600151855190915060005b81811461126457828782815181106111ee57fe5b60200260200101516101600181905250600061120e878660200151612fc8565b9050611218613cbf565b61123c89848151811061122757fe5b60200260200101518389868151811061078657fe5b905061124886826125fe565b8786602001511061125a575050611264565b50506001016111da565b505050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690559392505050565b60606000825190506060816040519080825280602002602001820160405280156112da57816020015b6112c7613d15565b8152602001906001900390816112bf5790505b50905060005b828114611322576113038582815181106112f657fe5b6020026020010151611e3d565b82828151811061130f57fe5b60209081029190910101526001016112e0565b509392505050565b600760209081526000928352604080842090915290825290205460ff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6000808251116113a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906150b9565b60006113ad8361300a565b60f81c9050600781106113ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614d91565b60008160ff1660078111156113fd57fe5b905060008080808085600781111561141157fe5b1415611449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615082565b600185600781111561145757fe5b14156114a657875115611496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615373565b5060009550610689945050505050565b60028560078111156114b457fe5b14156115cf5787516041146114f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614c21565b8760008151811061150257fe5b016020015160f890811c811b901c935061152388600163ffffffff61308d16565b925061153688602163ffffffff61308d16565b915060018a8585856040516000815260200160405260405161155b9493929190614ba8565b6020604051602081039080840390855afa15801561157d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff8b811691161497506106899650505050505050565b60038560078111156115dd57fe5b14156116aa57875160411461161e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614c21565b8760008151811061162b57fe5b016020015160f890811c811b901c935061164c88600163ffffffff61308d16565b925061165f88602163ffffffff61308d16565b915060018a6040516020016116749190614760565b604051602081830303815290604052805190602001208585856040516000815260200160405260405161155b9493929190614ba8565b60048560078111156116b857fe5b14156116d7576116c98a8a8a6130d6565b965061068995505050505050565b60058560078111156116e557fe5b141561175e5760006116f68961322b565b73ffffffffffffffffffffffffffffffffffffffff808c1660009081526008602090815260408083209385168352929052205490915060ff16611743576000975050505050505050610689565b61174f818c8c8c6132a2565b97506106899650505050505050565b600685600781111561176c57fe5b14156117b357505050600087815260076020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a16845290915290205460ff16935061068992505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614d91565b6117ed613cbf565b6060846000815181106117fc57fe5b60209081029190910101516101400151855190915060005b8181146118da578287828151811061182857fe5b602002602001015161014001819052506000611848878660000151612fc8565b9050600061188589848151811061185b57fe5b602002602001015160a001518a858151811061187357fe5b602002602001015160800151846133fe565b905061188f613cbf565b6118b38a858151811061189e57fe5b6020026020010151838a8781518110610e9457fe5b90506118bf87826125fe565b865189116118cf575050506118da565b505050600101611814565b5050509392505050565b6118ec613cbf565b60005460ff1615611929576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f9484848461255f565b60006106868484846133fe565b600a5473ffffffffffffffffffffffffffffffffffffffff16156119bc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b6000611a07611a02888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061344692505050565b6134ce565b60008181526009602052604090205490915060ff1615611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614ea4565b73ffffffffffffffffffffffffffffffffffffffff86163314611b2857611ab1818785858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061136692505050565b611ae7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061533c565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790555b60008181526009602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055513090611b709088908890614731565b600060405180830381855af49150503d8060008114611bab576040519150601f19603f3d011682016040523d82523d6000602084013e611bb0565b606091505b5050905080611beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614f49565b73ffffffffffffffffffffffffffffffffffffffff87163314611c3157600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b5050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314611c8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615203565b60008173ffffffffffffffffffffffffffffffffffffffff1663ae25532e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd457600080fd5b505afa158015611ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d0c9190810190614331565b7fffffffff0000000000000000000000000000000000000000000000000000000081166000908152600b602052604090205490915073ffffffffffffffffffffffffffffffffffffffff168015611d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614cfd565b7fffffffff0000000000000000000000000000000000000000000000000000000082166000908152600b60205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055517fd2c6b762299c609bdb96520b58a49bfb80186934d4f71a86a367571a15c0319490611e309084908690614bc6565b60405180910390a1505050565b611e45613d15565b611e4e8261350b565b602080830182905260009182526004905260409081902054908201526080820151611e805760015b60ff168152610eff565b60a0820151611e90576002611e76565b8160a00151816040015110611ea6576005611e76565b8161010001514210611eb9576004611e76565b60208082015160009081526005909152604090205460ff1615611edd576006611e76565b610120820151825173ffffffffffffffffffffffffffffffffffffffff90811660009081526006602090815260408083206060880151909416835292905220541115611f2a576006611e76565b60038152919050565b60005460ff1615611f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611fa481612eca565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600660209081526000928352604080842090915290825290205481565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152929183018282801561208f5780601f106120645761010080835404028352916020019161208f565b820191906000526020600020905b81548152906001019060200180831161207257829003601f168201915b505050505081565b61209f613cbf565b6060846000815181106120ae57fe5b60209081029190910101516101600151855190915060005b8181146118da57828782815181106120da57fe5b6020026020010151610160018190525060006120fa878660200151612fc8565b9050612104613cbf565b61212889848151811061211357fe5b602002602001015183898681518110610e9457fe5b905061213486826125fe565b878660200151106121465750506118da565b50506001016120c6565b6000610686848484613519565b6000610686848484613596565b612172613cbf565b6106898383613613565b60025481565b61218a613cbf565b60005460ff16156121c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906151cc565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001178155845160609186916121ff57fe5b60209081029190910101516101400151855190915060005b818114611264578287828151811061222b57fe5b60200260200101516101400181905250600061224b878660000151612fc8565b9050600061225e89848151811061185b57fe5b9050612268613cbf565b61228c8a858151811061227757fe5b6020026020010151838a878151811061078657fe5b905061229887826125fe565b865189116122a857505050611264565b505050600101612217565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff163314612320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615203565b73ffffffffffffffffffffffffffffffffffffffff81161561237d57600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555b50565b6040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525081565b60008083116123f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dc8565b8115806123ff575083155b1561240c57506000610689565b6000838061241657fe5b85840990506124258584613674565b6124316103e883613674565b101595945050505050565b61244a8282602001516136c8565b600460008581526020019081526020016000208190555082856040015173ffffffffffffffffffffffffffffffffffffffff16866000015173ffffffffffffffffffffffffffffffffffffffff167f0bcc4c97732e47d9946f229edb95f5b6323f601300e4690de719993f3c371129873386600001518760200151886040015189606001518e61014001518f61016001516040516124ef989796959493929190614a7b565b60405180910390a45050505050565b6000808311612539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dc8565b6106866125596125498685613674565b612554866001612fc8565b6136c8565b84613707565b612567613cbf565b61256f613d15565b61257885611e3d565b90506000612584612660565b905061259286838387612692565b60006125a68760a001518460400151612fc8565b905060006125b4878361371c565b90506125c7888589848960000151612a0d565b6125d18882613613565b94506125e88884866020015187604001518961243c565b6125f388848761372b565b505050509392505050565b8151815161260c91906136c8565b82526020808301519082015161262291906136c8565b60208301526040808301519082015161263b91906136c8565b60408301526060808301519082015161265491906136c8565b60609092019190915250565b600a5460009073ffffffffffffffffffffffffffffffffffffffff16818115612689578161268b565b335b9250505090565b825160ff166003146126d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615297565b606084015173ffffffffffffffffffffffffffffffffffffffff161561274357606084015173ffffffffffffffffffffffffffffffffffffffff163314612743576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906152ce565b602084015173ffffffffffffffffffffffffffffffffffffffff16156127cc578173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16146127cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614c58565b604083015161281e576127e88360200151856000015183611366565b61281e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dff565b50505050565b6128368260a001518260a00151613674565b61284883608001518360800151613674565b1015612880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615305565b5050565b61288c613ce7565b600061289c8660a0015185612fc8565b905060006128b387608001518860a0015184613519565b905060006128c58760a0015186612fc8565b905060006128dc88608001518960a0015184613519565b905080841061291f5760208086018051839052805182018490525151865182015260808a015160a08b01518751909201516129179290613519565b85515261295c565b845183905284516020908101859052855181015190860180519190915260a089015160808a01519151516129539290613596565b60208087015101525b84515160208087015101516129719190612fc8565b604086015284515160808a015160c08b015161298e929190613519565b85516040015284516020015160a08a015160e08b01516129af929190613519565b855160600152602085015151608089015160c08a01516129d0929190613519565b856020015160400181815250506129f88560200151602001518960a001518a60e00151613519565b60208601516060015250505050949350505050565b82612a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614fb7565b82821115612a7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614f80565b8460a00151612a918560400151846136c8565b1115612ac9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614c8f565b612ad7856080015183613674565b612ae5828760a00151613674565b111561069d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615195565b60018054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015612bc65780601f10612b9b57610100808354040283529160200191612bc6565b820191906000526020600020905b815481529060010190602001808311612ba957829003601f168201915b50505050509050612bee85610140015186600001518660000151856020015160200151613835565b61014084015184518651845160200151612c0a93929190613835565b612c238561014001518660000151858560400151613835565b612c3f8186600001518760400151856000015160400151613835565b612c5b8185600001518660400151856020015160400151613835565b836040015173ffffffffffffffffffffffffffffffffffffffff16856040015173ffffffffffffffffffffffffffffffffffffffff161415612cc557612cc081848760400151612cbb8660000151606001518760200151606001516136c8565b613835565b61069d565b612cdd81848760400151856000015160600151613835565b61069d81848660400151856020015160600151613835565b604080517fb4be83d5000000000000000000000000000000000000000000000000000000006020808301919091526060602483018181528751608485019081528884015160a48601529488015160c48501529087015160e4840152608087015161010484015260a087015161012484015260c087015161014484015260e08701516101648401526101008701516101848401526101208701516101a4840152610140870180516101c485019081526101608901516101e486015261018090525180516102048501819052939461022486019492936044870193919281019190601f82010460005b81811015612dfa578351885260209788019790930192600101612ddc565b5050505080840361016091820152870151805180855260209485019460009281019190601f8201045b80841015612e465782518752602087019650602083019250600184019350612e23565b505050868252918303602091820190815285518085529382019360009391928781019190601f8201045b80861015612e935782518752602087019650602083019250600186019550612e70565b5050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08585030185525050506040529392505050565b612ed2613d15565b612edb82611e3d565b9050612ee782826139da565b612880828260200151613b05565b612efd613cbf565b612f0884848461255f565b905082816020015114610689576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061515e565b6000808311612f82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dc8565b811580612f8d575083155b15612f9a57506000610689565b60008380612fa457fe5b858409905083612fb48583612fc8565b81612fbb57fe5b0690506124258584613674565b600082821115613004576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614cc6565b50900390565b600080825111613046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615025565b8160018351038151811061305657fe5b016020015182517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019092525060f890811c901b90565b600081602001835110156130cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614d34565b50016020015190565b6040516000906060907f1626ba7e00000000000000000000000000000000000000000000000000000000906131119087908690602401614b8f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093178352815191935090829081885afa8080156131ae576001811461321f576125f3565b7f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0c57414c4c45545f4552524f5200000000000000000000000000000000604052600060605260646000fd5b50505195945050505050565b6000601482511015613269576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061523a565b613277826014845103613bac565b82517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec019092525090565b6040516000906060907f9363470200000000000000000000000000000000000000000000000000000000906132df90879087908790602401614b51565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931783528151919350908290818a5afa80801561337c57600181146133ed576133f2565b7f08c379a0000000000000000000000000000000000000000000000000000000006000527c20000000000000000000000000000000000000000000000000000000006020527c0f56414c494441544f525f4552524f5200000000000000000000000000604052600060605260646000fd5b825194505b50505050949350505050565b6000808311613439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dc8565b6106866125598584613674565b60008060405160200161345890614791565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012086518783012090845290830188905273ffffffffffffffffffffffffffffffffffffffff8716918301919091526060820152608090209150509392505050565b600280546040517f190100000000000000000000000000000000000000000000000000000000000081529182015260228101919091526042902090565b6000610fd9611a0283613c0b565b6000808311613554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dc8565b61355f8484846123b9565b15613439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614f12565b60008083116135d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614dc8565b6135dc848484612f47565b15612539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614f12565b61361b613cbf565b6020810182905260a08301516080840151613637918491613519565b808252608084015160c085015161364f929190613519565b604082015260a083015160e0840151613669918491613519565b606082015292915050565b60008261368357506000610fd9565b8282028284828161369057fe5b0414610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614e6d565b600082820183811015610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614e6d565b60008082848161371357fe5b04949350505050565b6000818310610fd65781610689565b60018054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156137d45780601f106137a9576101008083540402835291602001916137d4565b820191906000526020600020905b8154815290600101906020018083116137b757829003601f168201915b505050505090506137f48461014001518560000151858560000151613835565b61380d8461016001518486600001518560200151613835565b61382581856000015186604001518560400151613835565b61281e8184866040015185606001515b60008111801561387157508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561281e5760038451116138b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615127565b6020848101517fffffffff00000000000000000000000000000000000000000000000000000000166000818152600b90925260409091205473ffffffffffffffffffffffffffffffffffffffff1680613936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614fee565b60405186517fa85e59e40000000000000000000000000000000000000000000000000000000082526080600483015273ffffffffffffffffffffffffffffffffffffffff87811660248401528616604483015260648201859052608480830191603f01660fffffffffffe0168301015b808210156139c15788518252602098890198909101906139a6565b61020083848303856000885af191505080611c31573d82fd5b805160ff16600314613a18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890615297565b606082015173ffffffffffffffffffffffffffffffffffffffff1615613a8b57606082015173ffffffffffffffffffffffffffffffffffffffff163314613a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610708906152ce565b6000613a95612660565b90508073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614613b00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890614e36565b505050565b6000818152600560205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558281015183516101408501516101608601519351859473ffffffffffffffffffffffffffffffffffffffff9485169493909316927fdc47b3613d9fe400085f6dbdc99453462279057e6207385042827ed6b1a62cf792613ba092339290614a30565b60405180910390a45050565b60008160140183511015613bec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061523a565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b600080604051602001613c1d90614852565b6040516020818303038152906040528051906020012090506000836101400151604051613c4a9190614744565b604051809103902090506000846101600151604051613c699190614744565b6040519081900390207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0860180516101408801805161016090990180519784529581529285526101a08220915295905250525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806101200160405280613cfb613cbf565b8152602001613d08613cbf565b8152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610fd957600080fd5b600082601f830112613d69578081fd5b8135613d7c613d7782615425565b6153fe565b8181529150602080830190840160005b83811015613db957613da48760208435890101613e67565b83526020928301929190910190600101613d8c565b5050505092915050565b600082601f830112613dd3578081fd5b8135613de1613d7782615425565b8181529150602080830190840160005b83811015613db957613e098760208435890101613f33565b83526020928301929190910190600101613df1565b60008083601f840112613e3057600080fd5b50813567ffffffffffffffff811115613e4857600080fd5b602083019150836020828501011115613e6057600080fd5b9250929050565b600082601f830112613e77578081fd5b813567ffffffffffffffff811115613e8d578182fd5b613ebe60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016153fe565b9150808252836020828501011115613ed557600080fd5b8060208401602084013760009082016020015292915050565b600060808284031215613eff578081fd5b613f0960806153fe565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b6000610180808385031215613f46578182fd5b613f4f816153fe565b915050613f5c8383613d35565b8152613f6b8360208401613d35565b6020820152613f7d8360408401613d35565b6040820152613f8f8360608401613d35565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff80821115613ff157600080fd5b613ffd86838701613e67565b8385015261016092508285013591508082111561401957600080fd5b5061402685828601613e67565b82840152505092915050565b60006020828403121561404457600080fd5b6106898383613d35565b6000806040838503121561406157600080fd5b61406b8484613d35565b915061407a8460208501613d35565b90509250929050565b6000806040838503121561409657600080fd5b6140a08484613d35565b9150602083013580151581146140b557600080fd5b809150509250929050565b6000602082840312156140d257600080fd5b813567ffffffffffffffff8111156140e957600080fd5b6140f584828501613dc3565b949350505050565b600080600060608486031215614111578081fd5b833567ffffffffffffffff80821115614128578283fd5b61413487838801613dc3565b945060209150818601358181111561414a578384fd5b80870188601f82011261415b578485fd5b8035915061416b613d7783615425565b82815284810190828601868502840187018c1015614187578788fd5b8793505b848410156141a957803583526001939093019291860191860161418b565b50965050505060408601359150808211156141c2578283fd5b506141cf86828701613d59565b9150509250925092565b6000806000606084860312156141ed578081fd5b833567ffffffffffffffff80821115614204578283fd5b61421087838801613dc3565b94506020860135935060408601359150808211156141c2578283fd5b60006020828403121561423e57600080fd5b5035919050565b6000806040838503121561425857600080fd5b8235915060208301356140b581615472565b6000806000806060858703121561428057600080fd5b843593506142918660208701613d35565b9250604085013567ffffffffffffffff8111156142ad57600080fd5b6142b987828801613e1e565b95989497509550505050565b6000806000606084860312156142da57600080fd5b8335925060208401356142ec81615472565b9150604084013567ffffffffffffffff81111561430857600080fd5b6141cf86828701613e67565b60006020828403121561432657600080fd5b813561068981615494565b60006020828403121561434357600080fd5b815161068981615494565b600080610100838503121561436257600080fd5b61436c8484613eee565b915061407a8460808501613eee565b60006020828403121561438d57600080fd5b813567ffffffffffffffff8111156143a457600080fd5b6140f584828501613f33565b600080600080600061010086880312156143c957600080fd5b853567ffffffffffffffff8111156143e057600080fd5b6143ec88828901613f33565b9550506143fc8760208801613d35565b935060408601359250606086013591506144198760808801613eee565b90509295509295909350565b6000806000806080858703121561443a578182fd5b843567ffffffffffffffff80821115614451578384fd5b61445d88838901613f33565b95506020870135915080821115614472578384fd5b61447e88838901613f33565b94506040870135915080821115614493578384fd5b61449f88838901613e67565b935060608701359150808211156144b557600080fd5b506144c287828801613e67565b91505092959194509250565b600080604083850312156144e157600080fd5b823567ffffffffffffffff8111156144f857600080fd5b61450485828601613f33565b95602094909401359450505050565b600080600060608486031215614527578081fd5b833567ffffffffffffffff8082111561453e578283fd5b61454a87838801613f33565b9450602086013593506040860135915080821115614566578283fd5b506141cf86828701613e67565b6000806000806000806080878903121561458c57600080fd5b8635955061459d8860208901613d35565b9450604087013567ffffffffffffffff808211156145ba57600080fd5b6145c68a838b01613e1e565b909650945060608901359150808211156145df57600080fd5b506145ec89828a01613e1e565b979a9699509497509295939492505050565b60008060006060848603121561461357600080fd5b505081359360208301359350604090920135919050565b60008151808452614642816020860160208601615446565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b7f6279746573206d616b65724173736574446174612c0000000000000000000000815260150190565b7f62797465732074616b6572417373657444617461000000000000000000000000815260140190565b7f2900000000000000000000000000000000000000000000000000000000000000815260010190565b805182526020810151602083015260408101516040830152606081015160608301525050565b805160ff16825260208082015190830152604090810151910152565b6000828483375060009101908152919050565b60008251614756818460208701615446565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b7f5a65726f45785472616e73616374696f6e28000000000000000000000000000081527f75696e743235362073616c742c0000000000000000000000000000000000000060128201527f61646472657373207369676e6572416464726573732c00000000000000000000601f8201527f627974657320646174610000000000000000000000000000000000000000000060358201527f2900000000000000000000000000000000000000000000000000000000000000603f82015260400190565b60007f4f7264657228000000000000000000000000000000000000000000000000000082527f61646472657373206d616b6572416464726573732c000000000000000000000060068301527f616464726573732074616b6572416464726573732c0000000000000000000000601b8301527f6164647265737320666565526563697069656e74416464726573732c0000000060308301527f616464726573732073656e646572416464726573732c00000000000000000000604c8301527f75696e74323536206d616b65724173736574416d6f756e742c0000000000000060628301527f75696e743235362074616b65724173736574416d6f756e742c00000000000000607b8301527f75696e74323536206d616b65724665652c00000000000000000000000000000060948301527f75696e743235362074616b65724665652c00000000000000000000000000000060a58301527f75696e743235362065787069726174696f6e54696d655365636f6e64732c000060b68301527f75696e743235362073616c742c0000000000000000000000000000000000000060d4830152610fd9614a0a614a0560e18501614674565b61469d565b6146c6565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152614a5f606083018561462a565b8281036040840152614a71818561462a565b9695505050505050565b600061010073ffffffffffffffffffffffffffffffffffffffff808c168452808b166020850152508860408401528760608401528660808401528560a08401528060c0840152614acd8184018661462a565b83810360e0850152614adf818661462a565b9c9b505050505050505050505050565b602080825282518282018190526000918401906040840190835b81811015614b3257614b1c838551614715565b6020939093019260609290920191600101614b09565b509095945050505050565b901515815260200190565b90815260200190565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152614b86606083018461462a565b95945050505050565b600083825260406020830152610686604083018461462a565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b600060208252610689602083018461462a565b60208082526012908201527f4c454e4754485f36355f52455155495245440000000000000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f54414b455200000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4f524445525f4f56455246494c4c000000000000000000000000000000000000604082015260600190565b60208082526011908201527f55494e543235365f554e444552464c4f57000000000000000000000000000000604082015260600190565b6020808252601a908201527f41535345545f50524f58595f414c52454144595f455849535453000000000000604082015260600190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f5349474e41545552455f554e535550504f525445440000000000000000000000604082015260600190565b60208082526010908201527f4449564953494f4e5f42595f5a45524f00000000000000000000000000000000604082015260600190565b60208082526017908201527f494e56414c49445f4f524445525f5349474e4154555245000000000000000000604082015260600190565b6020808252600d908201527f494e56414c49445f4d414b455200000000000000000000000000000000000000604082015260600190565b60208082526010908201527f55494e543235365f4f564552464c4f5700000000000000000000000000000000604082015260600190565b6020808252600f908201527f494e56414c49445f54585f484153480000000000000000000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604082015260600190565b6020808252600e908201527f524f554e44494e475f4552524f52000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4641494c45445f455845435554494f4e00000000000000000000000000000000604082015260600190565b6020808252600d908201527f54414b45525f4f56455250415900000000000000000000000000000000000000604082015260600190565b60208082526014908201527f494e56414c49445f54414b45525f414d4f554e54000000000000000000000000604082015260600190565b6020808252601a908201527f41535345545f50524f58595f444f45535f4e4f545f4558495354000000000000604082015260600190565b60208082526021908201527f475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524560408201527f4400000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f5349474e41545552455f494c4c4547414c000000000000000000000000000000604082015260600190565b6020808252601e908201527f4c454e4754485f475245415445525f5448414e5f305f52455155495245440000604082015260600190565b60208082526017908201527f494e56414c49445f4e45575f4f524445525f45504f4348000000000000000000604082015260600190565b6020808252601e908201527f4c454e4754485f475245415445525f5448414e5f335f52455155495245440000604082015260600190565b60208082526014908201527f434f4d504c4554455f46494c4c5f4641494c4544000000000000000000000000604082015260600190565b60208082526012908201527f494e56414c49445f46494c4c5f50524943450000000000000000000000000000604082015260600190565b60208082526012908201527f5245454e5452414e43595f494c4c4547414c0000000000000000000000000000604082015260600190565b60208082526013908201527f4f4e4c595f434f4e54524143545f4f574e455200000000000000000000000000604082015260600190565b60208082526026908201527f475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f524560408201527f5155495245440000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f4f524445525f554e46494c4c41424c4500000000000000000000000000000000604082015260600190565b6020808252600e908201527f494e56414c49445f53454e444552000000000000000000000000000000000000604082015260600190565b60208082526018908201527f4e454741544956455f5350524541445f52455155495245440000000000000000604082015260600190565b60208082526014908201527f494e56414c49445f54585f5349474e4154555245000000000000000000000000604082015260600190565b60208082526011908201527f4c454e4754485f305f5245515549524544000000000000000000000000000000604082015260600190565b60808101610fd982846146ef565b6000610120820190506153cc8284516146ef565b60208301516153de60808401826146ef565b50604083015161010083015292915050565b60608101610fd98284614715565b60405181810167ffffffffffffffff8111828210171561541d57600080fd5b604052919050565b600067ffffffffffffffff82111561543c57600080fd5b5060209081020190565b60005b83811015615461578181015183820152602001615449565b8381111561281e5750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461237d57600080fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461237d57600080fdfea265627a7a72305820ef5ff86295ec45286f9f52d461489d3e10eb0581bb148d6bbb3cd1479be111996c6578706572696d656e74616cf50037",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2F4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E9D74DC GT PUSH2 0x191 JUMPI DUP1 PUSH4 0xD9BFA73E GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xE0B701E3 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEEA086BA GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEEA086BA EQ PUSH2 0x656 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0xFFA1AD74 EQ PUSH2 0x671 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xE0B701E3 EQ PUSH2 0x628 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x63B JUMPI DUP1 PUSH4 0xE5FA431B EQ PUSH2 0x643 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xDD1C7D18 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDD1C7D18 EQ PUSH2 0x5EF JUMPI DUP1 PUSH4 0xDE30200D EQ PUSH2 0x602 JUMPI DUP1 PUSH4 0xE0ACD33D EQ PUSH2 0x615 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xD9BFA73E EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0xDB123B1A EQ PUSH2 0x5DA JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xB4BE83D5 GT PUSH2 0x145 JUMPI DUP1 PUSH4 0xC585BB93 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0xC585BB93 EQ PUSH2 0x581 JUMPI DUP1 PUSH4 0xC75E0A81 EQ PUSH2 0x594 JUMPI DUP1 PUSH4 0xD46B02C3 EQ PUSH2 0x5B4 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0xB4BE83D5 EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0xBE7ADA1E EQ PUSH2 0x55B JUMPI DUP1 PUSH4 0xBFC8BFCE EQ PUSH2 0x56E JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0x93634702 EQ PUSH2 0x522 JUMPI DUP1 PUSH4 0xA3E20380 EQ PUSH2 0x535 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x7E9D74DC EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x82C174D0 EQ PUSH2 0x507 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x4D0AE546 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x64A3BC15 GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0x77FCCE68 GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x77FCCE68 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0x7B8E3514 EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0x7E1D9808 EQ PUSH2 0x4D4 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x64A3BC15 EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0x66758D7B EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x679D2F9A EQ PUSH2 0x49B JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x50DDE190 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x50DDE190 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x60704108 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x642F2EAF EQ PUSH2 0x462 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x4D0AE546 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x4F9559B1 EQ PUSH2 0x429 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x2AC12622 GT PUSH2 0x2AC JUMPI DUP1 PUSH4 0x3E228BAE GT PUSH2 0x286 JUMPI DUP1 PUSH4 0x3E228BAE EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0x3FD3C997 EQ PUSH2 0x3E3 JUMPI DUP1 PUSH4 0x4AC14782 EQ PUSH2 0x403 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x2AC12622 EQ PUSH2 0x38A JUMPI DUP1 PUSH4 0x3683EF8E EQ PUSH2 0x39D JUMPI DUP1 PUSH4 0x3C28D861 EQ PUSH2 0x3B0 JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x20777F70 GT PUSH2 0x2DD JUMPI DUP1 PUSH4 0x20777F70 EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x288CDC91 EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0x297BB70B EQ PUSH2 0x36A JUMPI PUSH2 0x2F4 JUMP JUMPDEST DUP1 PUSH4 0x1BE23901 EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x1EA1E3D8 EQ PUSH2 0x322 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30C PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x679 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4B3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x335 PUSH2 0x330 CALLDATASIZE PUSH1 0x4 PUSH2 0x43B0 JUMP JUMPDEST PUSH2 0x690 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x34A PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4B48 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x365 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0x6C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x53AA JUMP JUMPDEST PUSH2 0x30C PUSH2 0x398 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0x7D9 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x426A JUMP JUMPDEST PUSH2 0x7EE JUMP JUMPDEST PUSH2 0x3C3 PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x4425 JUMP JUMPDEST PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x53B8 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x3DE CALLDATASIZE PUSH1 0x4 PUSH2 0x4513 JUMP JUMPDEST PUSH2 0xA77 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x4314 JUMP JUMPDEST PUSH2 0xACC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4A0F JUMP JUMPDEST PUSH2 0x335 PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C0 JUMP JUMPDEST PUSH2 0xAF4 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x40FD JUMP JUMPDEST PUSH2 0xE41 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x4314 JUMP JUMPDEST PUSH2 0xEB6 JUMP JUMPDEST PUSH2 0x30C PUSH2 0x470 CALLDATASIZE PUSH1 0x4 PUSH2 0x422C JUMP JUMPDEST PUSH2 0xF04 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x483 CALLDATASIZE PUSH1 0x4 PUSH2 0x4513 JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x496 CALLDATASIZE PUSH1 0x4 PUSH2 0x434E JUMP JUMPDEST PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x30C PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0xFDF JUMP JUMPDEST PUSH2 0x335 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0x4083 JUMP JUMPDEST PUSH2 0xFEC JUMP JUMPDEST PUSH2 0x30C PUSH2 0x4CF CALLDATASIZE PUSH1 0x4 PUSH2 0x404E JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x4E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x1145 JUMP JUMPDEST PUSH2 0x4FA PUSH2 0x4F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x40C0 JUMP JUMPDEST PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4AEF JUMP JUMPDEST PUSH2 0x30C PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x4245 JUMP JUMPDEST PUSH2 0x132A JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x134A JUMP JUMPDEST PUSH2 0x30C PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x42C5 JUMP JUMPDEST PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x17E5 JUMP JUMPDEST PUSH2 0x37D PUSH2 0x556 CALLDATASIZE PUSH1 0x4 PUSH2 0x4513 JUMP JUMPDEST PUSH2 0x18E4 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x569 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x195F JUMP JUMPDEST PUSH2 0x335 PUSH2 0x57C CALLDATASIZE PUSH1 0x4 PUSH2 0x4573 JUMP JUMPDEST PUSH2 0x196C JUMP JUMPDEST PUSH2 0x335 PUSH2 0x58F CALLDATASIZE PUSH1 0x4 PUSH2 0x4032 JUMP JUMPDEST PUSH2 0x1C3B JUMP JUMPDEST PUSH2 0x5A7 PUSH2 0x5A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x437B JUMP JUMPDEST PUSH2 0x1E3D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x53F0 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x5C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x437B JUMP JUMPDEST PUSH2 0x1F33 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x5D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x404E JUMP JUMPDEST PUSH2 0x1FCF JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0x1FEC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x319 SWAP2 SWAP1 PUSH2 0x4C0E JUMP JUMPDEST PUSH2 0x37D PUSH2 0x5FD CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x2097 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x2150 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x623 CALLDATASIZE PUSH1 0x4 PUSH2 0x45FE JUMP JUMPDEST PUSH2 0x215D JUMP JUMPDEST PUSH2 0x37D PUSH2 0x636 CALLDATASIZE PUSH1 0x4 PUSH2 0x44CE JUMP JUMPDEST PUSH2 0x216A JUMP JUMPDEST PUSH2 0x34A PUSH2 0x217C JUMP JUMPDEST PUSH2 0x37D PUSH2 0x651 CALLDATASIZE PUSH1 0x4 PUSH2 0x41D9 JUMP JUMPDEST PUSH2 0x2182 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x22B3 JUMP JUMPDEST PUSH2 0x335 PUSH2 0x66C CALLDATASIZE PUSH1 0x4 PUSH2 0x4032 JUMP JUMPDEST PUSH2 0x22CF JUMP JUMPDEST PUSH2 0x5E2 PUSH2 0x2380 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x23B9 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x69D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x243C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x24FE JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x6CB PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x711 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD SWAP1 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7A8 JUMPI PUSH2 0x74F PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x793 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x75E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x772 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x786 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x255F JUMP JUMPDEST SWAP1 POP PUSH2 0x79F DUP5 DUP3 PUSH2 0x25FE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x740 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND CALLER EQ PUSH2 0x882 JUMPI PUSH2 0x84C DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1366 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x882 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4EDB JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x8E7 PUSH2 0x3CE7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x924 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x160 DUP1 DUP7 ADD MLOAD PUSH2 0x140 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 ADD MLOAD SWAP1 DUP6 ADD MSTORE PUSH2 0x96F PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x978 DUP7 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH2 0x982 PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x98B DUP7 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x997 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP PUSH2 0x9A5 DUP9 DUP5 DUP4 DUP10 PUSH2 0x2692 JUMP JUMPDEST PUSH2 0x9B1 DUP8 DUP4 DUP4 DUP9 PUSH2 0x2692 JUMP JUMPDEST PUSH2 0x9BB DUP9 DUP9 PUSH2 0x2824 JUMP JUMPDEST PUSH2 0x9CF DUP9 DUP9 DUP6 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x2884 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP2 ADD MLOAD SWAP1 MLOAD SWAP2 SWAP6 POP PUSH2 0x9EA SWAP2 DUP11 SWAP2 DUP7 SWAP2 DUP2 SWAP1 PUSH2 0x2A0D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD SWAP1 DUP2 ADD MLOAD SWAP1 MLOAD PUSH2 0xA06 SWAP2 DUP10 SWAP2 DUP6 SWAP2 SWAP1 DUP2 SWAP1 PUSH2 0x2A0D JUMP JUMPDEST PUSH2 0xA1F DUP9 DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x243C JUMP JUMPDEST PUSH2 0xA38 DUP8 DUP3 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x243C JUMP JUMPDEST PUSH2 0xA44 DUP9 DUP9 DUP4 DUP8 PUSH2 0x2B1D JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xA7F PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA8C DUP6 DUP6 DUP6 PUSH2 0x2CF5 JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP2 DUP3 MLOAD PUSH1 0x20 DUP5 ADD ADDRESS GAS DELEGATECALL DUP1 ISZERO PUSH2 0xAC3 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP2 MLOAD SWAP1 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB8B JUMPI PUSH2 0xB83 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB76 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2ECA JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB60 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD SWAP1 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7A8 JUMPI PUSH2 0xC3B PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0xC7F DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xC4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC72 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 POP PUSH2 0xC8B DUP5 DUP3 PUSH2 0x25FE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xC2C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xCD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH2 0xD04 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND CALLER EQ PUSH2 0xD2B JUMPI CALLER PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 DUP5 ADD SWAP1 DUP1 DUP3 GT PUSH2 0xDA2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x50F0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE MLOAD PUSH32 0x82AF639571738F4EBD4268FB0363D8957EBE1BBB9E78DBA5EBD69EED39B154F0 SWAP1 PUSH2 0xE0A SWAP1 DUP7 SWAP1 PUSH2 0x4B48 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xE49 PUSH2 0x3CBF JUMP JUMPDEST DUP4 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xAC3 JUMPI PUSH2 0xE5D PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0xEA1 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE6C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xA77 JUMP JUMPDEST SWAP1 POP PUSH2 0xEAD DUP5 DUP3 PUSH2 0x25FE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE4E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF21 PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xF94 DUP5 DUP5 DUP5 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xFCC PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0xFD6 DUP4 DUP4 PUSH2 0x25FE JUMP JUMPDEST POP DUP2 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1029 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH2 0x105C PUSH2 0x2660 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP8 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 0xA8656E308026EEABCE8F0BC18048433252318AB80AC79DA0B3D3D8697DFBA891 SWAP1 PUSH2 0x10F0 SWAP1 DUP7 SWAP1 PUSH2 0x4B3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x114D PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x118A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD PUSH1 0x60 SWAP2 DUP7 SWAP2 PUSH2 0x11C2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1264 JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x120E DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x1218 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x123C DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1227 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x786 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x1248 DUP7 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP8 DUP7 PUSH1 0x20 ADD MLOAD LT PUSH2 0x125A JUMPI POP POP PUSH2 0x1264 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x11DA JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12DA JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x12C7 PUSH2 0x3D15 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x12BF JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 EQ PUSH2 0x1322 JUMPI PUSH2 0x1303 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x12F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1E3D JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x130F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x12E0 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH2 0x13A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x50B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13AD DUP4 PUSH2 0x300A JUMP JUMPDEST PUSH1 0xF8 SHR SWAP1 POP PUSH1 0x7 DUP2 LT PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4D91 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x13FD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1411 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1449 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5082 JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1457 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x14A6 JUMPI DUP8 MLOAD ISZERO PUSH2 0x1496 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5373 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 POP PUSH2 0x689 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x14B4 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x15CF JUMPI DUP8 MLOAD PUSH1 0x41 EQ PUSH2 0x14F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C21 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1502 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SWAP1 DUP2 SHR DUP2 SHL SWAP1 SHR SWAP4 POP PUSH2 0x1523 DUP9 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP3 POP PUSH2 0x1536 DUP9 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP11 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x155B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4BA8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x157D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP2 AND SWAP2 AND EQ SWAP8 POP PUSH2 0x689 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x15DD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16AA JUMPI DUP8 MLOAD PUSH1 0x41 EQ PUSH2 0x161E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C21 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x162B JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SWAP1 DUP2 SHR DUP2 SHL SWAP1 SHR SWAP4 POP PUSH2 0x164C DUP9 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP3 POP PUSH2 0x165F DUP9 PUSH1 0x21 PUSH4 0xFFFFFFFF PUSH2 0x308D AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1674 SWAP2 SWAP1 PUSH2 0x4760 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x155B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4BA8 JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x16B8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x16D7 JUMPI PUSH2 0x16C9 DUP11 DUP11 DUP11 PUSH2 0x30D6 JUMP JUMPDEST SWAP7 POP PUSH2 0x689 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x16E5 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x175E JUMPI PUSH1 0x0 PUSH2 0x16F6 DUP10 PUSH2 0x322B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x1743 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x689 JUMP JUMPDEST PUSH2 0x174F DUP2 DUP13 DUP13 DUP13 PUSH2 0x32A2 JUMP JUMPDEST SWAP8 POP PUSH2 0x689 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x176C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x17B3 JUMPI POP POP POP PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP4 POP PUSH2 0x689 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4D91 JUMP JUMPDEST PUSH2 0x17ED PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x60 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17FC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x18DA JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1828 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x140 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x1848 DUP8 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1885 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x185B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1873 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD DUP5 PUSH2 0x33FE JUMP JUMPDEST SWAP1 POP PUSH2 0x188F PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x18B3 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x189E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xE94 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x18BF DUP8 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x18CF JUMPI POP POP POP PUSH2 0x18DA JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1814 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x18EC PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1929 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xF94 DUP5 DUP5 DUP5 PUSH2 0x255F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x33FE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A07 PUSH2 0x1A02 DUP9 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x3446 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x34CE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x1A53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4EA4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND CALLER EQ PUSH2 0x1B28 JUMPI PUSH2 0x1AB1 DUP2 DUP8 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1366 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x533C JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD ADDRESS SWAP1 PUSH2 0x1B70 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x4731 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1BAB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BB0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1BEB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F49 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND CALLER EQ PUSH2 0x1C31 JUMPI PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1C8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5203 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAE25532E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1D0C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4331 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x1D8F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4CFD JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND OR SWAP1 SSTORE MLOAD PUSH32 0xD2C6B762299C609BDB96520B58A49BFB80186934D4F71A86A367571A15C03194 SWAP1 PUSH2 0x1E30 SWAP1 DUP5 SWAP1 DUP7 SWAP1 PUSH2 0x4BC6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x1E45 PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x1E4E DUP3 PUSH2 0x350B JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x4 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x1E80 JUMPI PUSH1 0x1 JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH2 0xEFF JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1E90 JUMPI PUSH1 0x2 PUSH2 0x1E76 JUMP JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD DUP2 PUSH1 0x40 ADD MLOAD LT PUSH2 0x1EA6 JUMPI PUSH1 0x5 PUSH2 0x1E76 JUMP JUMPDEST DUP2 PUSH2 0x100 ADD MLOAD TIMESTAMP LT PUSH2 0x1EB9 JUMPI PUSH1 0x4 PUSH2 0x1E76 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1EDD JUMPI PUSH1 0x6 PUSH2 0x1E76 JUMP JUMPDEST PUSH2 0x120 DUP3 ADD MLOAD DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD GT ISZERO PUSH2 0x1F2A JUMPI PUSH1 0x6 PUSH2 0x1E76 JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1F70 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1FA4 DUP2 PUSH2 0x2ECA JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 DUP5 DUP7 AND ISZERO PUSH2 0x100 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x208F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2064 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x208F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2072 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x209F PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x60 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x20AE JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x160 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x18DA JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x20DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x160 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x20FA DUP8 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH2 0x2104 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x2128 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2113 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE94 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x2134 DUP7 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP8 DUP7 PUSH1 0x20 ADD MLOAD LT PUSH2 0x2146 JUMPI POP POP PUSH2 0x18DA JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x20C6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 DUP5 DUP5 PUSH2 0x3596 JUMP JUMPDEST PUSH2 0x2172 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x689 DUP4 DUP4 PUSH2 0x3613 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x218A PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x21C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x51CC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE DUP5 MLOAD PUSH1 0x60 SWAP2 DUP7 SWAP2 PUSH2 0x21FF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH2 0x140 ADD MLOAD DUP6 MLOAD SWAP1 SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1264 JUMPI DUP3 DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x222B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x140 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0x224B DUP8 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x225E DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x185B JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x2268 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x228C DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2277 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x786 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x2298 DUP8 DUP3 PUSH2 0x25FE JUMP JUMPDEST DUP7 MLOAD DUP10 GT PUSH2 0x22A8 JUMPI POP POP POP PUSH2 0x1264 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2217 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5203 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x237D JUMPI PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x332E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x23F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x23FF JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x240C JUMPI POP PUSH1 0x0 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x2416 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x2425 DUP6 DUP5 PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2431 PUSH2 0x3E8 DUP4 PUSH2 0x3674 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x244A DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBCC4C97732E47D9946F229EDB95F5B6323F601300E4690DE719993F3C371129 DUP8 CALLER DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x60 ADD MLOAD DUP15 PUSH2 0x140 ADD MLOAD DUP16 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x24EF SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4A7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x686 PUSH2 0x2559 PUSH2 0x2549 DUP7 DUP6 PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2554 DUP7 PUSH1 0x1 PUSH2 0x2FC8 JUMP JUMPDEST PUSH2 0x36C8 JUMP JUMPDEST DUP5 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2567 PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x256F PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x2578 DUP6 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2584 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP PUSH2 0x2592 DUP7 DUP4 DUP4 DUP8 PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25A6 DUP8 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x25B4 DUP8 DUP4 PUSH2 0x371C JUMP JUMPDEST SWAP1 POP PUSH2 0x25C7 DUP9 DUP6 DUP10 DUP5 DUP10 PUSH1 0x0 ADD MLOAD PUSH2 0x2A0D JUMP JUMPDEST PUSH2 0x25D1 DUP9 DUP3 PUSH2 0x3613 JUMP JUMPDEST SWAP5 POP PUSH2 0x25E8 DUP9 DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP10 PUSH2 0x243C JUMP JUMPDEST PUSH2 0x25F3 DUP9 DUP5 DUP8 PUSH2 0x372B JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x260C SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2622 SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x263B SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x2654 SWAP2 SWAP1 PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP2 ISZERO PUSH2 0x2689 JUMPI DUP2 PUSH2 0x268B JUMP JUMPDEST CALLER JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x26D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5297 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x2743 JUMPI PUSH1 0x60 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2743 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x52CE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x27CC JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x27CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C58 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x281E JUMPI PUSH2 0x27E8 DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP4 PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x281E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DFF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2836 DUP3 PUSH1 0xA0 ADD MLOAD DUP3 PUSH1 0xA0 ADD MLOAD PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2848 DUP4 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x3674 JUMP JUMPDEST LT ISZERO PUSH2 0x2880 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5305 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x288C PUSH2 0x3CE7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x289C DUP7 PUSH1 0xA0 ADD MLOAD DUP6 PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28B3 DUP8 PUSH1 0x80 ADD MLOAD DUP9 PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x3519 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28C5 DUP8 PUSH1 0xA0 ADD MLOAD DUP7 PUSH2 0x2FC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28DC DUP9 PUSH1 0x80 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP5 PUSH2 0x3519 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 LT PUSH2 0x291F JUMPI PUSH1 0x20 DUP1 DUP7 ADD DUP1 MLOAD DUP4 SWAP1 MSTORE DUP1 MLOAD DUP3 ADD DUP5 SWAP1 MSTORE MLOAD MLOAD DUP7 MLOAD DUP3 ADD MSTORE PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xA0 DUP12 ADD MLOAD DUP8 MLOAD SWAP1 SWAP3 ADD MLOAD PUSH2 0x2917 SWAP3 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 MLOAD MSTORE PUSH2 0x295C JUMP JUMPDEST DUP5 MLOAD DUP4 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x20 SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE DUP6 MLOAD DUP2 ADD MLOAD SWAP1 DUP7 ADD DUP1 MLOAD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP10 ADD MLOAD PUSH1 0x80 DUP11 ADD MLOAD SWAP2 MLOAD MLOAD PUSH2 0x2953 SWAP3 SWAP1 PUSH2 0x3596 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MSTORE JUMPDEST DUP5 MLOAD MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD ADD MLOAD PUSH2 0x2971 SWAP2 SWAP1 PUSH2 0x2FC8 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE DUP5 MLOAD MLOAD PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD PUSH2 0x298E SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x40 ADD MSTORE DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0xA0 DUP11 ADD MLOAD PUSH1 0xE0 DUP12 ADD MLOAD PUSH2 0x29AF SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x60 ADD MSTORE PUSH1 0x20 DUP6 ADD MLOAD MLOAD PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0xC0 DUP11 ADD MLOAD PUSH2 0x29D0 SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x29F8 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x60 ADD MSTORE POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH2 0x2A44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4FB7 JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x2A7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F80 JUMP JUMPDEST DUP5 PUSH1 0xA0 ADD MLOAD PUSH2 0x2A91 DUP6 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x36C8 JUMP JUMPDEST GT ISZERO PUSH2 0x2AC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4C8F JUMP JUMPDEST PUSH2 0x2AD7 DUP6 PUSH1 0x80 ADD MLOAD DUP4 PUSH2 0x3674 JUMP JUMPDEST PUSH2 0x2AE5 DUP3 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x3674 JUMP JUMPDEST GT ISZERO PUSH2 0x69D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5195 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 DUP8 DUP10 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x2BC6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B9B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2BC6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BA9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2BEE DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x140 DUP5 ADD MLOAD DUP5 MLOAD DUP7 MLOAD DUP5 MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x2C0A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x2C23 DUP6 PUSH2 0x140 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x2C3F DUP2 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x2C5B DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2CC5 JUMPI PUSH2 0x2CC0 DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD PUSH2 0x2CBB DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x36C8 JUMP JUMPDEST PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x69D JUMP JUMPDEST PUSH2 0x2CDD DUP2 DUP5 DUP8 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x69D DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD DUP2 DUP2 MSTORE DUP8 MLOAD PUSH1 0x84 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 DUP5 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP5 DUP9 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 DUP8 ADD MLOAD PUSH1 0xE4 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x104 DUP5 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x164 DUP5 ADD MSTORE PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x184 DUP5 ADD MSTORE PUSH2 0x120 DUP8 ADD MLOAD PUSH2 0x1A4 DUP5 ADD MSTORE PUSH2 0x140 DUP8 ADD DUP1 MLOAD PUSH2 0x1C4 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH2 0x1E4 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x204 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP5 PUSH2 0x224 DUP7 ADD SWAP5 SWAP3 SWAP4 PUSH1 0x44 DUP8 ADD SWAP4 SWAP2 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2DFA JUMPI DUP4 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x2DDC JUMP JUMPDEST POP POP POP POP DUP1 DUP5 SUB PUSH2 0x160 SWAP2 DUP3 ADD MSTORE DUP8 ADD MLOAD DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x0 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP5 LT ISZERO PUSH2 0x2E46 JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH2 0x2E23 JUMP JUMPDEST POP POP POP DUP7 DUP3 MSTORE SWAP2 DUP4 SUB PUSH1 0x20 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE DUP6 MLOAD DUP1 DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x0 SWAP4 SWAP2 SWAP3 DUP8 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP7 LT ISZERO PUSH2 0x2E93 JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP7 ADD SWAP6 POP PUSH2 0x2E70 JUMP JUMPDEST POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP6 SUB ADD DUP6 MSTORE POP POP POP PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2ED2 PUSH2 0x3D15 JUMP JUMPDEST PUSH2 0x2EDB DUP3 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH2 0x2EE7 DUP3 DUP3 PUSH2 0x39DA JUMP JUMPDEST PUSH2 0x2880 DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x3B05 JUMP JUMPDEST PUSH2 0x2EFD PUSH2 0x3CBF JUMP JUMPDEST PUSH2 0x2F08 DUP5 DUP5 DUP5 PUSH2 0x255F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x20 ADD MLOAD EQ PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x515E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x2F82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x2F8D JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x2F9A JUMPI POP PUSH1 0x0 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x2FA4 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP DUP4 PUSH2 0x2FB4 DUP6 DUP4 PUSH2 0x2FC8 JUMP JUMPDEST DUP2 PUSH2 0x2FBB JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH2 0x2425 DUP6 DUP5 PUSH2 0x3674 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3004 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4CC6 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD GT PUSH2 0x3046 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5025 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3056 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SWAP3 MSTORE POP PUSH1 0xF8 SWAP1 DUP2 SHR SWAP1 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x30CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4D34 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x3111 SWAP1 DUP8 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x4B8F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP9 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x31AE JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x321F JUMPI PUSH2 0x25F3 JUMP JUMPDEST PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xC57414C4C45545F4552524F5200000000000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x14 DUP3 MLOAD LT ISZERO PUSH2 0x3269 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x523A JUMP JUMPDEST PUSH2 0x3277 DUP3 PUSH1 0x14 DUP5 MLOAD SUB PUSH2 0x3BAC JUMP JUMPDEST DUP3 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 PUSH32 0x9363470200000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x32DF SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4B51 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR DUP4 MSTORE DUP2 MLOAD SWAP2 SWAP4 POP SWAP1 DUP3 SWAP1 DUP2 DUP11 GAS STATICCALL DUP1 DUP1 ISZERO PUSH2 0x337C JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x33ED JUMPI PUSH2 0x33F2 JUMP JUMPDEST PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF56414C494441544F525F4552524F5200000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST DUP3 MLOAD SWAP5 POP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3439 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x686 PUSH2 0x2559 DUP6 DUP5 PUSH2 0x3674 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3458 SWAP1 PUSH2 0x4791 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP7 MLOAD DUP8 DUP4 ADD KECCAK256 SWAP1 DUP5 MSTORE SWAP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 KECCAK256 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD9 PUSH2 0x1A02 DUP4 PUSH2 0x3C0B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3554 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x355F DUP5 DUP5 DUP5 PUSH2 0x23B9 JUMP JUMPDEST ISZERO PUSH2 0x3439 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F12 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x35D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4DC8 JUMP JUMPDEST PUSH2 0x35DC DUP5 DUP5 DUP5 PUSH2 0x2F47 JUMP JUMPDEST ISZERO PUSH2 0x2539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4F12 JUMP JUMPDEST PUSH2 0x361B PUSH2 0x3CBF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x3637 SWAP2 DUP5 SWAP2 PUSH2 0x3519 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x364F SWAP3 SWAP2 SWAP1 PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xE0 DUP5 ADD MLOAD PUSH2 0x3669 SWAP2 DUP5 SWAP2 PUSH2 0x3519 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3683 JUMPI POP PUSH1 0x0 PUSH2 0xFD9 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3690 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4E6D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4E6D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 PUSH2 0x3713 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xFD6 JUMPI DUP2 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 DUP8 DUP10 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x37D4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x37A9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x37D4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37B7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x37F4 DUP5 PUSH2 0x140 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP6 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x380D DUP5 PUSH2 0x160 ADD MLOAD DUP5 DUP7 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x3825 DUP2 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x281E DUP2 DUP5 DUP7 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3871 JUMPI POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x281E JUMPI PUSH1 0x3 DUP5 MLOAD GT PUSH2 0x38B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5127 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 PUSH2 0x3936 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4FEE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 MLOAD PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x80 PUSH1 0x4 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE DUP7 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 DUP1 DUP4 ADD SWAP2 PUSH1 0x3F ADD PUSH7 0xFFFFFFFFFFFE0 AND DUP4 ADD ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x39C1 JUMPI DUP9 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP9 DUP10 ADD SWAP9 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x39A6 JUMP JUMPDEST PUSH2 0x200 DUP4 DUP5 DUP4 SUB DUP6 PUSH1 0x0 DUP9 GAS CALL SWAP2 POP POP DUP1 PUSH2 0x1C31 JUMPI RETURNDATASIZE DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x3A18 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x5297 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x3A8B JUMPI PUSH1 0x60 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3A8B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x52CE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A95 PUSH2 0x2660 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3B00 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x4E36 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP4 MLOAD DUP6 SWAP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH32 0xDC47B3613D9FE400085F6DBDC99453462279057E6207385042827ED6B1A62CF7 SWAP3 PUSH2 0x3BA0 SWAP3 CALLER SWAP3 SWAP1 PUSH2 0x4A30 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x3BEC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x708 SWAP1 PUSH2 0x523A JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C1D SWAP1 PUSH2 0x4852 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C4A SWAP2 SWAP1 PUSH2 0x4744 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x0 DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3C69 SWAP2 SWAP1 PUSH2 0x4744 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 ADD DUP1 MLOAD PUSH2 0x140 DUP9 ADD DUP1 MLOAD PUSH2 0x160 SWAP1 SWAP10 ADD DUP1 MLOAD SWAP8 DUP5 MSTORE SWAP6 DUP2 MSTORE SWAP3 DUP6 MSTORE PUSH2 0x1A0 DUP3 KECCAK256 SWAP2 MSTORE SWAP6 SWAP1 MSTORE POP MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x3CFB PUSH2 0x3CBF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3D08 PUSH2 0x3CBF JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3D69 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3D7C PUSH2 0x3D77 DUP3 PUSH2 0x5425 JUMP JUMPDEST PUSH2 0x53FE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DB9 JUMPI PUSH2 0x3DA4 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x3E67 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3D8C JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DD3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3DE1 PUSH2 0x3D77 DUP3 PUSH2 0x5425 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3DB9 JUMPI PUSH2 0x3E09 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x3F33 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3DF1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3E30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3E77 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E8D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3EBE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x53FE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3ED5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3EFF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3F09 PUSH1 0x80 PUSH2 0x53FE JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F46 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3F4F DUP2 PUSH2 0x53FE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F5C DUP4 DUP4 PUSH2 0x3D35 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x3F6B DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3F7D DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3F8F DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3FFD DUP7 DUP4 DUP8 ADD PUSH2 0x3E67 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4026 DUP6 DUP3 DUP7 ADD PUSH2 0x3E67 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4044 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x689 DUP4 DUP4 PUSH2 0x3D35 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4061 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x406B DUP5 DUP5 PUSH2 0x3D35 JUMP JUMPDEST SWAP2 POP PUSH2 0x407A DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40A0 DUP5 DUP5 PUSH2 0x3D35 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x40B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40F5 DUP5 DUP3 DUP6 ADD PUSH2 0x3DC3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4111 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4128 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4134 DUP8 DUP4 DUP9 ADD PUSH2 0x3DC3 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 SWAP2 POP DUP2 DUP7 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x414A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 DUP8 ADD DUP9 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x415B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x416B PUSH2 0x3D77 DUP4 PUSH2 0x5425 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP7 DUP6 MUL DUP5 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x4187 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x41A9 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x418B JUMP JUMPDEST POP SWAP7 POP POP POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x41C2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x41CF DUP7 DUP3 DUP8 ADD PUSH2 0x3D59 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x41ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4204 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4210 DUP8 DUP4 DUP9 ADD PUSH2 0x3DC3 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x41C2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x423E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x40B5 DUP2 PUSH2 0x5472 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x4291 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x42AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x42B9 DUP8 DUP3 DUP9 ADD PUSH2 0x3E1E JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x42DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x42EC DUP2 PUSH2 0x5472 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41CF DUP7 DUP3 DUP8 ADD PUSH2 0x3E67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x689 DUP2 PUSH2 0x5494 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x689 DUP2 PUSH2 0x5494 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x436C DUP5 DUP5 PUSH2 0x3EEE JUMP JUMPDEST SWAP2 POP PUSH2 0x407A DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x3EEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x438D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x43A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x40F5 DUP5 DUP3 DUP6 ADD PUSH2 0x3F33 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x43C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x43E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43EC DUP9 DUP3 DUP10 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP6 POP POP PUSH2 0x43FC DUP8 PUSH1 0x20 DUP9 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH2 0x4419 DUP8 PUSH1 0x80 DUP9 ADD PUSH2 0x3EEE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x443A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4451 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x445D DUP9 DUP4 DUP10 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4472 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x447E DUP9 DUP4 DUP10 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4493 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x449F DUP9 DUP4 DUP10 ADD PUSH2 0x3E67 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x44B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44C2 DUP8 DUP3 DUP9 ADD PUSH2 0x3E67 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4504 DUP6 DUP3 DUP7 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP6 PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD CALLDATALOAD SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4527 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x453E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x454A DUP8 DUP4 DUP9 ADD PUSH2 0x3F33 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4566 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x41CF DUP7 DUP3 DUP8 ADD PUSH2 0x3E67 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x458C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH2 0x459D DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x3D35 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x45BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x45C6 DUP11 DUP4 DUP12 ADD PUSH2 0x3E1E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x45DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45EC DUP10 DUP3 DUP11 ADD PUSH2 0x3E1E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4642 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5446 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 DUP2 MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST PUSH32 0x62797465732074616B6572417373657444617461000000000000000000000000 DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x4756 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x5446 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE PUSH1 0x1C DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3C ADD SWAP1 JUMP JUMPDEST PUSH32 0x5A65726F45785472616E73616374696F6E280000000000000000000000000000 DUP2 MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0x12 DUP3 ADD MSTORE PUSH32 0x61646472657373207369676E6572416464726573732C00000000000000000000 PUSH1 0x1F DUP3 ADD MSTORE PUSH32 0x6279746573206461746100000000000000000000000000000000000000000000 PUSH1 0x35 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x3F DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x6 DUP4 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x1B DUP4 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x30 DUP4 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x4C DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x62 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x7B DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0x94 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xA5 DUP4 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xB6 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xD4 DUP4 ADD MSTORE PUSH2 0xFD9 PUSH2 0x4A0A PUSH2 0x4A05 PUSH1 0xE1 DUP6 ADD PUSH2 0x4674 JUMP JUMPDEST PUSH2 0x469D JUMP JUMPDEST PUSH2 0x46C6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4A5F PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x462A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4A71 DUP2 DUP6 PUSH2 0x462A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE DUP1 DUP12 AND PUSH1 0x20 DUP6 ADD MSTORE POP DUP9 PUSH1 0x40 DUP5 ADD MSTORE DUP8 PUSH1 0x60 DUP5 ADD MSTORE DUP7 PUSH1 0x80 DUP5 ADD MSTORE DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP1 PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x4ACD DUP2 DUP5 ADD DUP7 PUSH2 0x462A JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x4ADF DUP2 DUP7 PUSH2 0x462A JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4B32 JUMPI PUSH2 0x4B1C DUP4 DUP6 MLOAD PUSH2 0x4715 JUMP JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x60 SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4B09 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4B86 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x462A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x686 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x462A JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x689 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x462A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F36355F52455155495245440000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54414B455200000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x4F524445525F4F56455246494C4C000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x41535345545F50524F58595F414C52454144595F455849535453000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x5349474E41545552455F554E535550504F525445440000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4F524445525F5349474E4154555245000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4D414B455200000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54585F484153480000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F5349474E4154555245000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x524F554E44494E475F4552524F52000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4641494C45445F455845435554494F4E00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH32 0x54414B45525F4F56455250415900000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54414B45525F414D4F554E54000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x41535345545F50524F58595F444F45535F4E4F545F4558495354000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F5448414E5F5A45524F5F4C454E4754485F52455155495245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x5349474E41545552455F494C4C4547414C000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F305F52455155495245440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F4E45575F4F524445525F45504F4348000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F475245415445525F5448414E5F335F52455155495245440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x434F4D504C4554455F46494C4C5F4641494C4544000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F46494C4C5F50524943450000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH32 0x5245454E5452414E43595F494C4C4547414C0000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x13 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F434F4E54524143545F4F574E455200000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F32305F4C454E4754485F5245 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F524445525F554E46494C4C41424C4500000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F53454E444552000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E454741544956455F5350524541445F52455155495245440000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH32 0x494E56414C49445F54585F5349474E4154555245000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C454E4754485F305F5245515549524544000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xFD9 DUP3 DUP5 PUSH2 0x46EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x53CC DUP3 DUP5 MLOAD PUSH2 0x46EF JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x53DE PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x46EF JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x100 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xFD9 DUP3 DUP5 PUSH2 0x4715 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x541D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x543C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5461 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5449 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x281E JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x237D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x237D JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0xef 0x5f 0xf8 PUSH3 0x95EC45 0x28 PUSH16 0x9F52D461489D3E10EB0581BB148D6BBB EXTCODECOPY 0xd1 0x47 SWAP12 0xe1 GT SWAP10 PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
                "sourceMap": "706:5376:29:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;706:5376:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4593:261;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5674:406;;;;;;;;;:::i;:::-;;4083:270;;;;;;;;;:::i;:::-;;;;;;;;1423:42:6;;;;;;;;;:::i;4279:647:10:-;;;;;;;;;:::i;:::-;;;;;;;;1513:42:6;;;;;;;;;:::i;1591:454:8:-;;;;;;;;;:::i;2016:2891:7:-;;;;;;;;;:::i;:::-;;;;;;;;2285:1515:10;;;;;;;;;:::i;899:47:5:-;;;;;;;;;:::i;:::-;;;;;;;;15893:260:10;;;;;;;;;:::i;5406:659::-;;;;;;;;;:::i;2164:1079:6:-;;;;;;;;;:::i;6624:632:10:-;;;;;;;;;:::i;1941:154:5:-;;;;;;;;;:::i;1038:45:9:-;;;;;;;;;:::i;1503:395:10:-;;;;;;;;;:::i;1345:275:29:-;;;;;;;;;:::i;5094:259::-;;;;;;;;;:::i;2282:412:8:-;;;;;;;;;:::i;1185:71::-;;;;;;;;;:::i;7644:1507:10:-;;;;;;;;;:::i;16347:419::-;;;;;;;;;:::i;:::-;;;;;;;;1065:63:8;;;;;;;;;:::i;102:20:42:-;;;:::i;3066:4848:8:-;;;;;;;;;:::i;13859:1899:10:-;;;;;;;;;:::i;3560:374:6:-;;;;;;;;;:::i;3562:272:29:-;;;;;;;;;:::i;1497:1509:9:-;;;;;;;;;:::i;1155:596:5:-;;;;;;;;;:::i;4563:2261:6:-;;;;;;;;;:::i;:::-;;;;;;;;4165:124;;;;;;;;;:::i;1773:67::-;;;;;;;;;:::i;1779:27:35:-;;;:::i;:::-;;;;;;;;9608:1488:10;;;;;;;;;:::i;2456:280:29:-;;;;;;;;;:::i;3035:278::-;;;;;;;;;:::i;1891:266::-;;;;;;;;;:::i;1301:33:36:-;;;:::i;11484:1914:10:-;;;;;;;;;:::i;1135:36:9:-;;;:::i;344:167:42:-;;;;;;;;;:::i;1147:40:4:-;;;:::i;4593:261:29:-;4760:12;4795:52;4816:9;4827:11;4840:6;4795:20;:52::i;:::-;4788:59;;4593:261;;;;;;:::o;5674:406::-;5912:161;5943:5;5962:12;5988:9;6011:27;6052:11;5912:17;:161::i;:::-;5674:406;;;;;:::o;4083:270::-;4250:21;4294:52;4315:9;4326:11;4339:6;4294:20;:52::i;1423:42:6:-;;;;;;;;;;;;;:::o;4279:647:10:-;4486:35;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;4560::10;;;4583:304;4608:12;4603:1;:17;4583:304;;4641:36;;:::i;:::-;4680:131;4715:6;4722:1;4715:9;;;;;;;;;;;;;;4742:21;4764:1;4742:24;;;;;;;;;;;;;;4784:10;4795:1;4784:13;;;;;;;;;;;;;;4680:17;:131::i;:::-;4641:170;;4825:51;4840:16;4858:17;4825:14;:51::i;:::-;-1:-1:-1;4622:3:10;;4583:304;;;-1:-1:-1;;1165:5:43;1156:14;;;;;;4279:647:10;;-1:-1:-1;;;4279:647:10:o;1513:42:6:-;;;;;;;;;;;;;;;:::o;1591:454:8:-;1736:27;;;1753:10;1736:27;1732:260;;1804:126;1842:4;1868:13;1903:9;;1804:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1804:16:8;;-1:-1:-1;;;1804:126:8:i;:::-;1779:202;;;;;;;;;;;;;;-1:-1:-1;;2001:15:8;;;;:9;:15;;;;;;;;:30;;;;;;;;;;;:37;;;;2034:4;2001:37;;;1591:454::o;2016:2891:7:-;2252:59;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;2581:24:7;;;;;2553:25;;;;:52;;;;2643:24;;;2615:25;;;:52;2717:39;;:::i;:::-;2759:23;2772:9;2759:12;:23::i;:::-;2717:65;;2792:40;;:::i;:::-;2835:24;2848:10;2835:12;:24::i;:::-;2792:67;;2901:20;2924:26;:24;:26::i;:::-;2901:49;;3021:132;3054:9;3077:13;3104:12;3130:13;3021:19;:132::i;:::-;3163:135;3196:10;3220:14;3248:12;3274:14;3163:19;:135::i;:::-;3308:39;3325:9;3336:10;3308:16;:39::i;:::-;3424:195;3465:9;3488:10;3512:13;:41;;;3567:14;:42;;;3424:27;:195::i;:::-;3743:23;;:46;;;;3863;;3403:216;;-1:-1:-1;3664:255:7;;3693:9;;3716:13;;3743:46;;3664:15;:255::i;:::-;4010:24;;;;;:47;;;;4132;;3929:260;;3958:10;;3982:14;;4010:47;;;3929:15;:260::i;:::-;4241:205;4272:9;4295:12;4321:13;:23;;;4358:13;:41;;;4413:18;:23;;;4241:17;:205::i;:::-;4456:209;4487:10;4511:12;4537:14;:24;;;4575:14;:42;;;4631:18;:24;;;4456:17;:209::i;:::-;4730:134;4763:9;4786:10;4810:12;4836:18;4730:19;:134::i;:::-;-1:-1:-1;;;1165:5:43;1156:14;;;;;;2016:2891:7;;-1:-1:-1;;;;2016:2891:7:o;2285:1515:10:-;2456:30;;:::i;:::-;2549;2582:104;2614:5;2633:20;2667:9;2582:18;:104::i;:::-;2549:137;;3262:3;3183:17;3118;3112:24;3016:2;2997:17;2993:26;2908:7;2837:3;2807:532;3355:7;3352:2;;;3407:17;3401:24;3388:11;3381:45;3501:2;3482:17;3478:26;3472:33;3467:2;3454:11;3450:20;3443:63;3581:2;3562:17;3558:26;3552:33;3547:2;3534:11;3530:20;3523:63;3661:2;3642:17;3638:26;3632:33;3627:2;3614:11;3610:20;3603:63;3352:2;-1:-1:-1;;2285:1515:10;;;;;:::o;899:47:5:-;;;;;;;;;;;;;;;:::o;15893:260:10:-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;16025::10;;;16048:99;16073:12;16068:1;:17;16048:99;;16106:30;16126:6;16133:1;16126:9;;;;;;;;;;;;;;16106:19;:30::i;:::-;16087:3;;16048:99;;;-1:-1:-1;;1165:5:43;1156:14;;;;;;-1:-1:-1;15893:260:10:o;5406:659::-;5619:35;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;5693::10;;;5716:310;5741:12;5736:1;:17;5716:310;;5774:36;;:::i;:::-;5813:137;5854:6;5861:1;5854:9;;;;;;;;;;;;;;5881:21;5903:1;5881:24;;;;;;;;;;;;;;5923:10;5934:1;5923:13;;;;;;;;;;;;;;5813:23;:137::i;:::-;5774:176;;5964:51;5979:16;5997:17;5964:14;:51::i;:::-;-1:-1:-1;5755:3:10;;5716:310;;2164:1079:6;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;2291:26:6;:24;:26::i;:::-;2268:49;-1:-1:-1;2575:21:6;2599:26;;;2615:10;2599:26;:52;;2641:10;2599:52;;;2636:1;2599:52;2819:24;;;;2739:21;2819:24;;;:10;:24;;;;;;;;:39;;;;;;;;;;2575:76;;-1:-1:-1;2782:1:6;2763:20;;;2947:29;;;2926:100;;;;;;;;;;;;;;3066:24;;;;;;;;:10;:24;;;;;;;;:39;;;;;;;;;;;;;;:55;;;3136:100;;;;;3108:13;;3136:100;;;;;;;;;;-1:-1:-1;;1165:5:43;1156:14;;;;;;-1:-1:-1;;;2164:1079:6:o;6624:632:10:-;6817:35;;:::i;:::-;6891:13;;6868:20;6914:303;6939:12;6934:1;:17;6914:303;;6972:36;;:::i;:::-;7011:130;7045:6;7052:1;7045:9;;;;;;;;;;;;;;7072:21;7094:1;7072:24;;;;;;;;;;;;;;7114:10;7125:1;7114:13;;;;;;;;;;;;;;7011:16;:130::i;:::-;6972:169;;7155:51;7170:16;7188:17;7155:14;:51::i;:::-;-1:-1:-1;6953:3:10;;6914:303;;1941:154:5;2062:26;;;2032:7;2062:26;;;:12;:26;;;;;;;;1941:154;;;;:::o;1038:45:9:-;;;;;;;;;;;;;;;:::o;1503:395:10:-;1694:30;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;1754:109:10;1791:5;1810:20;1844:9;1754:23;:109::i;:::-;1165:5:43;1156:14;;;;;;1740:123:10;1503:395;-1:-1:-1;;;;1503:395:10:o;1345:275:29:-;1495:18;;:::i;:::-;1529:51;1544:16;1562:17;1529:14;:51::i;:::-;-1:-1:-1;1597:16:29;1345:275;;;;;:::o;5094:259::-;5260:12;5295:51;5315:9;5326:11;5339:6;5295:19;:51::i;2282:412:8:-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;2460:26:8;:24;:26::i;:::-;2496:32;;;;;;;;:17;:32;;;;;;;;:50;;;;;;;;;;;;;;:61;;;;;;;;;;2572:115;2496:32;;-1:-1:-1;2496:50:8;;2572:115;;;;2496:61;;2572:115;;;;;;;;;;-1:-1:-1;;1165:5:43;1156:14;;;;;;-1:-1:-1;2282:412:8:o;1185:71::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7644:1507:10:-;7842:35;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;7923:9:10;;7893:27;;7923:6;;:9;;;;;;;;;;;;;;:24;;;7985:13;;7923:24;;-1:-1:-1;7962:20:10;8008:1104;8033:12;8028:1;:17;8008:1104;;8302:14;8275:6;8282:1;8275:9;;;;;;;;;;;;;;:24;;:41;;;;8399:37;8439:70;8447:20;8469:16;:39;;;8439:7;:70::i;:::-;8399:110;;8590:36;;:::i;:::-;8629:136;8664:6;8671:1;8664:9;;;;;;;;;;;;;;8691:29;8738:10;8749:1;8738:13;;;;;;;8629:136;8590:175;;8850:51;8865:16;8883:17;8850:14;:51::i;:::-;9042:20;8999:16;:39;;;:63;8995:107;;9082:5;;;;8995:107;-1:-1:-1;;8047:3:10;;8008:1104;;;-1:-1:-1;;;1165:5:43;1156:14;;;;;;7644:1507:10;;-1:-1:-1;;;7644:1507:10:o;16347:419::-;16447:27;16490:20;16513:6;:13;16490:36;;16536:38;16602:12;16577:38;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;16536:79:10;-1:-1:-1;16630:9:10;16625:108;16650:12;16645:1;:17;16625:108;;16699:23;16712:6;16719:1;16712:9;;;;;;;;;;;;;;16699:12;:23::i;:::-;16683:10;16694:1;16683:13;;;;;;;;;;;;;;;;;:39;16664:3;;16625:108;;;-1:-1:-1;16749:10:10;16347:419;-1:-1:-1;;;16347:419:10:o;1065:63:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;102:20:42:-;;;;;;:::o;3066:4848:8:-;3228:12;3296:1;3277:9;:16;:20;3256:97;;;;;;;;;;;;;;3418:22;3449:23;:9;:21;:23::i;:::-;3443:30;;;-1:-1:-1;3571:29:8;3546:55;;3525:123;;;;;;;;;;;;;;3659:27;3703:16;3689:31;;;;;;;;;;3659:61;-1:-1:-1;3780:7:8;;;;;4185:13;:38;;;;;;;;;4181:3383;;;4239:27;;;;;;;;;;;4181:3383;4548:21;4531:13;:38;;;;;;;;;4527:3037;;;4610:16;;:21;4585:97;;;;;;;;;;;;;;-1:-1:-1;4706:5:8;;-1:-1:-1;4725:14:8;;-1:-1:-1;;;;;4725:14:8;4527:3037;4812:20;4795:13;:37;;;;;;;;;4791:2773;;;4873:9;:16;4893:2;4873:22;4848:99;;;;;;;;;;;;;;4971:9;4981:1;4971:12;;;;;;;;;;;;;;;;;;4965:19;;;-1:-1:-1;5002:24:8;:9;5024:1;5002:24;:21;:24;:::i;:::-;4998:28;-1:-1:-1;5044:25:8;:9;5066:2;5044:25;:21;:25;:::i;:::-;5040:29;;5095:102;5122:4;5144:1;5163;5182;5095:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;5095:102:8;;;;;5221:26;;;;;;;;-1:-1:-1;5261:14:8;;-1:-1:-1;;;;;;;5261:14:8;4791:2773;5352:21;5335:13;:38;;;;;;;;;5331:2233;;;5414:9;:16;5434:2;5414:22;5389:99;;;;;;;;;;;;;;5512:9;5522:1;5512:12;;;;;;;;;;;;;;;;;;5506:19;;;-1:-1:-1;5543:24:8;:9;5565:1;5543:24;:21;:24;:::i;:::-;5539:28;-1:-1:-1;5585:25:8;:9;5607:2;5585:25;:21;:25;:::i;:::-;5581:29;;5636:225;5767:4;5673:116;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5673:116:8;;;5663:127;;;;;;5808:1;5827;5846;5636:225;;;;;;;;;;;;;;;;;;;5331:2233;6109:20;6092:13;:37;;;;;;;;;6088:1476;;;6155:116;6195:4;6217:13;6248:9;6155:22;:116::i;:::-;6145:126;-1:-1:-1;6285:14:8;;-1:-1:-1;;;;;;6285:14:8;6088:1476;6798:23;6781:13;:40;;;;;;;;;6777:787;;;6899:24;6926:26;:9;:24;:26::i;:::-;7037:32;;;;;;;;:17;:32;;;;;;;;:50;;;;;;;;;;6899:53;;-1:-1:-1;7037:50:8;;7032:102;;7114:5;7107:12;;;;;;;;;;;7032:102;7157:153;7200:16;7234:4;7256:13;7287:9;7157:25;:153::i;:::-;7147:163;-1:-1:-1;7324:14:8;;-1:-1:-1;;;;;;;7324:14:8;6777:787;7446:23;7429:13;:40;;;;;;;;;7425:139;;;-1:-1:-1;;;7495:15:8;;;;:9;:15;;;;;;;;:30;;;;;;;;;;;;;;-1:-1:-1;7539:14:8;;-1:-1:-1;;;7539:14:8;7425:139;7876:31;;;;;;;;;;;13859:1899:10;14042:35;;:::i;:::-;14093:27;14123:6;14130:1;14123:9;;;;;;;;;;;;;;;;;;:24;;;14181:13;;14123:24;;-1:-1:-1;14158:20:10;14204:1515;14229:12;14224:1;:17;14204:1515;;14503:14;14476:6;14483:1;14476:9;;;;;;;;;;;;;;:24;;:41;;;;14599:37;14639:70;14647:20;14669:16;:39;;;14639:7;:70::i;:::-;14599:110;;14905:37;14945:170;14984:6;14991:1;14984:9;;;;;;;;;;;;;;:26;;;15028:6;15035:1;15028:9;;;;;;;;;;;;;;:26;;;15072:29;14945:21;:170::i;:::-;14905:210;;15196:36;;:::i;:::-;15235:135;15269:6;15276:1;15269:9;;;;;;;;;;;;;;15296:29;15343:10;15354:1;15343:13;;;;;;;15235:135;15196:174;;15455:51;15470:16;15488:17;15455:14;:51::i;:::-;15606:39;;:63;-1:-1:-1;15602:107:10;;15689:5;;;;;15602:107;-1:-1:-1;;;14243:3:10;;14204:1515;;;-1:-1:-1;;;13859:1899:10;;;;;:::o;3560:374:6:-;3736:30;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;3796:103:6;3827:5;3846:20;3880:9;3796:17;:103::i;3562:272:29:-;3730:21;3774:53;3796:9;3807:11;3820:6;3774:21;:53::i;1497:1509:9:-;1729:21;;:35;:21;:35;1708:100;;;;;;;;;;;;;;1819:23;1845:113;1863:94;1898:4;1916:13;1943:4;;1863:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1863:21:9;;-1:-1:-1;;;1863:94:9:i;:::-;1845:17;:113::i;:::-;2045:29;;;;:12;:29;;;;;;1819:139;;-1:-1:-1;2045:29:9;;2044:30;2023:92;;;;;;;;;;;;;;2201:27;;;2218:10;2201:27;2197:410;;2303:137;2341:15;2378:13;2413:9;;2303:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2303:16:9;;-1:-1:-1;;;2303:137:9:i;:::-;2278:216;;;;;;;;;;;;;;2559:21;:37;;;;;;;;;;2197:410;2648:29;;;;:12;:29;;;;;;:36;;;;2680:4;2648:36;;;2712:32;2720:4;;2712:32;;2739:4;;;;2712:32;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2694:50:9;;;2775:7;2754:70;;;;;;;;;;;;;;2912:27;;;2929:10;2912:27;2908:92;;2955:21;:34;;;;;;2908:92;1497:1509;;;;;;;;:::o;1155:596:5:-;270:5:42;;;;256:10;:19;235:85;;;;;;;;;;;;;;1314:19:5;1348:10;1336:34;;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1336:36:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1336:36:5;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1336:36:5;;;;;;;;;1410:26;;;1382:25;1410:26;;;:12;:26;;;;;;1314:58;;-1:-1:-1;1410:26:5;;1467:31;;1446:104;;;;;;;;;;;;;;1610:26;;;;;;;:12;:26;;;;;;;:39;;;;;;;;;;1664:80;;;;;1610:26;;:39;;1664:80;;;;;;;;;;330:1:42;;1155:596:5;:::o;4563:2261:6:-;4650:26;;:::i;:::-;4748:19;4761:5;4748:12;:19::i;:::-;4726;;;;:41;;;4849:27;;;;:6;:27;;;;;;;;4809:37;;;:67;5178:22;;;;5174:157;;5251:38;5245:45;5221:69;;;;5304:16;;5174:157;5644:22;;;;5640:157;;5717:38;5711:45;;5640:157;5891:5;:22;;;5850:9;:37;;;:63;5846:179;;5959:24;5953:31;;5846:179;6149:5;:27;;;6130:15;:46;6126:157;;6222:19;6216:26;;6126:157;6352:19;;;;;6342:30;;;;:9;:30;;;;;;;;;6338:143;;;6418:21;6412:28;;6338:143;6548:10;;;;6505:18;;6494:30;;;;;;;;:10;:30;;;;;;;;6525:19;;;;6494:51;;;;;;;;;;:64;6490:177;;;6604:21;6598:28;;6490:177;6770:20;6740:51;;;4563:2261;-1:-1:-1;4563:2261:6:o;4165:124::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;4256:26:6;4276:5;4256:19;:26::i;:::-;-1:-1:-1;1165:5:43;1156:14;;;;;;4165:124:6:o;1773:67::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;1779:27:35:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9608:1488:10:-;9792:35;;:::i;:::-;9843:27;9873:6;9880:1;9873:9;;;;;;;;;;;;;;;;;;:24;;;9931:13;;9873:24;;-1:-1:-1;9908:20:10;9954:1103;9979:12;9974:1;:17;9954:1103;;10248:14;10221:6;10228:1;10221:9;;;;;;;;;;;;;;:24;;:41;;;;10345:37;10385:70;10393:20;10415:16;:39;;;10385:7;:70::i;:::-;10345:110;;10536:36;;:::i;:::-;10575:135;10609:6;10616:1;10609:9;;;;;;;;;;;;;;10636:29;10683:10;10694:1;10683:13;;;;;;;10575:135;10536:174;;10795:51;10810:16;10828:17;10795:14;:51::i;:::-;10987:20;10944:16;:39;;;:63;10940:107;;11027:5;;;;10940:107;-1:-1:-1;;9993:3:10;;9954:1103;;2456:280:29;2628:21;2672:57;2698:9;2709:11;2722:6;2672:25;:57::i;3035:278::-;3206:21;3250:56;3275:9;3286:11;3299:6;3250:24;:56::i;1891:266::-;2046:30;;:::i;:::-;2099:51;2120:5;2127:22;2099:20;:51::i;1301:33:36:-;;;;:::o;11484:1914:10:-;11681:35;;:::i;:::-;939:6:43;;;;938:7;917:72;;;;;;;;;;;;;;1043:6;:13;;;;1052:4;1043:13;;;11762:9:10;;11732:27;;11762:6;;:9;;;;;;;;;;;;;;:24;;;11820:13;;11762:24;;-1:-1:-1;11797:20:10;11843:1516;11868:12;11863:1;:17;11843:1516;;12142:14;12115:6;12122:1;12115:9;;;;;;;;;;;;;;:24;;:41;;;;12238:37;12278:70;12286:20;12308:16;:39;;;12278:7;:70::i;:::-;12238:110;;12544:37;12584:170;12623:6;12630:1;12623:9;;;;;;;12584:170;12544:210;;12835:36;;:::i;:::-;12874:136;12909:6;12916:1;12909:9;;;;;;;;;;;;;;12936:29;12983:10;12994:1;12983:13;;;;;;;12874:136;12835:175;;13095:51;13110:16;13128:17;13095:14;:51::i;:::-;13246:39;;:63;-1:-1:-1;13242:107:10;;13329:5;;;;;13242:107;-1:-1:-1;;;11882:3:10;;11843:1516;;1135:36:9;;;;;;:::o;344:167:42:-;270:5;;;;256:10;:19;235:85;;;;;;;;;;;;;;440:22;;;;436:69;;478:5;:16;;;;;;;;;;436:69;344:167;:::o;1147:40:4:-;;;;;;;;;;;;;;;;;;;:::o;4789:1869:39:-;4952:12;5015:1;5001:11;:15;4980:78;;;;;;;;;;;;;;5878:11;;;:29;;-1:-1:-1;5893:14:39;;5878:29;5874:72;;;-1:-1:-1;5930:5:39;5923:12;;5874:72;6449:17;6532:11;6469:84;;;;;6509:9;6489:6;6469:84;6449:104;;6601:26;6609:9;6620:6;6601:7;:26::i;:::-;6573:24;6581:4;6587:9;6573:7;:24::i;:::-;:54;;;4789:1869;-1:-1:-1;;;;;4789:1869:39:o;9530:792:6:-;9808:72;9816:27;9845:11;:34;;;9808:7;:72::i;:::-;9788:6;:17;9795:9;9788:17;;;;;;;;;;;:92;;;;10228:9;9967:5;:25;;;9917:398;;9935:5;:18;;;9917:398;;;10006:12;10032:10;10056:11;:34;;;10104:11;:34;;;10152:11;:24;;;10190:11;:24;;;10251:5;:20;;;10285:5;:20;;;9917:398;;;;;;;;;;;;;;;;;;;;;;9530:792;;;;;:::o;3835:691:39:-;3998:21;4070:1;4056:11;:15;4035:78;;;;;;;;;;;;;;4327:162;4348:106;4373:26;4381:9;4392:6;4373:7;:26::i;:::-;4417:23;4425:11;4438:1;4417:7;:23::i;:::-;4348:7;:106::i;:::-;4468:11;4327:7;:162::i;7141:1583:6:-;7306:30;;:::i;:::-;7380:26;;:::i;:::-;7409:19;7422:5;7409:12;:19::i;:::-;7380:48;;7470:20;7493:26;:24;:26::i;:::-;7470:49;;7592:120;7625:5;7644:9;7667:12;7693:9;7592:19;:120::i;:::-;7775:33;7811:70;7819:5;:22;;;7843:9;:37;;;7811:7;:70::i;:::-;7775:106;;7891:30;7924:55;7931:20;7953:25;7924:6;:55::i;:::-;7891:88;;8018:185;8047:5;8066:9;8089:20;8123:22;8159:11;:34;;;8018:15;:185::i;:::-;8273:51;8294:5;8301:22;8273:20;:51::i;:::-;8259:65;;8377:181;8408:5;8427:12;8453:9;:19;;;8486:9;:37;;;8537:11;8377:17;:181::i;:::-;8597:91;8622:5;8641:12;8667:11;8597;:91::i;:::-;-1:-1:-1;;;;7141:1583:6;;;;;:::o;1781:648:38:-;1974:39;;2015:40;;1966:90;;1974:39;1966:7;:90::i;:::-;1924:132;;2116:39;;;;;2157:40;;;;2108:90;;2116:39;2108:7;:90::i;:::-;2066:39;;;:132;2248:29;;;;;2279:30;;;;2240:70;;2248:29;2240:7;:70::i;:::-;2208:29;;;:102;2360:29;;;;;2391:30;;;;2352:70;;2360:29;2352:7;:70::i;:::-;2320:29;;;;:102;;;;-1:-1:-1;1781:648:38:o;4965:307:9:-;5104:21;;5048:7;;5104:21;;5048:7;5160:36;;:74;;5212:22;5160:74;;;5199:10;5160:74;5135:99;-1:-1:-1;;;4965:307:9;:::o;11367:1268:6:-;11659:21;;:52;;11690:20;11659:52;11638:115;;;;;;;;;;;;;;11833:19;;;;:33;;;11829:170;;11907:19;;;;:33;;11930:10;11907:33;11882:106;;;;;;;;;;;;;;12077:18;;;;:32;;;12073:169;;12172:12;12150:34;;:5;:18;;;:34;;;12125:106;;;;;;;;;;;;;;12332:37;;;;12328:301;;12415:146;12453:9;:19;;;12494:5;:18;;;12534:9;12415:16;:146::i;:::-;12390:228;;;;;;;;;;;;;;11367:1268;;;;:::o;5077:1075:7:-;6031:64;6039:9;:26;;;6067:10;:27;;;6031:7;:64::i;:::-;5951;5959:9;:26;;;5987:10;:27;;;5951:7;:64::i;:::-;:144;;5930:215;;;;;;;;;;;;;;5077:1075;;:::o;6888:4784::-;7160:59;;:::i;:::-;7331:37;7371:68;7379:9;:26;;;7407:31;7371:7;:68::i;:::-;7331:108;;7449:37;7489:158;7528:9;:26;;;7568:9;:26;;;7608:29;7489:25;:158::i;:::-;7449:198;;7657:38;7698:70;7706:10;:27;;;7735:32;7698:7;:70::i;:::-;7657:111;;7778:38;7819:161;7858:10;:27;;;7899:10;:27;;;7940:30;7819:25;:161::i;:::-;7778:202;;8771:30;8738:29;:63;8734:1672;;8868:24;;;;;;:80;;;8962:24;;:47;;:80;;;9105:24;:47;9056:23;;:46;;:96;9445:26;;;;9489;;;;9533:23;;:46;;;;9402:191;;9489:26;9402:25;:191::i;:::-;9353:23;;:240;8734:1672;;;9674:23;;:78;;;9766:23;;:46;;;;:78;;;9908:23;;:46;;;9858:24;;;;;:96;;;;10244:27;;;;10289;;;;10334:24;;:47;10202:193;;10289:27;10202:24;:193::i;:::-;10152:24;;;;;:47;:243;8734:1672;10528:23;;:46;10588:24;;;;;:47;;10507:138;;10528:46;10507:7;:138::i;:::-;10459:45;;;:186;10773:23;;:46;10833:26;;;;10873:18;;;;10734:167;;10773:46;10833:26;10734:25;:167::i;:::-;10695:23;;:36;;:206;10989:23;;:46;;;11049:26;;;;11089:18;;;;10950:167;;10989:46;11049:26;10950:25;:167::i;:::-;10911:23;;:36;;:206;11247:24;;;;:47;11308:27;;;;11349:19;;;;11208:170;;11247:47;11308:27;11208:25;:170::i;:::-;11168:18;:24;;;:37;;:210;;;;;11428:170;11467:18;:24;;;:47;;;11528:10;:27;;;11569:10;:19;;;11428:25;:170::i;:::-;11388:24;;;;:37;;:210;-1:-1:-1;;;;6888:4784:7;;;;;;:::o;13073:2440:6:-;13468:25;13447:92;;;;;;;;;;;;;;13793:20;13767:22;:46;;13746:106;;;;;;;;;;;;;;14134:5;:22;;;14060:70;14068:9;:37;;;14107:22;14060:7;:70::i;:::-;:96;;14039:157;;;;;;;;;;;;;;15407:55;15415:5;:22;;;15439;15407:7;:55::i;:::-;15323;15331:22;15355:5;:22;;;15323:7;:55::i;:::-;:139;;15302:204;;;;;;;;;;;;;12118:2233:7;12393:14;12365:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:25;;:42;;12393:14;;12365:42;;12393:14;12365:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12451:202;12485:9;:24;;;12523:9;:22;;;12559:10;:23;;;12596:18;:24;;;:47;;;12451:20;:202::i;:::-;12697:25;;;;12736:23;;12773:22;;12809:23;;:46;;;12663:202;;12697:25;12736:23;12773:22;12663:20;:202::i;:::-;12875:189;12909:9;:24;;;12947:9;:22;;;12983:12;13009:18;:45;;;12875:20;:189::i;:::-;13097:185;13131:12;13157:9;:22;;;13193:9;:29;;;13236:18;:23;;;:36;;;13097:20;:185::i;:::-;13292:188;13326:12;13352:10;:23;;;13389:10;:30;;;13433:18;:24;;;:37;;;13292:20;:188::i;:::-;13550:10;:30;;;13517:63;;:9;:29;;;:63;;;13513:832;;;13596:301;13634:12;13664;13694:9;:29;;;13741:142;13770:18;:23;;;:36;;;13828:18;:24;;;:37;;;13741:7;:142::i;:::-;13596:20;:301::i;:::-;13513:832;;;13928:195;13966:12;13996;14026:9;:29;;;14073:18;:23;;;:36;;;13928:20;:195::i;:::-;14137:197;14175:12;14205;14235:10;:30;;;14283:18;:24;;;:37;;;14137:20;:197::i;1011:10099:34:-;5031:4;5025:11;;5321:66;5314:4;5291:28;;;5284:104;;;;1199:30;5445:4;5422:28;;6444:59;;;6770:19;;5736:26;;;6750:40;;;6883:23;;;6877:30;6853:22;;;6846:62;6979:23;;;6973:30;6949:22;;;6942:62;7082:23;;;7076:30;7052:22;;;7045:62;7197:4;7179:23;;7173:30;7149:22;;;7142:62;7297:4;7279:23;;7273:30;7249:22;;;7242:62;7397:4;7379:23;;7373:30;7349:22;;;7342:62;7495:4;7477:23;;7471:30;7447:22;;;7440:62;7594:5;7576:24;;7570:31;7545:23;;;7538:64;7699:5;7681:24;;7675:31;7650:23;;;7643:64;7787:5;7769:24;;7763:31;;7738:23;;;7731:64;;;7895:5;7877:24;;7871:31;7846:23;;;7839:64;7979:5;8106:74;;8268:24;8340:19;;7962:23;;;8544:34;;;5025:11;;8606:22;;;;5422:28;;6536:27;;;;5736:26;;8388:23;;;8340:19;8464:4;8445:24;;8441:35;6190:1;8698:237;8721:13;8718:1;8715:20;8698:237;;;8791:19;;8771:40;;8860:4;8843:22;;;;8898:23;;;;8749:1;8742:9;8698:237;;;-1:-1:-1;;;;9045:31:34;;;9029:13;9010:33;;;9003:74;9171:17;;9165:24;9237:19;;9441:34;;;9037:4;9503:22;;;;9610:1;;9285:23;;;9237:19;9361:4;9342:24;;9338:35;9596:237;9619:13;9616:1;9613:20;9596:237;;;9695:12;9689:19;9676:11;9669:40;9758:4;9745:11;9741:22;9726:37;;9814:4;9800:12;9796:23;9780:39;;9647:1;9644;9640:9;9635:14;;9596:237;;;-1:-1:-1;;;9902:46:34;;;10133:33;;;10003:4;9981:27;;;10108:59;;;10281:19;;10472:34;;;10534:22;;;;-1:-1:-1;;9981:27:34;;10329:23;;;;10281:19;10405:4;10386:24;;10382:35;10613:237;10636:13;10633:1;10630:20;10613:237;;;10712:12;10706:19;10693:11;10686:40;10775:4;10762:11;10758:22;10743:37;;10831:4;10817:12;10813:23;10797:39;;10664:1;10661;10657:9;10652:14;;10613:237;;;-1:-1:-1;;;10928:46:34;;;;;10902:73;;-1:-1:-1;;;11041:4:34;11034:25;1011:10099;;;;;:::o;8955:332:6:-;9073:26;;:::i;:::-;9102:19;9115:5;9102:12;:19::i;:::-;9073:48;;9160:35;9178:5;9185:9;9160:17;:35::i;:::-;9232:48;9253:5;9260:9;:19;;;9232:20;:48::i;17068:513:10:-;17248:30;;:::i;:::-;17308:103;17339:5;17358:20;17392:9;17308:17;:103::i;:::-;17294:117;;17480:20;17442:11;:34;;;:58;17421:125;;;;;;;;;;;;;6919:918:39;7081:12;7144:1;7130:11;:15;7109:78;;;;;;;;;;;;;;7260:11;;;:29;;-1:-1:-1;7275:14:39;;7260:29;7256:257;;;-1:-1:-1;7497:5:39;7490:12;;7256:257;7561:17;7644:11;7581:84;;;;;7621:9;7601:6;7581:84;7561:104;;7721:11;7687:31;7695:11;7708:9;7687:7;:31::i;:::-;:45;;;;;;7675:57;;7780:26;7788:9;7799:6;7780:7;:26::i;502:208:44:-;588:7;637:1;632;:6;;611:70;;;;;;;;;;;;;;-1:-1:-1;698:5:44;;;502:208::o;8315:448:41:-;8399:13;8460:1;8449;:8;:12;8428:92;;;;;;;;;;;;;;8568:1;8581;8570;:8;:12;8568:15;;;;;;;;;;;;8682:8;;8678:16;;8707:17;;;-1:-1:-1;8568:15:41;;;;;;;8315:448::o;13292:490::-;13413:14;13476:5;13484:2;13476:10;13464:1;:8;:22;;13443:107;;;;;;;;;;;;;;-1:-1:-1;13729:13:41;13631:2;13729:13;13723:20;;13292:490::o;8320:1489:8:-;8542:135;;8490:12;;8518:21;;8578:48;;8542:135;;8640:4;;8658:9;;8542:135;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;8542:135:8;;;49:4:-1;25:18;;;61:17;;8542:135:8;182:15:-1;8542:135:8;;;;179:29:-1;;;;160:49;;8978:15:8;;8542:135;;-1:-1:-1;49:4;25:18;;;8851:13:8;8798:3;8770:380;9171:7;9191:422;;;;9631:1;9626:143;;;;9164:605;;9191:422;9281:66;9278:1;9271:77;9376:66;9372:2;9365:78;9471:66;9467:2;9460:78;9566:1;9562:2;9555:13;9595:3;9592:1;9585:14;9626:143;-1:-1:-1;;9741:14:8;;8320:1489;-1:-1:-1;;;;;8320:1489:8:o;8958:482:41:-;9045:14;9108:2;9096:1;:8;:14;;9075:99;;;;;;;;;;;;;;9226:29;9238:1;9252:2;9241:1;:8;:13;9226:11;:29::i;:::-;9358:8;;9354:17;;9384;;;-1:-1:-1;9217:38:41;8958:482::o;10248:1568:8:-;10507:165;;10455:12;;10483:21;;10543:51;;10507:165;;10608:4;;10554:13;;10653:9;;10507:165;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;10507:165:8;;;49:4:-1;25:18;;;61:17;;10507:165:8;182:15:-1;10507:165:8;;;;179:29:-1;;;;160:49;;10979:15:8;;10507:165;;-1:-1:-1;49:4;25:18;;;10847:16:8;10793:3;10765:389;11175:7;11195:425;;;;11638:1;11633:143;;;;11168:608;;11195:425;11288:66;11285:1;11278:77;11383:66;11379:2;11372:78;11478:66;11474:2;11467:78;11573:1;11569:2;11562:13;11602:3;11599:1;11592:14;11633:143;11754:7;11748:14;11737:25;;11168:608;-1:-1:-1;;;;10248:1568:8;;;;;;:::o;3133:425:39:-;3297:21;3369:1;3355:11;:15;3334:78;;;;;;;;;;;;;;3439:82;3460:26;3468:9;3479:6;3460:7;:26::i;3299:1222:9:-;3463:14;3493:18;828:146:25;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;828:146:25;;;818:157;;49:4:-1;818:157:25;;;;3580:15:9;;;;;;3958:26;;;4084:15;;;4077:29;;;4229:42;4210:62;;4193:15;;;4186:87;;;;4323:2;4311:15;;4304:33;4478:3;4460:22;;;-1:-1:-1;;3299:1222:9;;;;;:::o;1834:924:36:-;1985:18;;;2297:2;2291:9;2329:66;2314:82;;2434:14;;;2427:40;2564:2;2552:15;;2545:35;;;;2716:2;2698:21;;;1834:924::o;4211:202:40:-;4300:17;4345:35;4363:16;4373:5;4363:9;:16::i;1022:624:39:-;1190:21;1262:1;1248:11;:15;1227:78;;;;;;;;;;;;;;1338:114;1376:9;1403:11;1432:6;1338:20;:114::i;:::-;1337:115;1316:176;;;;;;;;;;;;;1969:889;2136:21;2208:1;2194:11;:15;2173:78;;;;;;;;;;;;;;2284:113;2321:9;2348:11;2377:6;2284:19;:113::i;:::-;2283:114;2262:175;;;;;;;;;;;;;16797:887:6;16948:30;;:::i;:::-;17043:34;;;:59;;;17224:22;;;;17260;;;;17149:143;;17080:22;;17149:25;:143::i;:::-;17112:180;;;17416:22;;;;17452:14;;;;17329:147;;17112:180;17416:22;17329:25;:147::i;:::-;17302:24;;;:174;17588:22;;;;17624:14;;;;17513:135;;17552:22;;17513:25;:135::i;:::-;17486:24;;;:162;16797:887;;;;:::o;51:288:44:-;137:7;164:6;160:45;;-1:-1:-1;193:1:44;186:8;;160:45;226:5;;;230:1;226;:5;:1;262:5;;;;;:10;241:73;;;;;;;;;;;;;716:230;802:7;837:5;;;873:6;;;;852:69;;;;;;;;;;;;;345:151;431:7;454:9;470:1;466;:5;;;;;;;345:151;-1:-1:-1;;;;345:151:44:o;1371:135::-;1456:7;1490:1;1486;:5;:13;;1498:1;1486:13;;17994:932:6;18201:14;18173:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:25;;:42;;18201:14;;18173:42;;18201:14;18173:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18225:170;18259:5;:20;;;18293:5;:18;;;18325:12;18351:11;:34;;;18225:20;:170::i;:::-;18405;18439:5;:20;;;18473:12;18499:5;:18;;;18531:11;:34;;;18405:20;:170::i;:::-;18585:165;18619:12;18645:5;:18;;;18677:5;:25;;;18716:11;:24;;;18585:20;:165::i;:::-;18760:159;18794:12;18820;18846:5;:25;;;18885:11;:24;;;2410:5147:5;2646:1;2637:6;:10;:24;;;;;2659:2;2651:10;;:4;:10;;;;2637:24;2633:4918;;;2769:1;2750:9;:16;:20;2725:109;;;;;;;;;;;;;;3081:2;3066:18;;;3039:46;3107:66;3035:156;2959:19;3239:26;;;:12;:26;;;;;;;;;;3350:24;3325:109;;;;;;;;;;;;;;4851:2;4845:9;5144:16;;5604:66;5588:83;;6088:3;6084:1;6071:15;;6064:28;6144:42;6134:53;;;6129:2;6116:16;;6109:79;6230:51;;6225:2;6212:16;;6205:77;6319:3;6306:17;;6299:33;;;5315:3;6478:17;;;;5162:2;5140:25;5167:15;5136:47;5298:38;;;6573:206;6593:5;6583:8;6580:19;6573:206;;;6642:16;;6625:34;;6706:2;6743:18;;;;6692:17;;;;6573:206;;;7345:3;7274:7;7220;7213:5;7209:19;7136:7;7070:1;6995:10;6932:3;6906:512;6891:527;;;7445:7;7435:2;;7492:16;7483:7;7476:33;15710:816:6;15974:21;;:52;;16005:20;15974:52;15953:115;;;;;;;;;;;;;;16142:19;;;;:33;;;16138:170;;16216:19;;;;:33;;16239:10;16216:33;16191:106;;;;;;;;;;;;;;16366:20;16389:26;:24;:26::i;:::-;16366:49;;16468:12;16446:34;;:5;:18;;;:34;;;16425:94;;;;;;;;;;;;;;15710:816;;;:::o;10624:422::-;10772:20;;;;:9;:20;;;;;;;:27;;;;10795:4;10772:27;;;10889:25;;;;10857:18;;10975:20;;;;11009;;;;10837:202;;10782:9;;10837:202;;;;;;;;;;;;;;10928:10;;11009:20;10837:202;;;;;;;;;;10624:422;;:::o;10270:886:41:-;10391:14;10454:5;10462:2;10454:10;10442:1;:8;:22;;10421:135;;;;;;;;;;;;;;-1:-1:-1;11058:13:41;10803:2;11058:13;11052:20;11074:42;11048:69;;10270:886::o;4553:1678:40:-;4639:14;4669:18;777:457;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;777:457:40;;;767:468;;;;;;4669:45;;4724:26;4763:5;:20;;;4753:31;;;;;;;;;;;;;;;4724:60;;4794:26;4833:5;:20;;;4823:31;;;;;;;;;;;;;;;;5620:14;;;5763:11;;5670:3;5659:15;;5800:11;;5710:3;5699:15;;;5837:11;;5903:24;;;5940:32;;;5985;;;6056:3;6040:20;;6109:19;;6141;;;-1:-1:-1;6173:19:40;-1:-1:-1;6040:20:40;4553:1678::o;706:5376:29:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;706:5376:29;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;79648:42;79637:54;;80925:35;;80915:2;;80974:1;;80964:12;158:693;;280:3;273:4;265:6;261:17;257:27;247:2;;-1:-1;;288:12;247:2;335:6;322:20;357:85;372:69;434:6;372:69;;;357:85;;;470:21;;;348:94;-1:-1;514:4;527:14;;;;502:17;;622:1;607:238;632:6;629:1;626:13;607:238;;;739:42;777:3;514:4;715:3;702:17;506:6;690:30;;739:42;;;727:55;;514:4;796:14;;;;824;;;;;654:1;647:9;607:238;;;611:14;;;;240:611;;;;;891:735;;1027:3;1020:4;1012:6;1008:17;1004:27;994:2;;-1:-1;;1035:12;994:2;1082:6;1069:20;1104:99;1119:83;1195:6;1119:83;;1104:99;1231:21;;;1095:108;-1:-1;1275:4;1288:14;;;;1263:17;;1383:1;1368:252;1393:6;1390:1;1387:13;1368:252;;;1500:56;1552:3;1275:4;1476:3;1463:17;1267:6;1451:30;;1500:56;;;1488:69;;1275:4;1571:14;;;;1599;;;;;1415:1;1408:9;1368:252;;2923:335;;;3037:3;3030:4;3022:6;3018:17;3014:27;3004:2;;-1:-1;;3045:12;3004:2;-1:-1;3075:20;;3115:18;3104:30;;3101:2;;;-1:-1;;3137:12;3101:2;3181:4;3173:6;3169:17;3157:29;;3231:3;3181:4;3212:16;3173:6;3198:31;;3195:40;3192:2;;;3248:1;;3238:12;3192:2;2997:261;;;;;;3267:432;;3364:3;3357:4;3349:6;3345:17;3341:27;3331:2;;-1:-1;;3372:12;3331:2;3419:6;3406:20;77167:18;77159:6;77156:30;77153:2;;;-1:-1;;77189:12;77153:2;3441:60;77272:4;77239:9;3357:4;77224:6;77220:17;77216:33;77262:15;3441:60;;;3432:69;;3521:6;3514:5;3507:21;3625:3;77272:4;3616:6;3549;3607:16;;3604:25;3601:2;;;3642:1;;3632:12;3601:2;80331:6;77272:4;3549:6;3545:17;77272:4;3583:5;3579:16;80308:30;80387:1;80369:16;;;77272:4;80369:16;80362:27;3583:5;3324:375;-1:-1;;3324:375;4196:810;;4314:4;4302:9;4297:3;4293:19;4289:30;4286:2;;;-1:-1;;4322:12;4286:2;4350:20;4314:4;4350:20;;;4341:29;;9577:6;9564:20;4452:15;4445:74;4598:2;4656:9;4652:22;9564:20;4598:2;4617:5;4613:16;4606:75;4750:2;4808:9;4804:22;9564:20;4750:2;4769:5;4765:16;4758:75;4902:2;4960:9;4956:22;9564:20;4902:2;4921:5;4917:16;4910:75;4280:726;;;;;5041:2205;;5149:5;;5137:9;5132:3;5128:19;5124:31;5121:2;;;-1:-1;;5158:12;5121:2;5186:21;5201:5;5186:21;;;5177:30;;;5296:49;5341:3;5317:22;5296:49;;;5279:15;5272:74;5448:49;5493:3;5415:2;5473:9;5469:22;5448:49;;;5415:2;5434:5;5430:16;5423:75;5607:49;5652:3;5574:2;5632:9;5628:22;5607:49;;;5574:2;5593:5;5589:16;5582:75;5760:49;5805:3;5727:2;5785:9;5781:22;5760:49;;;5727:2;5746:5;5742:16;5735:75;5883:3;5942:9;5938:22;9564:20;5883:3;5903:5;5899:16;5892:75;6040:3;6099:9;6095:22;9564:20;6040:3;6060:5;6056:16;6049:75;6189:3;6248:9;6244:22;9564:20;6189:3;6209:5;6205:16;6198:75;6338:3;6397:9;6393:22;9564:20;6338:3;6358:5;6354:16;6347:75;6500:3;6571:6;6560:9;6556:22;9564:20;6527:5;6520;6516:17;6509:76;;6646:3;6717:6;6706:9;6702:22;9564:20;6673:5;6666;6662:17;6655:76;;6830:3;;6819:9;6815:19;6802:33;6855:18;;6847:6;6844:30;6841:2;;;5265:1;;6877:12;6841:2;6923:54;6973:3;6964:6;6953:9;6949:22;6923:54;;;6915:5;6908;6904:17;6897:81;7077:3;;;;7066:9;7062:19;7049:33;7035:47;;7102:18;7094:6;7091:30;7088:2;;;5265:1;;7124:12;7088:2;;7170:54;7220:3;7211:6;7200:9;7196:22;7170:54;;;7162:5;7155;7151:17;7144:81;;;5115:2131;;;;;9634:241;;9738:2;9726:9;9717:7;9713:23;9709:32;9706:2;;;-1:-1;;9744:12;9706:2;9806:53;9851:7;9827:22;9806:53;;9882:366;;;10003:2;9991:9;9982:7;9978:23;9974:32;9971:2;;;-1:-1;;10009:12;9971:2;10071:53;10116:7;10092:22;10071:53;;;10061:63;;10179:53;10224:7;10161:2;10204:9;10200:22;10179:53;;;10169:63;;9965:283;;;;;;10255:360;;;10373:2;10361:9;10352:7;10348:23;10344:32;10341:2;;;-1:-1;;10379:12;10341:2;10441:53;10486:7;10462:22;10441:53;;;10431:63;;10531:2;10571:9;10567:22;2431:20;81071:5;79319:13;79312:21;81049:5;81046:32;81036:2;;-1:-1;;81082:12;81036:2;10539:60;;;;10335:280;;;;;;10622:415;;10770:2;10758:9;10749:7;10745:23;10741:32;10738:2;;;-1:-1;;10776:12;10738:2;10834:17;10821:31;10872:18;10864:6;10861:30;10858:2;;;-1:-1;;10894:12;10858:2;10924:97;11013:7;11004:6;10993:9;10989:22;10924:97;;;10914:107;10732:305;-1:-1;;;;10732:305;11044:947;;;;11281:2;11269:9;11260:7;11256:23;11252:32;11249:2;;;11297:1;11294;11287:12;11249:2;11345:17;11332:31;11383:18;;11375:6;11372:30;11369:2;;;11415:1;11412;11405:12;11369:2;11435:97;11524:7;11515:6;11504:9;11500:22;11435:97;;;11425:107;;11597:2;;;;11586:9;11582:18;11569:32;11621:18;11613:6;11610:30;11607:2;;;11653:1;11650;11643:12;11607:2;11734:6;11723:9;11719:22;1769:3;1762:4;1754:6;1750:17;1746:27;1736:2;;1787:1;1784;1777:12;1736:2;1824:6;1811:20;1797:34;;1846:80;1861:64;1918:6;1861:64;;1846:80;1954:21;;;2011:14;;;;1986:17;;;2100;;;2091:27;;;;2088:36;-1:-1;2085:2;;;2137:1;2134;2127:12;2085:2;2153:10;;;2147:206;2172:6;2169:1;2166:13;2147:206;;;9564:20;;2240:50;;2194:1;2187:9;;;;;2304:14;;;;2332;;2147:206;;;-1:-1;11663:88;-1:-1;;;;11816:2;11801:18;;11788:32;;-1:-1;11829:30;;;11826:2;;;11872:1;11869;11862:12;11826:2;;11892:83;11967:7;11958:6;11947:9;11943:22;11892:83;;;11882:93;;;11243:748;;;;;;11998:811;;;;12210:2;12198:9;12189:7;12185:23;12181:32;12178:2;;;12226:1;12223;12216:12;12178:2;12274:17;12261:31;12312:18;;12304:6;12301:30;12298:2;;;12344:1;12341;12334:12;12298:2;12364:97;12453:7;12444:6;12433:9;12429:22;12364:97;;;12354:107;;12498:2;12541:9;12537:22;9564:20;12506:63;;12634:2;12623:9;12619:18;12606:32;12592:46;;12658:18;12650:6;12647:30;12644:2;;;12690:1;12687;12680:12;12816:241;;12920:2;12908:9;12899:7;12895:23;12891:32;12888:2;;;-1:-1;;12926:12;12888:2;-1:-1;2565:20;;12882:175;-1:-1;12882:175;13064:366;;;13185:2;13173:9;13164:7;13160:23;13156:32;13153:2;;;-1:-1;;13191:12;13153:2;2578:6;2565:20;13243:63;;13343:2;13386:9;13382:22;72:20;97:33;124:5;97:33;;13437:615;;;;;13594:2;13582:9;13573:7;13569:23;13565:32;13562:2;;;-1:-1;;13600:12;13562:2;2578:6;2565:20;13652:63;;13770:53;13815:7;13752:2;13795:9;13791:22;13770:53;;;13760:63;;13888:2;13877:9;13873:18;13860:32;13912:18;13904:6;13901:30;13898:2;;;-1:-1;;13934:12;13898:2;13972:64;14028:7;14019:6;14008:9;14004:22;13972:64;;;13556:496;;;;-1:-1;13962:74;-1:-1;;;;13556:496;14059:595;;;;14206:2;14194:9;14185:7;14181:23;14177:32;14174:2;;;-1:-1;;14212:12;14174:2;2578:6;2565:20;14264:63;;14364:2;14407:9;14403:22;72:20;97:33;124:5;97:33;;;14372:63;-1:-1;14500:2;14485:18;;14472:32;14524:18;14513:30;;14510:2;;;-1:-1;;14546:12;14510:2;14576:62;14630:7;14621:6;14610:9;14606:22;14576:62;;14661:239;;14764:2;14752:9;14743:7;14739:23;14735:32;14732:2;;;-1:-1;;14770:12;14732:2;2714:6;2701:20;2726:32;2752:5;2726:32;;14907:261;;15021:2;15009:9;15000:7;14996:23;14992:32;14989:2;;;-1:-1;;15027:12;14989:2;2853:6;2847:13;2865:32;2891:5;2865:32;;15175:484;;;15354:3;15342:9;15333:7;15329:23;15325:33;15322:2;;;-1:-1;;15361:12;15322:2;15423:82;15497:7;15473:22;15423:82;;;15413:92;;15561:82;15635:7;15542:3;15615:9;15611:22;15561:82;;15666:373;;15793:2;15781:9;15772:7;15768:23;15764:32;15761:2;;;-1:-1;;15799:12;15761:2;15857:17;15844:31;15895:18;15887:6;15884:30;15881:2;;;-1:-1;;15917:12;15881:2;15947:76;16015:7;16006:6;15995:9;15991:22;15947:76;;16046:933;;;;;;16270:3;16258:9;16249:7;16245:23;16241:33;16238:2;;;-1:-1;;16277:12;16238:2;16335:17;16322:31;16373:18;16365:6;16362:30;16359:2;;;-1:-1;;16395:12;16359:2;16425:76;16493:7;16484:6;16473:9;16469:22;16425:76;;;16415:86;;;16556:53;16601:7;16538:2;16581:9;16577:22;16556:53;;;16546:63;;16646:2;16689:9;16685:22;2565:20;16654:63;;16754:2;16797:9;16793:22;9564:20;16762:63;;16881:82;16955:7;16862:3;16935:9;16931:22;16881:82;;;16871:92;;16232:747;;;;;;;;;16986:1089;;;;;17205:3;17193:9;17184:7;17180:23;17176:33;17173:2;;;17222:1;17219;17212:12;17173:2;17270:17;17257:31;17308:18;;17300:6;17297:30;17294:2;;;17340:1;17337;17330:12;17294:2;17360:76;17428:7;17419:6;17408:9;17404:22;17360:76;;;17350:86;;17501:2;17490:9;17486:18;17473:32;17459:46;;17525:18;17517:6;17514:30;17511:2;;;17557:1;17554;17547:12;17511:2;17577:76;17645:7;17636:6;17625:9;17621:22;17577:76;;;17567:86;;17718:2;17707:9;17703:18;17690:32;17676:46;;17742:18;17734:6;17731:30;17728:2;;;17774:1;17771;17764:12;17728:2;17794:62;17848:7;17839:6;17828:9;17824:22;17794:62;;;17784:72;;17921:2;17910:9;17906:18;17893:32;17879:46;;17945:18;17937:6;17934:30;17931:2;;;-1:-1;;17967:12;17931:2;;17997:62;18051:7;18042:6;18031:9;18027:22;17997:62;;;17987:72;;;17167:908;;;;;;;;18082:498;;;18226:2;18214:9;18205:7;18201:23;18197:32;18194:2;;;-1:-1;;18232:12;18194:2;18290:17;18277:31;18328:18;18320:6;18317:30;18314:2;;;-1:-1;;18350:12;18314:2;18380:76;18448:7;18439:6;18428:9;18424:22;18380:76;;;18370:86;18493:2;18532:22;;;;9564:20;;-1:-1;;;;18188:392;18587:727;;;;18757:2;18745:9;18736:7;18732:23;18728:32;18725:2;;;18773:1;18770;18763:12;18725:2;18821:17;18808:31;18859:18;;18851:6;18848:30;18845:2;;;18891:1;18888;18881:12;18845:2;18911:76;18979:7;18970:6;18959:9;18955:22;18911:76;;;18901:86;;19024:2;19067:9;19063:22;9564:20;19032:63;;19160:2;19149:9;19145:18;19132:32;19118:46;;19184:18;19176:6;19173:30;19170:2;;;19216:1;19213;19206:12;19170:2;;19236:62;19290:7;19281:6;19270:9;19266:22;19236:62;;19569:865;;;;;;;19762:3;19750:9;19741:7;19737:23;19733:33;19730:2;;;-1:-1;;19769:12;19730:2;9577:6;9564:20;19821:63;;19939:53;19984:7;19921:2;19964:9;19960:22;19939:53;;;19929:63;;20057:2;20046:9;20042:18;20029:32;20081:18;;20073:6;20070:30;20067:2;;;-1:-1;;20103:12;20067:2;20141:64;20197:7;20188:6;20177:9;20173:22;20141:64;;;20131:74;;-1:-1;20131:74;-1:-1;20270:2;20255:18;;20242:32;;-1:-1;20283:30;;;20280:2;;;-1:-1;;20316:12;20280:2;;20354:64;20410:7;20401:6;20390:9;20386:22;20354:64;;;19724:710;;;;-1:-1;19724:710;;-1:-1;19724:710;;20344:74;;19724:710;-1:-1;;;19724:710;20441:491;;;;20579:2;20567:9;20558:7;20554:23;20550:32;20547:2;;;-1:-1;;20585:12;20547:2;-1:-1;;9564:20;;;20737:2;20776:22;;9564:20;;-1:-1;20845:2;20884:22;;;9564:20;;20541:391;-1:-1;20541:391;23393:343;;23535:5;77826:12;78449:6;78444:3;78437:19;23628:52;23673:6;78486:4;78481:3;78477:14;78486:4;23654:5;23650:16;23628:52;;;80849:2;80829:14;80845:7;80825:28;23692:39;;;;78486:4;23692:39;;23483:253;-1:-1;;23483:253;29542:400;29838:66;29818:87;;29802:2;29924:12;;29706:236;31479:400;31775:66;31755:87;;31739:2;31861:12;;31643:236;32634:398;32929:66;32909:87;;32894:1;33015:11;;32798:234;44833:842;45074:15;45068:22;22614:3;22607:37;45255:4;45248:5;45244:16;45238:23;45255:4;45319:3;45315:14;22607:37;45417:4;45410:5;45406:16;45400:23;45417:4;45481:3;45477:14;22607:37;45579:4;45572:5;45568:16;45562:23;45579:4;45643:3;45639:14;22607:37;44957:718;;;47536:663;47756:22;;79853:4;79842:16;49210:35;;47926:4;47915:16;;;47909:23;47986:14;;;22607:37;48103:4;48092:16;;;48086:23;48163:14;;22607:37;47656:543;49371:282;;80331:6;80326:3;80321;80308:30;-1:-1;;80369:16;;80362:27;;;80369:16;49506:147;-1:-1;49506:147;49660:254;;24237:5;77826:12;24348:52;24393:6;24388:3;24381:4;24374:5;24370:16;24348:52;;;24412:16;;;;;49781:133;-1:-1;;49781:133;49921:511;26202:66;26182:87;;26166:2;26288:12;;22607:37;;;;50395:12;;;50129:303;50439:1440;27429:66;27409:87;;35238:66;27393:2;27515:12;;35218:87;42298:66;35324:12;;;42278:87;36020:66;42384:12;;;36000:87;32929:66;36106:12;;;32909:87;33015:11;;;51023:856;51886:3843;;27837:66;27824:11;27817:87;30247:66;27802:1;27927:3;27923:11;30227:87;43453:66;30333:12;27927:3;30333:12;43433:87;41143:66;43539:12;27927:3;43539:12;41123:87;27020:66;41229:12;27927:3;41229:12;27000:87;26611:66;27106:12;27927:3;27106:12;26591:87;44271:66;26697:12;27927:3;26697:12;44251:87;38768:66;44357:12;27927:3;44357:12;38748:87;33337:66;38854:12;27927:3;38854:12;33317:87;43862:66;33423:12;27927:3;33423:12;43842:87;35238:66;43948:12;27927:3;43948:12;35218:87;55556:148;55390;55224;35324:12;27927:3;35324:12;55224:148;;;55390;;;55556;;55736:213;79648:42;79637:54;;;;21437:37;;55854:2;55839:18;;55825:124;55956:603;;79648:42;79641:5;79637:54;21303:3;21296:58;56166:2;56292;56281:9;56277:18;56270:48;56332:72;56166:2;56155:9;56151:18;56390:6;56332:72;;;56452:9;56446:4;56442:20;56437:2;56426:9;56422:18;56415:48;56477:72;56544:4;56535:6;56477:72;;;56469:80;56137:422;-1:-1;;;;;;56137:422;56566:1163;;56916:3;79648:42;;79641:5;79637:54;21444:3;21437:37;79648:42;79641:5;79637:54;57089:2;57078:9;57074:18;21296:58;;22637:5;57172:2;57161:9;57157:18;22607:37;22637:5;57255:2;57244:9;57240:18;22607:37;22637:5;57338:3;57327:9;57323:19;22607:37;22637:5;57422:3;57411:9;57407:19;22607:37;57466:20;57460:3;57449:9;57445:19;57438:49;57501:72;56916:3;56905:9;56901:19;57559:6;57501:72;;;57622:9;57616:4;57612:20;57606:3;57595:9;57591:19;57584:49;57647:72;57714:4;57705:6;57647:72;;;57639:80;56887:842;-1:-1;;;;;;;;;;;;56887:842;57736:453;57950:2;57964:47;;;77826:12;;57935:18;;;78437:19;;;57736:453;;77678:17;;;78477:14;;;;57736:453;22076:329;22101:6;22098:1;22095:13;22076:329;;;21073:96;21165:3;22168:6;22162:13;21073:96;;;57950:2;77678:17;;;;;21198:4;21189:14;;;;;22123:1;22116:9;22076:329;;;-1:-1;58017:162;;57921:268;-1:-1;;;;;57921:268;58196:201;79319:13;;79312:21;22500:34;;58308:2;58293:18;;58279:118;58404:213;22607:37;;;58522:2;58507:18;;58493:124;58624:519;;22637:5;22614:3;22607:37;79648:42;79641:5;79637:54;58980:2;58969:9;58965:18;21437:37;58816:2;59017;59006:9;59002:18;58995:48;59057:76;58816:2;58805:9;58801:18;59119:6;59057:76;;;59049:84;58787:356;-1:-1;;;;;58787:356;59150:408;;22637:5;22614:3;22607:37;59314:2;59432;59421:9;59417:18;59410:48;59472:76;59314:2;59303:9;59299:18;59534:6;59472:76;;59565:539;22607:37;;;79853:4;79842:16;;;;59924:2;59909:18;;49210:35;60007:2;59992:18;;22607:37;60090:2;60075:18;;22607:37;59763:3;59748:19;;59734:370;60111:320;79496:66;79485:78;;;;23004:36;;79648:42;79637:54;60417:2;60402:18;;21437:37;60255:2;60240:18;;60226:205;60438:289;;60570:2;60591:17;60584:47;60645:72;60570:2;60559:9;60555:18;60703:6;60645:72;;61034:407;61225:2;61239:47;;;25011:2;61210:18;;;78437:19;25047:66;78477:14;;;25027:87;25133:12;;;61196:245;61448:407;61639:2;61653:47;;;25384:2;61624:18;;;78437:19;25420:66;78477:14;;;25400:87;25506:12;;;61610:245;61862:407;62053:2;62067:47;;;25757:2;62038:18;;;78437:19;25793:66;78477:14;;;25773:87;25879:12;;;62024:245;62276:407;62467:2;62481:47;;;28173:2;62452:18;;;78437:19;28209:66;78477:14;;;28189:87;28295:12;;;62438:245;62690:407;62881:2;62895:47;;;28546:2;62866:18;;;78437:19;28582:66;78477:14;;;28562:87;28668:12;;;62852:245;63104:407;63295:2;63309:47;;;28919:2;63280:18;;;78437:19;28955:66;78477:14;;;28935:87;29056:66;29042:12;;;29035:88;29142:12;;;63266:245;63518:407;63709:2;63723:47;;;29393:2;63694:18;;;78437:19;29429:66;78477:14;;;29409:87;29515:12;;;63680:245;63932:407;64123:2;64137:47;;;30584:2;64108:18;;;78437:19;30620:66;78477:14;;;30600:87;30706:12;;;64094:245;64346:407;64537:2;64551:47;;;30957:2;64522:18;;;78437:19;30993:66;78477:14;;;30973:87;31079:12;;;64508:245;64760:407;64951:2;64965:47;;;31330:2;64936:18;;;78437:19;31366:66;78477:14;;;31346:87;31452:12;;;64922:245;65174:407;65365:2;65379:47;;;32112:2;65350:18;;;78437:19;32148:66;78477:14;;;32128:87;32234:12;;;65336:245;65588:407;65779:2;65793:47;;;32485:2;65764:18;;;78437:19;32521:66;78477:14;;;32501:87;32607:12;;;65750:245;66002:407;66193:2;66207:47;;;33674:2;66178:18;;;78437:19;33710:66;78477:14;;;33690:87;33796:12;;;66164:245;66416:407;66607:2;66621:47;;;34047:2;66592:18;;;78437:19;34083:66;78477:14;;;34063:87;34169:12;;;66578:245;66830:407;67021:2;67035:47;;;34420:2;67006:18;;;78437:19;34456:66;78477:14;;;34436:87;34542:12;;;66992:245;67244:407;67435:2;67449:47;;;34793:2;67420:18;;;78437:19;34829:66;78477:14;;;34809:87;34915:12;;;67406:245;67658:407;67849:2;67863:47;;;35575:2;67834:18;;;78437:19;35611:66;78477:14;;;35591:87;35697:12;;;67820:245;68072:407;68263:2;68277:47;;;36357:2;68248:18;;;78437:19;36393:66;78477:14;;;36373:87;36479:12;;;68234:245;68486:407;68677:2;68691:47;;;36730:2;68662:18;;;78437:19;36766:66;78477:14;;;36746:87;36867:66;36853:12;;;36846:88;36953:12;;;68648:245;68900:407;69091:2;69105:47;;;37204:2;69076:18;;;78437:19;37240:66;78477:14;;;37220:87;37326:12;;;69062:245;69314:407;69505:2;69519:47;;;37577:2;69490:18;;;78437:19;37613:66;78477:14;;;37593:87;37699:12;;;69476:245;69728:407;69919:2;69933:47;;;37950:2;69904:18;;;78437:19;37986:66;78477:14;;;37966:87;38072:12;;;69890:245;70142:407;70333:2;70347:47;;;38323:2;70318:18;;;78437:19;38359:66;78477:14;;;38339:87;38445:12;;;70304:245;70556:407;70747:2;70761:47;;;39105:2;70732:18;;;78437:19;39141:66;78477:14;;;39121:87;39227:12;;;70718:245;70970:407;71161:2;71175:47;;;39478:2;71146:18;;;78437:19;39514:66;78477:14;;;39494:87;39600:12;;;71132:245;71384:407;71575:2;71589:47;;;39851:2;71560:18;;;78437:19;39887:66;78477:14;;;39867:87;39973:12;;;71546:245;71798:407;71989:2;72003:47;;;40224:2;71974:18;;;78437:19;40260:66;78477:14;;;40240:87;40346:12;;;71960:245;72212:407;72403:2;72417:47;;;40597:2;72388:18;;;78437:19;40633:66;78477:14;;;40613:87;40734:66;40720:12;;;40713:88;40820:12;;;72374:245;72626:407;72817:2;72831:47;;;41480:2;72802:18;;;78437:19;41516:66;78477:14;;;41496:87;41602:12;;;72788:245;73040:407;73231:2;73245:47;;;41853:2;73216:18;;;78437:19;41889:66;78477:14;;;41869:87;41975:12;;;73202:245;73454:407;73645:2;73659:47;;;42635:2;73630:18;;;78437:19;42671:66;78477:14;;;42651:87;42757:12;;;73616:245;73868:407;74059:2;74073:47;;;43008:2;74044:18;;;78437:19;43044:66;78477:14;;;43024:87;43130:12;;;74030:245;74282:407;74473:2;74487:47;;;44608:2;74458:18;;;78437:19;44644:66;78477:14;;;44624:87;44730:12;;;74444:245;74696:330;74872:3;74857:19;;74887:129;74861:9;74989:6;74887:129;;75033:358;;75223:3;75212:9;75208:19;75200:27;;46945:116;47047:13;46923:15;46917:22;46945:116;;;47141:4;47134:5;47130:16;47124:23;47153:117;47264:4;47259:3;47255:14;47241:12;47153:117;;;;47371:4;47364:5;47360:16;47354:23;47440:5;47435:3;47431:15;22607:37;75194:197;;;;;75398:321;75570:2;75555:18;;75584:125;75559:9;75682:6;75584:125;;75946:256;76008:2;76002:9;76034:17;;;76109:18;76094:34;;76130:22;;;76091:62;76088:2;;;76166:1;;76156:12;76088:2;76008;76175:22;75986:216;;-1:-1;75986:216;76209:263;;76373:18;76365:6;76362:30;76359:2;;;-1:-1;;76395:12;76359:2;-1:-1;76434:4;76422:17;;;76452:15;;76296:176;80404:268;80469:1;80476:101;80490:6;80487:1;80484:13;80476:101;;;80557:11;;;80551:18;80538:11;;;80531:39;80512:2;80505:10;80476:101;;;80592:6;80589:1;80586:13;80583:2;;;-1:-1;;80469:1;80639:16;;80632:27;80453:219;80866:117;79648:42;80953:5;79637:54;80928:5;80925:35;80915:2;;80974:1;;80964:12;81232:115;79496:66;81317:5;79485:78;81293:5;81290:34;81280:2;;81338:1;;81328:12"
            }
        }
    },
    "sources": {
        "test/TestExchangeInternals.sol": {
            "id": 29
        },
        "src/Exchange.sol": {
            "id": 4
        },
        "@0x/contracts-exchange-libs/contracts/src/LibConstants.sol": {
            "id": 35
        },
        "src/MixinExchangeCore.sol": {
            "id": 6
        },
        "@0x/contracts-utils/contracts/src/ReentrancyGuard.sol": {
            "id": 43
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 38
        },
        "@0x/contracts-utils/contracts/src/SafeMath.sol": {
            "id": 44
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 40
        },
        "@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": {
            "id": 36
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 39
        },
        "src/mixins/MExchangeCore.sol": {
            "id": 22
        },
        "src/interfaces/IExchangeCore.sol": {
            "id": 14
        },
        "src/mixins/MSignatureValidator.sol": {
            "id": 24
        },
        "src/interfaces/ISignatureValidator.sol": {
            "id": 16
        },
        "src/mixins/MTransactions.sol": {
            "id": 25
        },
        "src/interfaces/ITransactions.sol": {
            "id": 17
        },
        "src/mixins/MAssetProxyDispatcher.sol": {
            "id": 21
        },
        "src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 12
        },
        "src/MixinSignatureValidator.sol": {
            "id": 8
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 41
        },
        "src/interfaces/IWallet.sol": {
            "id": 19
        },
        "src/interfaces/IValidator.sol": {
            "id": 18
        },
        "src/MixinWrapperFunctions.sol": {
            "id": 10
        },
        "@0x/contracts-exchange-libs/contracts/src/LibAbiEncoder.sol": {
            "id": 34
        },
        "src/mixins/MWrapperFunctions.sol": {
            "id": 26
        },
        "src/interfaces/IWrapperFunctions.sol": {
            "id": 20
        },
        "src/MixinAssetProxyDispatcher.sol": {
            "id": 5
        },
        "@0x/contracts-utils/contracts/src/Ownable.sol": {
            "id": 42
        },
        "@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol": {
            "id": 45
        },
        "src/interfaces/IAssetProxy.sol": {
            "id": 11
        },
        "src/MixinTransactions.sol": {
            "id": 9
        },
        "@0x/contracts-exchange-libs/contracts/src/LibExchangeErrors.sol": {
            "id": 37
        },
        "src/MixinMatchOrders.sol": {
            "id": 7
        },
        "src/mixins/MMatchOrders.sol": {
            "id": 23
        },
        "src/interfaces/IMatchOrders.sol": {
            "id": 15
        }
    },
    "sourceCodes": {
        "test/TestExchangeInternals.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/Exchange.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract TestExchangeInternals is\n    Exchange\n{\n    constructor ()\n        public\n        Exchange(\"\")\n    {}\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    ///      Note that this function has been modified from the original\n    //       internal version to return the FillResults.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    /// @return newTotalFillResults The result of adding singleFillResults to totalFilResults.\n    function publicAddFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        public\n        pure\n        returns (FillResults memory)\n    {\n        addFillResults(totalFillResults, singleFillResults);\n        return totalFillResults;\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function publicCalculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        public\n        pure\n        returns (FillResults memory fillResults)\n    {\n        return calculateFillResults(order, takerAssetFilledAmount);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function publicSafeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return safeGetPartialAmountFloor(numerator, denominator, target);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function publicSafeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return safeGetPartialAmountCeil(numerator, denominator, target);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function publicGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return getPartialAmountFloor(numerator, denominator, target);\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target.\n    function publicGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        return getPartialAmountCeil(numerator, denominator, target);\n    }\n\n    /// @dev Checks if rounding error >= 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function publicIsRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (bool isError)\n    {\n        return isRoundingErrorFloor(numerator, denominator, target);\n    }\n\n    /// @dev Checks if rounding error >= 0.1%.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function publicIsRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (bool isError)\n    {\n        return isRoundingErrorCeil(numerator, denominator, target);\n    }\n \n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function publicUpdateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        public\n    {\n        updateFilledState(\n            order,\n            takerAddress,\n            orderHash,\n            orderTakerAssetFilledAmount,\n            fillResults\n        );\n    }\n}\n",
        "src/Exchange.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibConstants.sol\";\nimport \"./MixinExchangeCore.sol\";\nimport \"./MixinSignatureValidator.sol\";\nimport \"./MixinWrapperFunctions.sol\";\nimport \"./MixinAssetProxyDispatcher.sol\";\nimport \"./MixinTransactions.sol\";\nimport \"./MixinMatchOrders.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Exchange is\n    MixinExchangeCore,\n    MixinMatchOrders,\n    MixinSignatureValidator,\n    MixinTransactions,\n    MixinAssetProxyDispatcher,\n    MixinWrapperFunctions\n{\n    string constant public VERSION = \"3.0.0\";\n\n    // Mixins are instantiated in the order they are inherited\n    constructor (bytes memory _zrxAssetData)\n        public\n        LibConstants(_zrxAssetData) // @TODO: Remove when we deploy.\n        MixinExchangeCore()\n        MixinMatchOrders()\n        MixinSignatureValidator()\n        MixinTransactions()\n        MixinAssetProxyDispatcher()\n        MixinWrapperFunctions()\n    {}\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibConstants.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\n// solhint-disable max-line-length\ncontract LibConstants {\n   \n    // Asset data for ZRX token. Used for fee transfers.\n    // @TODO: Hardcode constant when we deploy. Currently \n    //        not constant to make testing easier.\n\n    // The proxyId for ZRX_ASSET_DATA is bytes4(keccak256(\"ERC20Token(address)\")) = 0xf47261b0\n    \n    // Kovan ZRX address is 0x6ff6c0ff1d68b964901f986d4c9fa3ac68346570.\n    // The ABI encoded proxyId and address is 0xf47261b00000000000000000000000006ff6c0ff1d68b964901f986d4c9fa3ac68346570\n    // bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x6f\\xf6\\xc0\\xff\\x1d\\x68\\xb9\\x64\\x90\\x1f\\x98\\x6d\\x4c\\x9f\\xa3\\xac\\x68\\x34\\x65\\x70\";\n    \n    // Mainnet ZRX address is 0xe41d2489571d322189246dafa5ebde1f4699f498.\n    // The ABI encoded proxyId and address is 0xf47261b0000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498\n    // bytes constant public ZRX_ASSET_DATA = \"\\xf4\\x72\\x61\\xb0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xe4\\x1d\\x24\\x89\\x57\\x1d\\x32\\x21\\x89\\x24\\x6d\\xaf\\xa5\\xeb\\xde\\x1f\\x46\\x99\\xf4\\x98\";\n    \n    // solhint-disable-next-line var-name-mixedcase\n    bytes public ZRX_ASSET_DATA;\n\n    // @TODO: Remove when we deploy.\n    constructor (bytes memory zrxAssetData)\n        public\n    {\n        ZRX_ASSET_DATA = zrxAssetData;\n    }\n}\n// solhint-enable max-line-length\n",
        "src/MixinExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/ReentrancyGuard.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibConstants.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\n\ncontract MixinExchangeCore is\n    ReentrancyGuard,\n    LibConstants,\n    LibMath,\n    LibOrder,\n    LibFillResults,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of orderHash => amount of takerAsset already bought by maker\n    mapping (bytes32 => uint256) public filled;\n\n    // Mapping of orderHash => cancelled\n    mapping (bytes32 => bool) public cancelled;\n\n    // Mapping of makerAddress => senderAddress => lowest salt an order can have in order to be fillable\n    // Orders with specified senderAddress and with a salt less than their epoch are considered cancelled\n    mapping (address => mapping (address => uint256)) public orderEpoch;\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        nonReentrant\n    {\n        address makerAddress = getCurrentContextAddress();\n        // If this function is called via `executeTransaction`, we only update the orderEpoch for the makerAddress/msg.sender combination.\n        // This allows external filter contracts to add rules to how orders are cancelled via this function.\n        address senderAddress = makerAddress == msg.sender ? address(0) : msg.sender;\n\n        // orderEpoch is initialized to 0, so to cancelUpTo we need salt + 1\n        uint256 newOrderEpoch = targetOrderEpoch + 1;  \n        uint256 oldOrderEpoch = orderEpoch[makerAddress][senderAddress];\n\n        // Ensure orderEpoch is monotonically increasing\n        require(\n            newOrderEpoch > oldOrderEpoch, \n            \"INVALID_NEW_ORDER_EPOCH\"\n        );\n\n        // Update orderEpoch\n        orderEpoch[makerAddress][senderAddress] = newOrderEpoch;\n        emit CancelUpTo(\n            makerAddress,\n            senderAddress,\n            newOrderEpoch\n        );\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        nonReentrant\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrder(Order memory order)\n        public\n        nonReentrant\n    {\n        cancelOrderInternal(order);\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///         See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(Order memory order)\n        public\n        view\n        returns (OrderInfo memory orderInfo)\n    {\n        // Compute the order hash\n        orderInfo.orderHash = getOrderHash(order);\n\n        // Fetch filled amount\n        orderInfo.orderTakerAssetFilledAmount = filled[orderInfo.orderHash];\n\n        // If order.makerAssetAmount is zero, we also reject the order.\n        // While the Exchange contract handles them correctly, they create\n        // edge cases in the supporting infrastructure because they have\n        // an 'infinite' price when computed by a simple division.\n        if (order.makerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_MAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // If order.takerAssetAmount is zero, then the order will always\n        // be considered filled because 0 == takerAssetAmount == orderTakerAssetFilledAmount\n        // Instead of distinguishing between unfilled and filled zero taker\n        // amount orders, we choose not to support them.\n        if (order.takerAssetAmount == 0) {\n            orderInfo.orderStatus = uint8(OrderStatus.INVALID_TAKER_ASSET_AMOUNT);\n            return orderInfo;\n        }\n\n        // Validate order availability\n        if (orderInfo.orderTakerAssetFilledAmount >= order.takerAssetAmount) {\n            orderInfo.orderStatus = uint8(OrderStatus.FULLY_FILLED);\n            return orderInfo;\n        }\n\n        // Validate order expiration\n        // solhint-disable-next-line not-rely-on-time\n        if (block.timestamp >= order.expirationTimeSeconds) {\n            orderInfo.orderStatus = uint8(OrderStatus.EXPIRED);\n            return orderInfo;\n        }\n\n        // Check if order has been cancelled\n        if (cancelled[orderInfo.orderHash]) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n        if (orderEpoch[order.makerAddress][order.senderAddress] > order.salt) {\n            orderInfo.orderStatus = uint8(OrderStatus.CANCELLED);\n            return orderInfo;\n        }\n\n        // All other statuses are ruled out: order is Fillable\n        orderInfo.orderStatus = uint8(OrderStatus.FILLABLE);\n        return orderInfo;\n    }\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderInternal(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (FillResults memory fillResults)\n    {\n        // Fetch order info\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n        \n        // Assert that the order is fillable by taker\n        assertFillableOrder(\n            order,\n            orderInfo,\n            takerAddress,\n            signature\n        );\n        \n        // Get amount of takerAsset to fill\n        uint256 remainingTakerAssetAmount = safeSub(order.takerAssetAmount, orderInfo.orderTakerAssetFilledAmount);\n        uint256 takerAssetFilledAmount = min256(takerAssetFillAmount, remainingTakerAssetAmount);\n\n        // Validate context\n        assertValidFill(\n            order,\n            orderInfo,\n            takerAssetFillAmount,\n            takerAssetFilledAmount,\n            fillResults.makerAssetFilledAmount\n        );\n\n        // Compute proportional fill amounts\n        fillResults = calculateFillResults(order, takerAssetFilledAmount);\n\n        // Update exchange internal state\n        updateFilledState(\n            order,\n            takerAddress,\n            orderInfo.orderHash,\n            orderInfo.orderTakerAssetFilledAmount,\n            fillResults\n        );\n    \n        // Settle order\n        settleOrder(\n            order,\n            takerAddress,\n            fillResults\n        );\n\n        return fillResults;\n    }\n\n    /// @dev After calling, the order can not be filled anymore.\n    ///      Throws if order is invalid or sender does not have permission to cancel.\n    /// @param order Order to cancel. Order must be OrderStatus.FILLABLE.\n    function cancelOrderInternal(Order memory order)\n        internal\n    {\n        // Fetch current order status\n        OrderInfo memory orderInfo = getOrderInfo(order);\n\n        // Validate context\n        assertValidCancel(order, orderInfo);\n\n        // Perform cancel\n        updateCancelledState(order, orderInfo.orderHash);\n    }\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    function updateFilledState(\n        Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        FillResults memory fillResults\n    )\n        internal\n    {\n        // Update state\n        filled[orderHash] = safeAdd(orderTakerAssetFilledAmount, fillResults.takerAssetFilledAmount);\n\n        // Log order\n        emit Fill(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            takerAddress,\n            msg.sender,\n            fillResults.makerAssetFilledAmount,\n            fillResults.takerAssetFilledAmount,\n            fillResults.makerFeePaid,\n            fillResults.takerFeePaid,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        Order memory order,\n        bytes32 orderHash\n    )\n        internal\n    {\n        // Perform cancel\n        cancelled[orderHash] = true;\n\n        // Log cancel\n        emit Cancel(\n            order.makerAddress,\n            order.feeRecipientAddress,\n            msg.sender,\n            orderHash,\n            order.makerAssetData,\n            order.takerAssetData\n        );\n    }\n    \n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertFillableOrder(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        address takerAddress,\n        bytes memory signature\n    )\n        internal\n        view\n    {\n        // An order can only be filled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n        \n        // Validate sender is allowed to fill this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n        \n        // Validate taker is allowed to fill this order\n        if (order.takerAddress != address(0)) {\n            require(\n                order.takerAddress == takerAddress,\n                \"INVALID_TAKER\"\n            );\n        }\n        \n        // Validate Maker signature (check only if first time seen)\n        if (orderInfo.orderTakerAssetFilledAmount == 0) {\n            require(\n                isValidSignature(\n                    orderInfo.orderHash,\n                    order.makerAddress,\n                    signature\n                ),\n                \"INVALID_ORDER_SIGNATURE\"\n            );\n        }\n    }\n    \n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param makerAssetFilledAmount Amount of makerAsset that will be transfered.\n    function assertValidFill(\n        Order memory order,\n        OrderInfo memory orderInfo,\n        uint256 takerAssetFillAmount,  // TODO: use FillResults\n        uint256 takerAssetFilledAmount,\n        uint256 makerAssetFilledAmount\n    )\n        internal\n        view\n    {\n        // Revert if fill amount is invalid\n        // TODO: reconsider necessity for v2.1\n        require(\n            takerAssetFillAmount != 0,\n            \"INVALID_TAKER_AMOUNT\"\n        );\n        \n        // Make sure taker does not pay more than desired amount\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            takerAssetFilledAmount <= takerAssetFillAmount,\n            \"TAKER_OVERPAY\"\n        );\n        \n        // Make sure order is not overfilled\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            safeAdd(orderInfo.orderTakerAssetFilledAmount, takerAssetFilledAmount) <= order.takerAssetAmount,\n            \"ORDER_OVERFILL\"\n        );\n        \n        // Make sure order is filled at acceptable price.\n        // The order has an implied price from the makers perspective:\n        //    order price = order.makerAssetAmount / order.takerAssetAmount\n        // i.e. the number of makerAsset maker is paying per takerAsset. The\n        // maker is guaranteed to get this price or a better (lower) one. The\n        // actual price maker is getting in this fill is:\n        //    fill price = makerAssetFilledAmount / takerAssetFilledAmount\n        // We need `fill price <= order price` for the fill to be fair to maker.\n        // This amounts to:\n        //     makerAssetFilledAmount        order.makerAssetAmount\n        //    ------------------------  <=  -----------------------\n        //     takerAssetFilledAmount        order.takerAssetAmount\n        // or, equivalently:\n        //     makerAssetFilledAmount * order.takerAssetAmount <=\n        //     order.makerAssetAmount * takerAssetFilledAmount\n        // NOTE: This assertion should never fail, it is here\n        //       as an extra defence against potential bugs.\n        require(\n            safeMul(makerAssetFilledAmount, order.takerAssetAmount)\n            <= \n            safeMul(order.makerAssetAmount, takerAssetFilledAmount),\n            \"INVALID_FILL_PRICE\"\n        );\n    }\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        Order memory order,\n        OrderInfo memory orderInfo\n    )\n        internal\n        view\n    {\n        // Ensure order is valid\n        // An order can only be cancelled if its status is FILLABLE.\n        require(\n            orderInfo.orderStatus == uint8(OrderStatus.FILLABLE),\n            \"ORDER_UNFILLABLE\"\n        );\n\n        // Validate sender is allowed to cancel this order\n        if (order.senderAddress != address(0)) {\n            require(\n                order.senderAddress == msg.sender,\n                \"INVALID_SENDER\"\n            );\n        }\n\n        // Validate transaction signed by maker\n        address makerAddress = getCurrentContextAddress();\n        require(\n            order.makerAddress == makerAddress,\n            \"INVALID_MAKER\"\n        );\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = safeGetPartialAmountFloor(\n            fillResults.makerAssetFilledAmount,\n            order.makerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        return fillResults;\n    }\n\n    /// @dev Settles an order by transferring assets between counterparties.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAddress Address selling takerAsset and buying makerAsset.\n    /// @param fillResults Amounts to be filled and fees paid by maker and taker.\n    function settleOrder(\n        LibOrder.Order memory order,\n        address takerAddress,\n        LibFillResults.FillResults memory fillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        dispatchTransferFrom(\n            order.makerAssetData,\n            order.makerAddress,\n            takerAddress,\n            fillResults.makerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            order.takerAssetData,\n            takerAddress,\n            order.makerAddress,\n            fillResults.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            order.makerAddress,\n            order.feeRecipientAddress,\n            fillResults.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            takerAddress,\n            order.feeRecipientAddress,\n            fillResults.takerFeePaid\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/ReentrancyGuard.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex\n    bool private locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(\n            !locked,\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        // Lock mutex before function call\n        locked = true;\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        locked = false;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.5;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            uint256(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibMath is\n    SafeMath\n{\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n        \n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n        \n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n    \n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n    \n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n        \n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero. \n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n        \n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n    \n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n        \n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = safeSub(denominator, remainder) % denominator;\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n}\n",
        "src/mixins/MExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"../interfaces/IExchangeCore.sol\";\n\n\ncontract MExchangeCore is\n    IExchangeCore\n{\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.      \n        address indexed feeRecipientAddress,  // Address that received fees.\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker. \n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of ZRX paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of ZRX paid to feeRecipient by taker.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset. \n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.      \n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.   \n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getOrderHash).\n        bytes makerAssetData,                 // Encoded data specific to makerAsset. \n        bytes takerAssetData                  // Encoded data specific to takerAsset.\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed senderAddress,        // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrderInternal(LibOrder.Order memory order)\n        internal;\n\n    /// @dev Updates state with results of a fill order.\n    /// @param order that was filled.\n    /// @param takerAddress Address of taker who filled the order.\n    /// @param orderTakerAssetFilledAmount Amount of order already filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function updateFilledState(\n        LibOrder.Order memory order,\n        address takerAddress,\n        bytes32 orderHash,\n        uint256 orderTakerAssetFilledAmount,\n        LibFillResults.FillResults memory fillResults\n    )\n        internal;\n\n    /// @dev Updates state with results of cancelling an order.\n    ///      State is only updated if the order is currently fillable.\n    ///      Otherwise, updating state would have no effect.\n    /// @param order that was cancelled.\n    /// @param orderHash Hash of order that was cancelled.\n    function updateCancelledState(\n        LibOrder.Order memory order,\n        bytes32 orderHash\n    )\n        internal;\n    \n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    /// @param takerAddress Address of order taker.\n    /// @param signature Proof that the orders was created by its maker.\n    function assertFillableOrder(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        address takerAddress,\n        bytes memory signature\n    )\n        internal\n        view;\n    \n    /// @dev Validates context for fillOrder. Succeeds or throws.\n    /// @param order to be filled.\n    /// @param orderInfo Status, orderHash, and amount already filled of order.\n    /// @param takerAssetFillAmount Desired amount of order to fill by taker.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param makerAssetFilledAmount Amount of makerAsset that will be transfered.\n    function assertValidFill(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo,\n        uint256 takerAssetFillAmount,\n        uint256 takerAssetFilledAmount,\n        uint256 makerAssetFilledAmount\n    )\n        internal\n        view;\n\n    /// @dev Validates context for cancelOrder. Succeeds or throws.\n    /// @param order to be cancelled.\n    /// @param orderInfo OrderStatus, orderHash, and amount already filled of order.\n    function assertValidCancel(\n        LibOrder.Order memory order,\n        LibOrder.OrderInfo memory orderInfo\n    )\n        internal\n        view;\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.FillResults memory fillResults);\n\n}\n",
        "src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "src/mixins/MSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"../interfaces/ISignatureValidator.sol\";\n\n\ncontract MSignatureValidator is\n    ISignatureValidator\n{\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool approved                      // Approval or disapproval of validator contract.\n    );\n\n    // Allowed signature types.\n    enum SignatureType {\n        Illegal,         // 0x00, default value\n        Invalid,         // 0x01\n        EIP712,          // 0x02\n        EthSign,         // 0x03\n        Wallet,          // 0x04\n        Validator,       // 0x05\n        PreSigned,       // 0x06\n        NSignatureTypes  // 0x07, number of signature types. Always leave at end.\n    }\n\n    /// @dev Verifies signature using logic defined by Wallet contract.\n    /// @param hash Any 32 byte hash.\n    /// @param walletAddress Address that should have signed the given hash\n    ///                      and defines its own signature verification method.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidWalletSignature(\n        bytes32 hash,\n        address walletAddress,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies signature using logic defined by Validator contract.\n    /// @param validatorAddress Address of validator contract.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidValidatorSignature(\n        address validatorAddress,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ISignatureValidator {\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external;\n    \n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external;\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address of signer.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n}\n",
        "src/mixins/MTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"../interfaces/ITransactions.sol\";\n\n\ncontract MTransactions is\n    ITransactions\n{\n    // Hash for the EIP712 ZeroEx Transaction Schema\n    bytes32 constant internal EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"ZeroExTransaction(\",\n        \"uint256 salt,\",\n        \"address signerAddress,\",\n        \"bytes data\",\n        \")\"\n    ));\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract ITransactions {\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes calldata data,\n        bytes calldata signature\n    )\n        external;\n}\n",
        "src/mixins/MAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"../interfaces/IAssetProxyDispatcher.sol\";\n\n\ncontract MAssetProxyDispatcher is\n    IAssetProxyDispatcher\n{\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal;\n}\n",
        "src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IAssetProxyDispatcher {\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "src/MixinSignatureValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/ReentrancyGuard.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./interfaces/IWallet.sol\";\nimport \"./interfaces/IValidator.sol\";\n\n\ncontract MixinSignatureValidator is\n    ReentrancyGuard,\n    MSignatureValidator,\n    MTransactions\n{\n    using LibBytes for bytes;\n    \n    // Mapping of hash => signer => signed\n    mapping (bytes32 => mapping (address => bool)) public preSigned;\n\n    // Mapping of signer => validator => approved\n    mapping (address => mapping (address => bool)) public allowedValidators;\n\n    /// @dev Approves a hash on-chain using any valid signature type.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    function preSign(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n    {\n        if (signerAddress != msg.sender) {\n            require(\n                isValidSignature(\n                    hash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_SIGNATURE\"\n            );\n        }\n        preSigned[hash][signerAddress] = true;\n    }\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        nonReentrant\n    {\n        address signerAddress = getCurrentContextAddress();\n        allowedValidators[signerAddress][validatorAddress] = approval;\n        emit SignatureValidatorApproval(\n            signerAddress,\n            validatorAddress,\n            approval\n        );\n    }\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        require(\n            signature.length > 0,\n            \"LENGTH_GREATER_THAN_0_REQUIRED\"\n        );\n\n        // Pop last byte off of signature byte array.\n        uint8 signatureTypeRaw = uint8(signature.popLastByte());\n\n        // Ensure signature is supported\n        require(\n            signatureTypeRaw < uint8(SignatureType.NSignatureTypes),\n            \"SIGNATURE_UNSUPPORTED\"\n        );\n\n        SignatureType signatureType = SignatureType(signatureTypeRaw);\n\n        // Variables are not scoped in Solidity.\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        address recovered;\n\n        // Always illegal signature.\n        // This is always an implicit option since a signer can create a\n        // signature array with invalid type or length. We may as well make\n        // it an explicit option. This aids testing and analysis. It is\n        // also the initialization value for the enum type.\n        if (signatureType == SignatureType.Illegal) {\n            revert(\"SIGNATURE_ILLEGAL\");\n\n        // Always invalid signature.\n        // Like Illegal, this is always implicitly available and therefore\n        // offered explicitly. It can be implicitly created by providing\n        // a correctly formatted but incorrect signature.\n        } else if (signatureType == SignatureType.Invalid) {\n            require(\n                signature.length == 0,\n                \"LENGTH_0_REQUIRED\"\n            );\n            isValid = false;\n            return isValid;\n\n        // Signature using EIP712\n        } else if (signatureType == SignatureType.EIP712) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                hash,\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signed using web3.eth_sign\n        } else if (signatureType == SignatureType.EthSign) {\n            require(\n                signature.length == 65,\n                \"LENGTH_65_REQUIRED\"\n            );\n            v = uint8(signature[0]);\n            r = signature.readBytes32(1);\n            s = signature.readBytes32(33);\n            recovered = ecrecover(\n                keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hash\n                )),\n                v,\n                r,\n                s\n            );\n            isValid = signerAddress == recovered;\n            return isValid;\n\n        // Signature verified by wallet contract.\n        // If used with an order, the maker of the order is the wallet contract.\n        } else if (signatureType == SignatureType.Wallet) {\n            isValid = isValidWalletSignature(\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signature verified by validator contract.\n        // If used with an order, the maker of the order can still be an EOA.\n        // A signature using this type should be encoded as:\n        // | Offset   | Length | Contents                        |\n        // | 0x00     | x      | Signature to validate           |\n        // | 0x00 + x | 20     | Address of validator contract   |\n        // | 0x14 + x | 1      | Signature type is always \"\\x06\" |\n        } else if (signatureType == SignatureType.Validator) {\n            // Pop last 20 bytes off of signature byte array.\n            address validatorAddress = signature.popLast20Bytes();\n            \n            // Ensure signer has approved validator.\n            if (!allowedValidators[signerAddress][validatorAddress]) {\n                return false;\n            }\n            isValid = isValidValidatorSignature(\n                validatorAddress,\n                hash,\n                signerAddress,\n                signature\n            );\n            return isValid;\n\n        // Signer signed hash previously using the preSign function.\n        } else if (signatureType == SignatureType.PreSigned) {\n            isValid = preSigned[hash][signerAddress];\n            return isValid;\n        }\n\n        // Anything else is illegal (We do not return false because\n        // the signature may actually be valid, just not in a format\n        // that we currently support. In this case returning false\n        // may lead the caller to incorrectly believe that the\n        // signature was invalid.)\n        revert(\"SIGNATURE_UNSUPPORTED\");\n    }\n\n    /// @dev Verifies signature using logic defined by Wallet contract.\n    /// @param hash Any 32 byte hash.\n    /// @param walletAddress Address that should have signed the given hash\n    ///                      and defines its own signature verification method.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if signature is valid for given wallet..\n    function isValidWalletSignature(\n        bytes32 hash,\n        address walletAddress,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IWallet(walletAddress).isValidSignature.selector,\n            hash,\n            signature\n        );\n        assembly {\n            let cdStart := add(callData, 32)\n            let success := staticcall(\n                gas,              // forward all gas\n                walletAddress,    // address of Wallet contract\n                cdStart,          // pointer to start of input\n                mload(callData),  // length of input\n                cdStart,          // write output over input\n                32                // output size is 32 bytes\n            )\n\n            switch success\n            case 0 {\n                // Revert with `Error(\"WALLET_ERROR\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000c57414c4c45545f4552524f5200000000000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            case 1 {\n                // Signature is valid if call did not revert and returned true\n                isValid := mload(cdStart)\n            }\n        }\n        return isValid;\n    }\n\n    /// @dev Verifies signature using logic defined by Validator contract.\n    /// @param validatorAddress Address of validator contract.\n    /// @param hash Any 32 byte hash.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return True if the address recovered from the provided signature matches the input signer address.\n    function isValidValidatorSignature(\n        address validatorAddress,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid)\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IValidator(signerAddress).isValidSignature.selector,\n            hash,\n            signerAddress,\n            signature\n        );\n        assembly {\n            let cdStart := add(callData, 32)\n            let success := staticcall(\n                gas,               // forward all gas\n                validatorAddress,  // address of Validator contract\n                cdStart,           // pointer to start of input\n                mload(callData),   // length of input\n                cdStart,           // write output over input\n                32                 // output size is 32 bytes\n            )\n\n            switch success\n            case 0 {\n                // Revert with `Error(\"VALIDATOR_ERROR\")`\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n                mstore(64, 0x0000000f56414c494441544f525f4552524f5200000000000000000000000000)\n                mstore(96, 0)\n                revert(0, 100)\n            }\n            case 1 {\n                // Signature is valid if call did not revert and returned true\n                isValid := mload(cdStart)\n            }\n        }\n        return isValid;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n    \n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n                    \n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n                    \n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n    \n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        require(\n            from <= to,\n            \"FROM_LESS_THAN_TO_REQUIRED\"\n        );\n        require(\n            to <= b.length,\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n        );\n        \n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        require(\n            b.length > 0,\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\n        );\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The 20 byte address that was popped off.\n    function popLast20Bytes(bytes memory b)\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= 20,\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Store last 20 bytes.\n        result = readAddress(b, b.length - 20);\n\n        assembly {\n            // Subtract 20 from byte array length.\n            let newLen := sub(mload(b), 20)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 20,  // 20 is length of address\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\n        );\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n            \n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        require(\n            b.length >= index + 32,\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(\n            b.length >= index + 4,\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n        );\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Reads nested bytes from a specific position.\n    /// @dev NOTE: the returned value overlaps with the input value.\n    ///            Both should be treated as immutable.\n    /// @param b Byte array containing nested bytes.\n    /// @param index Index of nested bytes.\n    /// @return result Nested bytes.\n    function readBytesWithLength(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Read length of nested bytes\n        uint256 nestedBytesLength = readUint256(b, index);\n        index += 32;\n\n        // Assert length of <b> is valid, given\n        // length of nested bytes\n        require(\n            b.length >= index + nestedBytesLength,\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n        \n        // Return a pointer to the byte array as it exists inside `b`\n        assembly {\n            result := add(b, index)\n        }\n        return result;\n    }\n\n    /// @dev Inserts bytes at a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes to insert.\n    function writeBytesWithLength(\n        bytes memory b,\n        uint256 index,\n        bytes memory input\n    )\n        internal\n        pure\n    {\n        // Assert length of <b> is valid, given\n        // length of input\n        require(\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\n        );\n\n        // Copy <input> into <b>\n        memCopy(\n            b.contentAddress() + index,\n            input.rawAddress(), // includes length of <input>\n            input.length + 32   // +32 bytes to store <input> length\n        );\n    }\n\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n    /// @param dest Byte array that will be overwritten with source bytes.\n    /// @param source Byte array to copy onto dest bytes.\n    function deepCopyBytes(\n        bytes memory dest,\n        bytes memory source\n    )\n        internal\n        pure\n    {\n        uint256 sourceLen = source.length;\n        // Dest length must be >= source length, or some bytes would not be copied.\n        require(\n            dest.length >= sourceLen,\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\n        );\n        memCopy(\n            dest.contentAddress(),\n            source.contentAddress(),\n            sourceLen\n        );\n    }\n}\n",
        "src/interfaces/IWallet.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IWallet {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
        "src/interfaces/IValidator.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IValidator {\n\n    /// @dev Verifies that a signature is valid.\n    /// @param hash Message hash that is signed.\n    /// @param signerAddress Address that should have signed the given hash.\n    /// @param signature Proof of signing.\n    /// @return Validity of order signature.\n    function isValidSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n}\n",
        "src/MixinWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/ReentrancyGuard.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibAbiEncoder.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MWrapperFunctions.sol\";\n\n\ncontract MixinWrapperFunctions is\n    ReentrancyGuard,\n    LibMath,\n    LibFillResults,\n    LibAbiEncoder,\n    MExchangeCore,\n    MWrapperFunctions\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        nonReentrant\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrKillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillResults;\n    }\n\n    /// @dev Fills the input order.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (FillResults memory fillResults)\n    {\n        // ABI encode calldata for `fillOrder`\n        bytes memory fillOrderCalldata = abiEncodeFillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n\n        // Delegate to `fillOrder` and handle any exceptions gracefully\n        assembly {\n            let success := delegatecall(\n                gas,                                // forward all gas\n                address,                            // call address of this contract\n                add(fillOrderCalldata, 32),         // pointer to start of input (skip array length in first 32 bytes)\n                mload(fillOrderCalldata),           // length of input\n                fillOrderCalldata,                  // write output over input\n                128                                 // output size is 128 bytes\n            )\n            if success {\n                mstore(fillResults, mload(fillOrderCalldata))\n                mstore(add(fillResults, 32), mload(add(fillOrderCalldata, 32)))\n                mstore(add(fillResults, 64), mload(add(fillOrderCalldata, 64)))\n                mstore(add(fillResults, 96), mload(add(fillOrderCalldata, 96)))\n            }\n        }\n        // fillResults values will be 0 by default if call was unsuccessful\n        return fillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrKillOrderInternal(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    ///         NOTE: makerAssetFilledAmount and takerAssetFilledAmount may include amounts filled of different assets.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                takerAssetFillAmounts[i],\n                signatures[i]\n            );\n            addFillResults(totalFillResults, singleFillResults);\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n    \n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount >= takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory takerAssetData = orders[0].takerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being sold by taker is the same for each order.\n            // Rather than passing this in as calldata, we use the takerAssetData from the first order in all later orders.\n            orders[i].takerAssetData = takerAssetData;\n\n            // Calculate the remaining amount of takerAsset to sell\n            uint256 remainingTakerAssetFillAmount = safeSub(takerAssetFillAmount, totalFillResults.takerAssetFilledAmount);\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of takerAsset has been sold\n            if (totalFillResults.takerAssetFilledAmount >= takerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        nonReentrant\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmountFloor(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderInternal(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (FillResults memory totalFillResults)\n    {\n        bytes memory makerAssetData = orders[0].makerAssetData;\n\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n\n            // We assume that asset being bought by taker is the same for each order.\n            // Rather than passing this in as calldata, we copy the makerAssetData from the first order onto all later orders.\n            orders[i].makerAssetData = makerAssetData;\n\n            // Calculate the remaining amount of makerAsset to buy\n            uint256 remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount, totalFillResults.makerAssetFilledAmount);\n\n            // Convert the remaining amount of makerAsset to buy into remaining amount\n            // of takerAsset to sell, assuming entire amount can be sold in the current order\n            uint256 remainingTakerAssetFillAmount = getPartialAmountFloor(\n                orders[i].takerAssetAmount,\n                orders[i].makerAssetAmount,\n                remainingMakerAssetFillAmount\n            );\n\n            // Attempt to sell the remaining amount of takerAsset\n            FillResults memory singleFillResults = fillOrderNoThrow(\n                orders[i],\n                remainingTakerAssetFillAmount,\n                signatures[i]\n            );\n\n            // Update amounts filled and fees paid by maker and taker\n            addFillResults(totalFillResults, singleFillResults);\n\n            // Stop execution if the entire amount of makerAsset has been bought\n            if (totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount) {\n                break;\n            }\n        }\n        return totalFillResults;\n    }\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        nonReentrant\n    {\n        uint256 ordersLength = orders.length;\n        for (uint256 i = 0; i != ordersLength; i++) {\n            cancelOrderInternal(orders[i]);\n        }\n    }\n\n    /// @dev Fetches information for all passed in orders.\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory)\n    {\n        uint256 ordersLength = orders.length;\n        LibOrder.OrderInfo[] memory ordersInfo = new LibOrder.OrderInfo[](ordersLength);\n        for (uint256 i = 0; i != ordersLength; i++) {\n            ordersInfo[i] = getOrderInfo(orders[i]);\n        }\n        return ordersInfo;\n    }\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (FillResults memory fillResults)\n    {\n        fillResults = fillOrderInternal(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        require(\n            fillResults.takerAssetFilledAmount == takerAssetFillAmount,\n            \"COMPLETE_FILL_FAILED\"\n        );\n        return fillResults;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibAbiEncoder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibOrder.sol\";\n\n\ncontract LibAbiEncoder {\n\n    /// @dev ABI encodes calldata for `fillOrder`.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return ABI encoded calldata for `fillOrder`.\n    function abiEncodeFillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory fillOrderCalldata)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            fillOrderCalldata := mload(0x40)\n            // bytes4(keccak256(\"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"))\n            // = 0xb4be83d5\n            // Leave 0x20 bytes to store the length\n            mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n            let headerAreaEnd := add(fillOrderCalldata, 0x24)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Set length of calldata\n            mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n\n            // Increment free memory pointer\n            mstore(0x40, dataAreaEnd)\n        }\n\n        return fillOrderCalldata;\n    }\n}\n",
        "src/mixins/MWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"../interfaces/IWrapperFunctions.sol\";\n\n\ncontract MWrapperFunctions is \n    IWrapperFunctions\n{\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrderInternal(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        returns (LibFillResults.FillResults memory fillResults);\n}\n",
        "src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param order LibOrder.Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrderNoThrow(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrKill.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Fills an order with specified parameters and ECDSA signature.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrders(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrders(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.\n    ///      Returns false if the transaction would otherwise revert.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        returns (LibFillResults.FillResults memory totalFillResults);\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public;\n\n    /// @dev Fetches information for all passed in orders\n    /// @param orders Array of order specifications.\n    /// @return Array of OrderInfo instances that correspond to each order.\n    function getOrdersInfo(LibOrder.Order[] memory orders)\n        public\n        view\n        returns (LibOrder.OrderInfo[] memory);\n}\n",
        "src/MixinAssetProxyDispatcher.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/Ownable.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\nimport \"./interfaces/IAssetProxy.sol\";\n\n\ncontract MixinAssetProxyDispatcher is\n    Ownable,\n    MAssetProxyDispatcher\n{\n    // Mapping from Asset Proxy Id's to their respective Asset Proxy\n    mapping (bytes4 => address) public assetProxies;\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external\n        onlyOwner\n    {\n        // Ensure that no asset proxy exists with current id.\n        bytes4 assetProxyId = IAssetProxy(assetProxy).getProxyId();\n        address currentAssetProxy = assetProxies[assetProxyId];\n        require(\n            currentAssetProxy == address(0),\n            \"ASSET_PROXY_ALREADY_EXISTS\"\n        );\n\n        // Add asset proxy and log registration.\n        assetProxies[assetProxyId] = assetProxy;\n        emit AssetProxyRegistered(\n            assetProxyId,\n            assetProxy\n        );\n    }\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address)\n    {\n        return assetProxies[assetProxyId];\n    }\n\n    /// @dev Forwards arguments to assetProxy and calls `transferFrom`. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the asset.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param amount Amount of token to transfer.\n    function dispatchTransferFrom(\n        bytes memory assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        // Do nothing if no amount should be transferred.\n        if (amount > 0 && from != to) {\n            // Ensure assetData length is valid\n            require(\n                assetData.length > 3,\n                \"LENGTH_GREATER_THAN_3_REQUIRED\"\n            );\n            \n            // Lookup assetProxy. We do not use `LibBytes.readBytes4` for gas efficiency reasons.\n            bytes4 assetProxyId;\n            assembly {\n                assetProxyId := and(mload(\n                    add(assetData, 32)),\n                    0xFFFFFFFF00000000000000000000000000000000000000000000000000000000\n                )\n            }\n            address assetProxy = assetProxies[assetProxyId];\n\n            // Ensure that assetProxy exists\n            require(\n                assetProxy != address(0),\n                \"ASSET_PROXY_DOES_NOT_EXIST\"\n            );\n            \n            // We construct calldata for the `assetProxy.transferFrom` ABI.\n            // The layout of this calldata is in the table below.\n            // \n            // | Area     | Offset | Length  | Contents                                    |\n            // | -------- |--------|---------|-------------------------------------------- |\n            // | Header   | 0      | 4       | function selector                           |\n            // | Params   |        | 4 * 32  | function parameters:                        |\n            // |          | 4      |         |   1. offset to assetData (*)                |\n            // |          | 36     |         |   2. from                                   |\n            // |          | 68     |         |   3. to                                     |\n            // |          | 100    |         |   4. amount                                 |\n            // | Data     |        |         | assetData:                                  |\n            // |          | 132    | 32      | assetData Length                            |\n            // |          | 164    | **      | assetData Contents                          |\n\n            assembly {\n                /////// Setup State ///////\n                // `cdStart` is the start of the calldata for `assetProxy.transferFrom` (equal to free memory ptr).\n                let cdStart := mload(64)\n                // `dataAreaLength` is the total number of words needed to store `assetData`\n                //  As-per the ABI spec, this value is padded up to the nearest multiple of 32,\n                //  and includes 32-bytes for length.\n                let dataAreaLength := and(add(mload(assetData), 63), 0xFFFFFFFFFFFE0)\n                // `cdEnd` is the end of the calldata for `assetProxy.transferFrom`.\n                let cdEnd := add(cdStart, add(132, dataAreaLength))\n\n                \n                /////// Setup Header Area ///////\n                // This area holds the 4-byte `transferFromSelector`.\n                // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n                mstore(cdStart, 0xa85e59e400000000000000000000000000000000000000000000000000000000)\n                \n                /////// Setup Params Area ///////\n                // Each parameter is padded to 32-bytes. The entire Params Area is 128 bytes.\n                // Notes:\n                //   1. The offset to `assetData` is the length of the Params Area (128 bytes).\n                //   2. A 20-byte mask is applied to addresses to zero-out the unused bytes.\n                mstore(add(cdStart, 4), 128)\n                mstore(add(cdStart, 36), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 68), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n                mstore(add(cdStart, 100), amount)\n                \n                /////// Setup Data Area ///////\n                // This area holds `assetData`.\n                let dataArea := add(cdStart, 132)\n                // solhint-disable-next-line no-empty-blocks\n                for {} lt(dataArea, cdEnd) {} {\n                    mstore(dataArea, mload(assetData))\n                    dataArea := add(dataArea, 32)\n                    assetData := add(assetData, 32)\n                }\n\n                /////// Call `assetProxy.transferFrom` using the constructed calldata ///////\n                let success := call(\n                    gas,                    // forward all gas\n                    assetProxy,             // call address of asset proxy\n                    0,                      // don't send any ETH\n                    cdStart,                // pointer to start of input\n                    sub(cdEnd, cdStart),    // length of input  \n                    cdStart,                // write output over input\n                    512                     // reserve 512 bytes for output\n                )\n                if iszero(success) {\n                    revert(cdStart, returndatasize())\n                }\n            }\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/Ownable.sol": "pragma solidity ^0.5.5;\n\nimport \"./interfaces/IOwnable.sol\";\n\n\ncontract Ownable is\n    IOwnable\n{\n    address public owner;\n\n    constructor ()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"ONLY_CONTRACT_OWNER\"\n        );\n        _;\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        onlyOwner\n    {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/interfaces/IOwnable.sol": "pragma solidity ^0.5.5;\n\n\ncontract IOwnable {\n\n    function transferOwnership(address newOwner)\n        public;\n}\n",
        "src/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract IAssetProxy {\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n",
        "src/MixinTransactions.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibExchangeErrors.sol\";\nimport \"./mixins/MSignatureValidator.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibEIP712.sol\";\n\n\ncontract MixinTransactions is\n    LibEIP712,\n    MSignatureValidator,\n    MTransactions\n{\n    // Mapping of transaction hash => executed\n    // This prevents transactions from being executed more than once.\n    mapping (bytes32 => bool) public transactions;\n\n    // Address of current transaction signer\n    address public currentContextAddress;\n\n    /// @dev Executes an exchange method call in the context of signer.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @param signature Proof of signer transaction by signer.\n    function executeTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes calldata data,\n        bytes calldata signature\n    )\n        external\n    {\n        // Prevent reentrancy\n        require(\n            currentContextAddress == address(0),\n            \"REENTRANCY_ILLEGAL\"\n        );\n\n        bytes32 transactionHash = hashEIP712Message(hashZeroExTransaction(\n            salt,\n            signerAddress,\n            data\n        ));\n\n        // Validate transaction has not been executed\n        require(\n            !transactions[transactionHash],\n            \"INVALID_TX_HASH\"\n        );\n\n        // Transaction always valid if signer is sender of transaction\n        if (signerAddress != msg.sender) {\n            // Validate signature\n            require(\n                isValidSignature(\n                    transactionHash,\n                    signerAddress,\n                    signature\n                ),\n                \"INVALID_TX_SIGNATURE\"\n            );\n\n            // Set the current transaction signer\n            currentContextAddress = signerAddress;\n        }\n\n        // Execute transaction\n        transactions[transactionHash] = true;\n        (bool success,) = address(this).delegatecall(data);\n        require(\n            success,\n            \"FAILED_EXECUTION\"\n        );\n\n        // Reset current transaction signer if it was previously updated\n        if (signerAddress != msg.sender) {\n            currentContextAddress = address(0);\n        }\n    }\n\n    /// @dev Calculates EIP712 hash of the Transaction.\n    /// @param salt Arbitrary number to ensure uniqueness of transaction hash.\n    /// @param signerAddress Address of transaction signer.\n    /// @param data AbiV2 encoded calldata.\n    /// @return EIP712 hash of the Transaction.\n    function hashZeroExTransaction(\n        uint256 salt,\n        address signerAddress,\n        bytes memory data\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes32 dataHash = keccak256(data);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH,\n        //     salt,\n        //     bytes32(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                               // hash of schema\n            mstore(add(memPtr, 32), salt)                                                            // salt\n            mstore(add(memPtr, 64), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 96), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 128)\n        }\n        return result;\n    }\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function getCurrentContextAddress()\n        internal\n        view\n        returns (address)\n    {\n        address currentContextAddress_ = currentContextAddress;\n        address contextAddress = currentContextAddress_ == address(0) ? msg.sender : currentContextAddress_;\n        return contextAddress;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibExchangeErrors.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n// solhint-disable\npragma solidity ^0.5.5;\n\n\n/// @dev This contract documents the revert reasons used in the Exchange contract.\n/// This contract is intended to serve as a reference, but is not actually used for efficiency reasons.\ncontract LibExchangeErrors {\n\n    /// Order validation errors ///\n    string constant internal ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                              // Order cannot be filled.\n    string constant internal INVALID_MAKER = \"INVALID_MAKER\";                                    // Invalid makerAddress.\n    string constant internal INVALID_TAKER = \"INVALID_TAKER\";                                    // Invalid takerAddress.\n    string constant internal INVALID_SENDER = \"INVALID_SENDER\";                                  // Invalid `msg.sender`.\n    string constant internal INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";                // Signature validation failed. \n    \n    /// fillOrder validation errors ///\n    string constant internal INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";                      // takerAssetFillAmount cannot equal 0.\n    string constant internal ROUNDING_ERROR = \"ROUNDING_ERROR\";                                  // Rounding error greater than 0.1% of takerAssetFillAmount. \n    \n    /// Signature validation errors ///\n    string constant internal INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                            // Signature validation failed. \n    string constant internal SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                            // Signature type is illegal.\n    string constant internal SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";                    // Signature type unsupported.\n    \n    /// cancelOrdersUptTo errors ///\n    string constant internal INVALID_NEW_ORDER_EPOCH = \"INVALID_NEW_ORDER_EPOCH\";                // Specified salt must be greater than or equal to existing orderEpoch.\n\n    /// fillOrKillOrder errors ///\n    string constant internal COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";                      // Desired takerAssetFillAmount could not be completely filled. \n\n    /// matchOrders errors ///\n    string constant internal NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";              // Matched orders must have a negative spread.\n\n    /// Transaction errors ///\n    string constant internal REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";                          // Recursive reentrancy is not allowed. \n    string constant internal INVALID_TX_HASH = \"INVALID_TX_HASH\";                                // Transaction has already been executed. \n    string constant internal INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";                      // Signature validation failed. \n    string constant internal FAILED_EXECUTION = \"FAILED_EXECUTION\";                              // Transaction execution failed. \n    \n    /// registerAssetProxy errors ///\n    string constant internal ASSET_PROXY_ALREADY_EXISTS = \"ASSET_PROXY_ALREADY_EXISTS\";          // AssetProxy with same id already exists.\n\n    /// dispatchTransferFrom errors ///\n    string constant internal ASSET_PROXY_DOES_NOT_EXIST = \"ASSET_PROXY_DOES_NOT_EXIST\";          // No assetProxy registered at given id.\n    string constant internal TRANSFER_FAILED = \"TRANSFER_FAILED\";                                // Asset transfer unsuccesful.\n\n    /// Length validation errors ///\n    string constant internal LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\";  // Byte array must have a length greater than 0.\n    string constant internal LENGTH_GREATER_THAN_3_REQUIRED = \"LENGTH_GREATER_THAN_3_REQUIRED\";  // Byte array must have a length greater than 3.\n    string constant internal LENGTH_0_REQUIRED = \"LENGTH_0_REQUIRED\";                            // Byte array must have a length of 0.\n    string constant internal LENGTH_65_REQUIRED = \"LENGTH_65_REQUIRED\";                          // Byte array must have a length of 65.\n}\n",
        "src/MixinMatchOrders.sol": "/*\n  Copyright 2018 ZeroEx Intl.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/ReentrancyGuard.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibConstants.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"./mixins/MExchangeCore.sol\";\nimport \"./mixins/MMatchOrders.sol\";\nimport \"./mixins/MTransactions.sol\";\nimport \"./mixins/MAssetProxyDispatcher.sol\";\n\n\ncontract MixinMatchOrders is\n    ReentrancyGuard,\n    LibConstants,\n    LibMath,\n    MAssetProxyDispatcher,\n    MExchangeCore,\n    MMatchOrders,\n    MTransactions\n{\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        nonReentrant\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // We assume that rightOrder.takerAssetData == leftOrder.makerAssetData and rightOrder.makerAssetData == leftOrder.takerAssetData.\n        // If this assumption isn't true, the match will fail at signature validation.\n        rightOrder.makerAssetData = leftOrder.takerAssetData;\n        rightOrder.takerAssetData = leftOrder.makerAssetData;\n\n        // Get left & right order info\n        LibOrder.OrderInfo memory leftOrderInfo = getOrderInfo(leftOrder);\n        LibOrder.OrderInfo memory rightOrderInfo = getOrderInfo(rightOrder);\n\n        // Fetch taker address\n        address takerAddress = getCurrentContextAddress();\n        \n        // Either our context is valid or we revert\n        assertFillableOrder(\n            leftOrder,\n            leftOrderInfo,\n            takerAddress,\n            leftSignature\n        );\n        assertFillableOrder(\n            rightOrder,\n            rightOrderInfo,\n            takerAddress,\n            rightSignature\n        );\n        assertValidMatch(leftOrder, rightOrder);\n\n        // Compute proportional fill amounts\n        matchedFillResults = calculateMatchedFillResults(\n            leftOrder,\n            rightOrder,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            rightOrderInfo.orderTakerAssetFilledAmount\n        );\n\n        // Validate fill contexts\n        assertValidFill(\n            leftOrder,\n            leftOrderInfo,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.takerAssetFilledAmount,\n            matchedFillResults.left.makerAssetFilledAmount\n        );\n        assertValidFill(\n            rightOrder,\n            rightOrderInfo,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount,\n            matchedFillResults.right.makerAssetFilledAmount\n        );\n        \n        // Update exchange state\n        updateFilledState(\n            leftOrder,\n            takerAddress,\n            leftOrderInfo.orderHash,\n            leftOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.left\n        );\n        updateFilledState(\n            rightOrder,\n            takerAddress,\n            rightOrderInfo.orderHash,\n            rightOrderInfo.orderTakerAssetFilledAmount,\n            matchedFillResults.right\n        );\n\n        // Settle matched orders. Succeeds or throws.\n        settleMatchedOrders(\n            leftOrder,\n            rightOrder,\n            takerAddress,\n            matchedFillResults\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure\n    {\n        // Make sure there is a profitable spread.\n        // There is a profitable spread iff the cost per unit bought (OrderA.MakerAmount/OrderA.TakerAmount) for each order is greater\n        // than the profit per unit sold of the matched order (OrderB.TakerAmount/OrderB.MakerAmount).\n        // This is satisfied by the equations below:\n        // <leftOrder.makerAssetAmount> / <leftOrder.takerAssetAmount> >= <rightOrder.takerAssetAmount> / <rightOrder.makerAssetAmount>\n        // AND\n        // <rightOrder.makerAssetAmount> / <rightOrder.takerAssetAmount> >= <leftOrder.takerAssetAmount> / <leftOrder.makerAssetAmount>\n        // These equations can be combined to get the following:\n        require(\n            safeMul(leftOrder.makerAssetAmount, rightOrder.makerAssetAmount) >=\n            safeMul(leftOrder.takerAssetAmount, rightOrder.takerAssetAmount),\n            \"NEGATIVE_SPREAD_REQUIRED\"\n        );\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = safeSub(leftOrder.takerAssetAmount, leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = safeSub(rightOrder.takerAssetAmount, rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        if (leftTakerAssetAmountRemaining >= rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n            matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = matchedFillResults.right.makerAssetFilledAmount;\n            // Round down to ensure the maker's exchange rate does not exceed the price specified by the order. \n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.left.makerAssetFilledAmount = safeGetPartialAmountFloor(\n                leftOrder.makerAssetAmount,\n                leftOrder.takerAssetAmount,\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        } else {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = matchedFillResults.left.takerAssetFilledAmount;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                matchedFillResults.right.makerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.leftMakerAssetSpreadAmount = safeSub(\n            matchedFillResults.left.makerAssetFilledAmount,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Settles matched order by transferring appropriate funds between order makers, taker, and fee recipient.\n    /// @param leftOrder First matched order.\n    /// @param rightOrder Second matched order.\n    /// @param takerAddress Address that matched the orders. The taker receives the spread between orders as profit.\n    /// @param matchedFillResults Struct holding amounts to transfer between makers, taker, and fee recipients.\n    function settleMatchedOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        address takerAddress,\n        LibFillResults.MatchedFillResults memory matchedFillResults\n    )\n        private\n    {\n        bytes memory zrxAssetData = ZRX_ASSET_DATA;\n        // Order makers and taker\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            rightOrder.makerAddress,\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            rightOrder.makerAssetData,\n            rightOrder.makerAddress,\n            leftOrder.makerAddress,\n            matchedFillResults.left.takerAssetFilledAmount\n        );\n        dispatchTransferFrom(\n            leftOrder.makerAssetData,\n            leftOrder.makerAddress,\n            takerAddress,\n            matchedFillResults.leftMakerAssetSpreadAmount\n        );\n\n        // Maker fees\n        dispatchTransferFrom(\n            zrxAssetData,\n            leftOrder.makerAddress,\n            leftOrder.feeRecipientAddress,\n            matchedFillResults.left.makerFeePaid\n        );\n        dispatchTransferFrom(\n            zrxAssetData,\n            rightOrder.makerAddress,\n            rightOrder.feeRecipientAddress,\n            matchedFillResults.right.makerFeePaid\n        );\n\n        // Taker fees\n        if (leftOrder.feeRecipientAddress == rightOrder.feeRecipientAddress) {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                safeAdd(\n                    matchedFillResults.left.takerFeePaid,\n                    matchedFillResults.right.takerFeePaid\n                )\n            );\n        } else {\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                leftOrder.feeRecipientAddress,\n                matchedFillResults.left.takerFeePaid\n            );\n            dispatchTransferFrom(\n                zrxAssetData,\n                takerAddress,\n                rightOrder.feeRecipientAddress,\n                matchedFillResults.right.takerFeePaid\n            );\n        }\n    }\n}\n",
        "src/mixins/MMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"../interfaces/IMatchOrders.sol\";\n\n\ncontract MMatchOrders is\n    IMatchOrders\n{\n    /// @dev Validates context for matchOrders. Succeeds or throws.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    function assertValidMatch(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder\n    )\n        internal\n        pure;\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount\n    )\n        internal\n        pure\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n}\n",
        "src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n"
    },
    "sourceTreeHashHex": "0x3777868de522b11bf7294002a26c4633a400d7159b22e1994769de2da0659360",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.8+commit.23d335f2.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "constantinople",
            "remappings": [
                "@0x/contracts-exchange-libs=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange/node_modules/@0x/contracts-erc20"
            ]
        }
    },
    "networks": {}
}
