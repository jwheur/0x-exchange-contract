{
    "schemaVersion": "2.0.0",
    "contractName": "TestLibs",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicIsRoundingErrorFloor",
                "outputs": [
                    {
                        "name": "isError",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicGetPartialAmountCeil",
                "outputs": [
                    {
                        "name": "partialAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "getDomainSeparatorSchemaHash",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "totalFillResults",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "singleFillResults",
                        "type": "tuple"
                    }
                ],
                "name": "publicAddFillResults",
                "outputs": [
                    {
                        "components": [
                            {
                                "name": "makerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetFilledAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFeePaid",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFeePaid",
                                "type": "uint256"
                            }
                        ],
                        "name": "",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicIsRoundingErrorCeil",
                "outputs": [
                    {
                        "name": "isError",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "getOrderSchemaHash",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "name": "numerator",
                        "type": "uint256"
                    },
                    {
                        "name": "denominator",
                        "type": "uint256"
                    },
                    {
                        "name": "target",
                        "type": "uint256"
                    }
                ],
                "name": "publicGetPartialAmountFloor",
                "outputs": [
                    {
                        "name": "partialAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "publicGetOrderHash",
                "outputs": [
                    {
                        "name": "orderHash",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "EIP712_DOMAIN_HASH",
                "outputs": [
                    {
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "name": "takerAssetData",
                                "type": "bytes"
                            }
                        ],
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "publicAbiEncodeFillOrder",
                "outputs": [
                    {
                        "name": "fillOrderCalldata",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            }
        ],
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xE PUSH1 0xA0 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP4 DUP4 ADD DUP4 MSTORE PUSH1 0xB DUP5 MSTORE PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH32 0x3200000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH2 0xDA SWAP3 SWAP2 PUSH32 0xF0F24618F4C4BE1E62E026FB039A20EF96F4495294817D1027FFAA6D1F70E61E SWAP2 PUSH32 0xAD7C5BEF027816A800DA1736444FB58A807EF4C9603B7848673F7E3A68EB14A5 SWAP2 ADDRESS SWAP2 ADD PUSH2 0xFA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SSTORE PUSH2 0x1D6 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0xD DUP3 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x19 DUP3 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x41 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH2 0x102A DUP1 PUSH2 0x1E5 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7D33C6EE GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xD9802088 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xD9802088 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xE9C7AA1A EQ PUSH2 0x17D JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x7D33C6EE EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0xBE7ADA1E EQ PUSH2 0x14F JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x494D9297 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x494D9297 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x66758D7B EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x679D2F9A EQ PUSH2 0x134 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x1BE23901 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x20777F70 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x19D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x1B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE6F JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1C1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xF6E JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x208 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x215 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x15D CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x226 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x233 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x23E JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0xAB9 JUMP JUMPDEST PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x251 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D2 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F5 PUSH2 0x82F JUMP JUMPDEST PUSH2 0x1FF DUP4 DUP4 PUSH2 0x33E JUMP JUMPDEST POP DUP2 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202 DUP3 PUSH2 0x469 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x295 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x2A0 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x2AD JUMPI POP PUSH1 0x0 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x2B7 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x2C6 DUP6 DUP5 PUSH2 0x651 JUMP JUMPDEST PUSH2 0x2D2 PUSH2 0x3E8 DUP4 PUSH2 0x651 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x318 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x338 PUSH2 0x328 DUP7 DUP6 PUSH2 0x651 JUMP JUMPDEST PUSH2 0x333 DUP7 PUSH1 0x1 PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST DUP5 PUSH2 0x726 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x34C SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x37B SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x394 SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x3E6 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x3F3 JUMPI POP PUSH1 0x0 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x3FD JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP DUP4 PUSH2 0x40D DUP6 DUP4 PUSH2 0x6A5 JUMP JUMPDEST DUP2 PUSH2 0x414 JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH2 0x2C6 DUP6 DUP5 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x45C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x338 DUP6 DUP5 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202 PUSH2 0x477 DUP4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD DUP2 DUP2 MSTORE DUP8 MLOAD PUSH1 0x84 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 DUP5 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP5 DUP9 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 DUP8 ADD MLOAD PUSH1 0xE4 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x104 DUP5 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x164 DUP5 ADD MSTORE PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x184 DUP5 ADD MSTORE PUSH2 0x120 DUP8 ADD MLOAD PUSH2 0x1A4 DUP5 ADD MSTORE PUSH2 0x140 DUP8 ADD DUP1 MLOAD PUSH2 0x1C4 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH2 0x1E4 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x204 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP5 PUSH2 0x224 DUP7 ADD SWAP5 SWAP3 SWAP4 PUSH1 0x44 DUP8 ADD SWAP4 SWAP2 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x581 JUMPI DUP4 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x563 JUMP JUMPDEST POP POP POP POP DUP1 DUP5 SUB PUSH2 0x160 SWAP2 DUP3 ADD MSTORE DUP8 ADD MLOAD DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x0 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP5 LT ISZERO PUSH2 0x5CD JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH2 0x5AA JUMP JUMPDEST POP POP POP DUP7 DUP3 MSTORE SWAP2 DUP4 SUB PUSH1 0x20 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE DUP6 MLOAD DUP1 DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x0 SWAP4 SWAP2 SWAP3 DUP8 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP7 LT ISZERO PUSH2 0x61A JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP7 ADD SWAP6 POP PUSH2 0x5F7 JUMP JUMPDEST POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP6 SUB ADD DUP6 MSTORE POP POP POP PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x660 JUMPI POP PUSH1 0x0 PUSH2 0x202 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x66D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF37 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xEC9 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF37 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 PUSH2 0x732 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74D SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x77A SWAP2 SWAP1 PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x0 DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x799 SWAP2 SWAP1 PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 ADD DUP1 MLOAD PUSH2 0x140 DUP9 ADD DUP1 MLOAD PUSH2 0x160 SWAP1 SWAP10 ADD DUP1 MLOAD SWAP8 DUP5 MSTORE SWAP6 DUP2 MSTORE SWAP3 DUP6 MSTORE PUSH2 0x1A0 DUP3 KECCAK256 SWAP2 MSTORE SWAP6 SWAP1 MSTORE POP MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8A1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8D2 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x913 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x91D PUSH1 0x80 PUSH2 0xF99 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x95A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x963 DUP2 PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x970 DUP4 DUP4 PUSH2 0x857 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x97F DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x857 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x991 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x9A3 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x857 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA11 DUP7 DUP4 DUP8 ADD PUSH2 0x87B JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xA2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA3A DUP6 DUP3 DUP7 ADD PUSH2 0x87B JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA64 DUP5 DUP5 PUSH2 0x902 JUMP JUMPDEST SWAP2 POP PUSH2 0xA73 DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x902 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB1 DUP5 DUP3 DUP6 ADD PUSH2 0x947 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xACD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAE4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xAF0 DUP8 DUP4 DUP9 ADD PUSH2 0x947 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB0C JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xB19 DUP7 DUP3 DUP8 ADD PUSH2 0x87B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 DUP2 MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST PUSH32 0x62797465732074616B6572417373657444617461000000000000000000000000 DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xBDC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xFC0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x6 DUP4 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x1B DUP4 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x30 DUP4 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x4C DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x62 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x7B DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0x94 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xA5 DUP4 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xB6 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xD4 DUP4 ADD MSTORE PUSH2 0x202 PUSH2 0xD9E PUSH2 0xD99 PUSH1 0xE1 DUP6 ADD PUSH2 0xB4F JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST PUSH2 0xBA1 JUMP JUMPDEST PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0xD DUP3 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x19 DUP3 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x41 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xE97 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xFC0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xFB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFDB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFC3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xFEA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 PUSH12 0xEBC60D35CC6377A7A54FC1C5 DUP1 STOP 0xe SHR SLOAD 0xdc LOG2 0x22 0xc4 0xc3 RETURN 0xe1 PUSH31 0xD7A1720A204C6C6578706572696D656E74616CF50037000000000000000000 ",
                "sourceMap": "771:2673:8:-;;;1045:148:3;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1045:148:3;;;1035:159;;49:4:-1;1035:159:3;;;;1511:18;;;;;;;;;;;;;;;;1561:21;;;;;;;;;;;;;;;1416:214;;;;1035:159;1495:36;;1545:39;;1614:4;;1416:214;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1416:214:3;;;1406:225;;49:4:-1;1406:225:3;;;;1385:18;:246;771:2673:8;;2366:661:-1;94:58;;;2666:2;2657:12;;94:58;;;;2768:12;;;94:58;2879:12;;;94:58;2990:12;;;2557:470;3034:1440;2095:66;2075:87;;461:66;2059:2;2181:12;;441:87;1686:66;547:12;;;1666:87;870:66;1772:12;;;850:87;1278:66;956:12;;;1258:87;1364:11;;;3618:856;;771:2673:8;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7D33C6EE GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xD9802088 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xD9802088 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xE9C7AA1A EQ PUSH2 0x17D JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x7D33C6EE EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0xBE7ADA1E EQ PUSH2 0x14F JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x494D9297 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x494D9297 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x66758D7B EQ PUSH2 0x114 JUMPI DUP1 PUSH4 0x679D2F9A EQ PUSH2 0x134 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x1BE23901 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x20777F70 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x19D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x1B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE6F JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1C1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x122 CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x1ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xF6E JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x208 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x215 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x15D CALLDATASIZE PUSH1 0x4 PUSH2 0xB23 JUMP JUMPDEST PUSH2 0x226 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0xA7C JUMP JUMPDEST PUSH2 0x233 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x23E JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0xAB9 JUMP JUMPDEST PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x251 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D2 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F5 PUSH2 0x82F JUMP JUMPDEST PUSH2 0x1FF DUP4 DUP4 PUSH2 0x33E JUMP JUMPDEST POP DUP2 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202 DUP3 PUSH2 0x469 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1AA DUP5 DUP5 DUP5 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x295 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x2A0 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x2AD JUMPI POP PUSH1 0x0 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x2B7 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x2C6 DUP6 DUP5 PUSH2 0x651 JUMP JUMPDEST PUSH2 0x2D2 PUSH2 0x3E8 DUP4 PUSH2 0x651 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x318 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x338 PUSH2 0x328 DUP7 DUP6 PUSH2 0x651 JUMP JUMPDEST PUSH2 0x333 DUP7 PUSH1 0x1 PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST DUP5 PUSH2 0x726 JUMP JUMPDEST DUP2 MLOAD DUP2 MLOAD PUSH2 0x34C SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x37B SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MLOAD PUSH2 0x394 SWAP2 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x60 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x3DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x3E6 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x3F3 JUMPI POP PUSH1 0x0 PUSH2 0x1AD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x3FD JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP DUP4 PUSH2 0x40D DUP6 DUP4 PUSH2 0x6A5 JUMP JUMPDEST DUP2 PUSH2 0x414 JUMPI INVALID JUMPDEST MOD SWAP1 POP PUSH2 0x2C6 DUP6 DUP5 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 GT PUSH2 0x45C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF00 JUMP JUMPDEST PUSH2 0x1AA PUSH2 0x338 DUP6 DUP5 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202 PUSH2 0x477 DUP4 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x7EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xB4BE83D500000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 PUSH1 0x24 DUP4 ADD DUP2 DUP2 MSTORE DUP8 MLOAD PUSH1 0x84 DUP6 ADD SWAP1 DUP2 MSTORE DUP9 DUP5 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE SWAP5 DUP9 ADD MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 DUP8 ADD MLOAD PUSH1 0xE4 DUP5 ADD MSTORE PUSH1 0x80 DUP8 ADD MLOAD PUSH2 0x104 DUP5 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH2 0x124 DUP5 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0x144 DUP5 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x164 DUP5 ADD MSTORE PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0x184 DUP5 ADD MSTORE PUSH2 0x120 DUP8 ADD MLOAD PUSH2 0x1A4 DUP5 ADD MSTORE PUSH2 0x140 DUP8 ADD DUP1 MLOAD PUSH2 0x1C4 DUP6 ADD SWAP1 DUP2 MSTORE PUSH2 0x160 DUP10 ADD MLOAD PUSH2 0x1E4 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 MSTORE MLOAD DUP1 MLOAD PUSH2 0x204 DUP6 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP5 PUSH2 0x224 DUP7 ADD SWAP5 SWAP3 SWAP4 PUSH1 0x44 DUP8 ADD SWAP4 SWAP2 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x581 JUMPI DUP4 MLOAD DUP9 MSTORE PUSH1 0x20 SWAP8 DUP9 ADD SWAP8 SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x563 JUMP JUMPDEST POP POP POP POP DUP1 DUP5 SUB PUSH2 0x160 SWAP2 DUP3 ADD MSTORE DUP8 ADD MLOAD DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x0 SWAP3 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP5 LT ISZERO PUSH2 0x5CD JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH2 0x5AA JUMP JUMPDEST POP POP POP DUP7 DUP3 MSTORE SWAP2 DUP4 SUB PUSH1 0x20 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE DUP6 MLOAD DUP1 DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x0 SWAP4 SWAP2 SWAP3 DUP8 DUP2 ADD SWAP2 SWAP1 PUSH1 0x1F DUP3 ADD DIV JUMPDEST DUP1 DUP7 LT ISZERO PUSH2 0x61A JUMPI DUP3 MLOAD DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP7 POP PUSH1 0x20 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP7 ADD SWAP6 POP PUSH2 0x5F7 JUMP JUMPDEST POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 DUP6 SUB ADD DUP6 MSTORE POP POP POP PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x660 JUMPI POP PUSH1 0x0 PUSH2 0x202 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x66D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF37 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xEC9 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28C SWAP1 PUSH2 0xF37 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 PUSH2 0x732 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74D SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x77A SWAP2 SWAP1 PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x0 DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x799 SWAP2 SWAP1 PUSH2 0xBCA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 ADD DUP1 MLOAD PUSH2 0x140 DUP9 ADD DUP1 MLOAD PUSH2 0x160 SWAP1 SWAP10 ADD DUP1 MLOAD SWAP8 DUP5 MSTORE SWAP6 DUP2 MSTORE SWAP3 DUP6 MSTORE PUSH2 0x1A0 DUP3 KECCAK256 SWAP2 MSTORE SWAP6 SWAP1 MSTORE POP MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x22 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8A1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8D2 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x913 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x91D PUSH1 0x80 PUSH2 0xF99 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x95A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x963 DUP2 PUSH2 0xF99 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x970 DUP4 DUP4 PUSH2 0x857 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x97F DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x857 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x991 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x9A3 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x857 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA11 DUP7 DUP4 DUP8 ADD PUSH2 0x87B JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xA2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA3A DUP6 DUP3 DUP7 ADD PUSH2 0x87B JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x100 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA64 DUP5 DUP5 PUSH2 0x902 JUMP JUMPDEST SWAP2 POP PUSH2 0xA73 DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x902 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB1 DUP5 DUP3 DUP6 ADD PUSH2 0x947 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xACD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xAE4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xAF0 DUP8 DUP4 DUP9 ADD PUSH2 0x947 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB0C JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xB19 DUP7 DUP3 DUP8 ADD PUSH2 0x87B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6279746573206D616B65724173736574446174612C0000000000000000000000 DUP2 MSTORE PUSH1 0x15 ADD SWAP1 JUMP JUMPDEST PUSH32 0x62797465732074616B6572417373657444617461000000000000000000000000 DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xBDC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xFC0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F72646572280000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH32 0x61646472657373206D616B6572416464726573732C0000000000000000000000 PUSH1 0x6 DUP4 ADD MSTORE PUSH32 0x616464726573732074616B6572416464726573732C0000000000000000000000 PUSH1 0x1B DUP4 ADD MSTORE PUSH32 0x6164647265737320666565526563697069656E74416464726573732C00000000 PUSH1 0x30 DUP4 ADD MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x4C DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724173736574416D6F756E742C00000000000000 PUSH1 0x62 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724173736574416D6F756E742C00000000000000 PUSH1 0x7B DUP4 ADD MSTORE PUSH32 0x75696E74323536206D616B65724665652C000000000000000000000000000000 PUSH1 0x94 DUP4 ADD MSTORE PUSH32 0x75696E743235362074616B65724665652C000000000000000000000000000000 PUSH1 0xA5 DUP4 ADD MSTORE PUSH32 0x75696E743235362065787069726174696F6E54696D655365636F6E64732C0000 PUSH1 0xB6 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0xD4 DUP4 ADD MSTORE PUSH2 0x202 PUSH2 0xD9E PUSH2 0xD99 PUSH1 0xE1 DUP6 ADD PUSH2 0xB4F JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST PUSH2 0xBA1 JUMP JUMPDEST PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0xD DUP3 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x19 DUP3 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x28 DUP3 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x41 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xE97 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xFC0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F554E444552464C4F57000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x4449564953494F4E5F42595F5A45524F00000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x55494E543235365F4F564552464C4F5700000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xFB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xFDB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFC3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xFEA JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 PUSH12 0xEBC60D35CC6377A7A54FC1C5 DUP1 STOP 0xe SHR SLOAD 0xdc LOG2 0x22 0xc4 0xc3 RETURN 0xe1 PUSH31 0xD7A1720A204C6C6578706572696D656E74616CF50037000000000000000000 ",
                "sourceMap": "771:2673:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;771:2673:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1988:334;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1627:355;;;;;;;;;:::i;:::-;;;;;;;;3004:157;;;:::i;3167:275::-;;;;;;;;;:::i;:::-;;;;;;;;2328:332;;;;;;;;;:::i;2862:136::-;;;:::i;1264:357::-;;;;;;;;;:::i;2666:190::-;;;;;;;;;:::i;1301:33:3:-;;;:::i;864:394:8:-;;;;;;;;;:::i;:::-;;;;;;;;1988:334;2155:12;2193:98;2227:9;2250:11;2275:6;2193:20;:98::i;:::-;2183:108;-1:-1:-1;1988:334:8;;;;;;:::o;1627:355::-;1794:21;1847:98;1881:9;1904:11;1929:6;1847:20;:98::i;3004:157::-;3089:7;1045:148:3;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1045:148:3;;;1035:159;;;;;;3112:42:8;;3004:157;:::o;3167:275::-;3317:18;;:::i;:::-;3351:51;3366:16;3384:17;3351:14;:51::i;:::-;-1:-1:-1;3419:16:8;3167:275;;;;;:::o;2328:332::-;2494:12;2532:97;2565:9;2588:11;2613:6;2532:19;:97::i;2862:136::-;2937:7;777:457:6;;;;;;;;1264:357:8;1432:21;1485:99;1520:9;1543:11;1568:6;1485:21;:99::i;2666:190::-;2759:17;2804:19;2817:5;2804:12;:19::i;1301:33:3:-;;;;:::o;864:394:8:-;1047:30;1113:104;1145:5;1164:20;1198:9;1113:18;:104::i;4789:1869:5:-;4952:12;5015:1;5001:11;:15;4980:78;;;;;;;;;;;;;;;;;;;;;;5878:11;;;:29;;-1:-1:-1;5893:14:5;;5878:29;5874:72;;;-1:-1:-1;5930:5:5;5923:12;;5874:72;6449:17;6532:11;6469:84;;;;;6509:9;6489:6;6469:84;6449:104;;6601:26;6609:9;6620:6;6601:7;:26::i;:::-;6573:24;6581:4;6587:9;6573:7;:24::i;:::-;:54;;;4789:1869;-1:-1:-1;;;;;4789:1869:5:o;3835:691::-;3998:21;4070:1;4056:11;:15;4035:78;;;;;;;;;;;;;;4327:162;4348:106;4373:26;4381:9;4392:6;4373:7;:26::i;:::-;4417:23;4425:11;4438:1;4417:7;:23::i;:::-;4348:7;:106::i;:::-;4468:11;4327:7;:162::i;1781:648:4:-;1974:39;;2015:40;;1966:90;;1974:39;1966:7;:90::i;:::-;1924:132;;2116:39;;;;;2157:40;;;;2108:90;;2116:39;2108:7;:90::i;:::-;2066:39;;;:132;2248:29;;;;;2279:30;;;;2240:70;;2248:29;2240:7;:70::i;:::-;2208:29;;;:102;2360:29;;;;;2391:30;;;;2352:70;;2360:29;2352:7;:70::i;:::-;2320:29;;;;:102;;;;-1:-1:-1;1781:648:4:o;6919:918:5:-;7081:12;7144:1;7130:11;:15;7109:78;;;;;;;;;;;;;;7260:11;;;:29;;-1:-1:-1;7275:14:5;;7260:29;7256:257;;;-1:-1:-1;7497:5:5;7490:12;;7256:257;7561:17;7644:11;7581:84;;;;;7621:9;7601:6;7581:84;7561:104;;7721:11;7687:31;7695:11;7708:9;7687:7;:31::i;:::-;:45;;;;;;7675:57;;7780:26;7788:9;7799:6;7780:7;:26::i;3133:425::-;3297:21;3369:1;3355:11;:15;3334:78;;;;;;;;;;;;;;3439:82;3460:26;3468:9;3479:6;3460:7;:26::i;4211:202:6:-;4300:17;4345:35;4363:16;4373:5;4363:9;:16::i;:::-;4345:17;:35::i;1011:10099:0:-;5031:4;5025:11;;5321:66;5314:4;5291:28;;;5284:104;;;;1199:30;5445:4;5422:28;;6444:59;;;6770:19;;5736:26;;;6750:40;;;6883:23;;;6877:30;6853:22;;;6846:62;6979:23;;;6973:30;6949:22;;;6942:62;7082:23;;;7076:30;7052:22;;;7045:62;7197:4;7179:23;;7173:30;7149:22;;;7142:62;7297:4;7279:23;;7273:30;7249:22;;;7242:62;7397:4;7379:23;;7373:30;7349:22;;;7342:62;7495:4;7477:23;;7471:30;7447:22;;;7440:62;7594:5;7576:24;;7570:31;7545:23;;;7538:64;7699:5;7681:24;;7675:31;7650:23;;;7643:64;7787:5;7769:24;;7763:31;;7738:23;;;7731:64;;;7895:5;7877:24;;7871:31;7846:23;;;7839:64;7979:5;8106:74;;8268:24;8340:19;;7962:23;;;8544:34;;;5025:11;;8606:22;;;;5422:28;;6536:27;;;;5736:26;;8388:23;;;8340:19;8464:4;8445:24;;8441:35;6190:1;8698:237;8721:13;8718:1;8715:20;8698:237;;;8791:19;;8771:40;;8860:4;8843:22;;;;8898:23;;;;8749:1;8742:9;8698:237;;;-1:-1:-1;;;;9045:31:0;;;9029:13;9010:33;;;9003:74;9171:17;;9165:24;9237:19;;9441:34;;;9037:4;9503:22;;;;9610:1;;9285:23;;;9237:19;9361:4;9342:24;;9338:35;9596:237;9619:13;9616:1;9613:20;9596:237;;;9695:12;9689:19;9676:11;9669:40;9758:4;9745:11;9741:22;9726:37;;9814:4;9800:12;9796:23;9780:39;;9647:1;9644;9640:9;9635:14;;9596:237;;;-1:-1:-1;;;9902:46:0;;;10133:33;;;10003:4;9981:27;;;10108:59;;;10281:19;;10472:34;;;10534:22;;;;-1:-1:-1;;9981:27:0;;10329:23;;;;10281:19;10405:4;10386:24;;10382:35;10613:237;10636:13;10633:1;10630:20;10613:237;;;10712:12;10706:19;10693:11;10686:40;10775:4;10762:11;10758:22;10743:37;;10831:4;10817:12;10813:23;10797:39;;10664:1;10661;10657:9;10652:14;;10613:237;;;-1:-1:-1;;;10928:46:0;;;;;10902:73;;-1:-1:-1;;;11041:4:0;11034:25;1011:10099;;;;;:::o;51:288:10:-;137:7;164:6;160:45;;-1:-1:-1;193:1:10;186:8;;160:45;226:5;;;230:1;226;:5;:1;262:5;;;;;:10;241:73;;;;;;;;;;;;;502:208;588:7;637:1;632;:6;;611:70;;;;;;;;;;;;;;-1:-1:-1;698:5:10;;;502:208::o;716:230::-;802:7;837:5;;;873:6;;;;852:69;;;;;;;;;;;;;345:151;431:7;454:9;470:1;466;:5;;;;;;;345:151;-1:-1:-1;;;;345:151:10:o;4553:1678:6:-;4639:14;4669:18;777:457;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;777:457:6;;;767:468;;;;;;4669:45;;4724:26;4763:5;:20;;;4753:31;;;;;;;;;;;;;;;4724:60;;4794:26;4833:5;:20;;;4823:31;;;;;;;;;;;;;;;;5620:14;;;5763:11;;5670:3;5659:15;;5800:11;;5710:3;5699:15;;;5837:11;;5903:24;;;5940:32;;;5985;;;6056:3;6040:20;;6109:19;;6141;;;-1:-1:-1;6173:19:6;-1:-1:-1;6040:20:6;4553:1678::o;1834:924:3:-;1928:14;1985:18;2297:2;2291:9;2329:66;2314:82;;2446:1;2434:14;;2427:40;;;;2564:2;2552:15;;2545:35;;;;2716:2;2698:21;;;1834:924::o;771:2673:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;26988:42;26977:54;;27717:35;;27707:2;;27766:1;;27756:12;143:432;;240:3;233:4;225:6;221:17;217:27;207:2;;-1:-1;;248:12;207:2;295:6;282:20;25417:18;25409:6;25406:30;25403:2;;;-1:-1;;25439:12;25403:2;317:60;25522:4;25489:9;233:4;25474:6;25470:17;25466:33;25512:15;317:60;;;308:69;;397:6;390:5;383:21;501:3;25522:4;492:6;425;483:16;;480:25;477:2;;;518:1;;508:12;477:2;27204:6;25522:4;425:6;421:17;25522:4;459:5;455:16;27181:30;27260:1;27242:16;;;25522:4;27242:16;27235:27;459:5;200:375;-1:-1;;200:375;1072:809;;1189:4;1177:9;1172:3;1168:19;1164:30;1161:2;;;-1:-1;;1197:12;1161:2;1225:20;1189:4;1225:20;;;1216:29;;1365:22;4198:20;1327:15;1320:74;1473:2;1531:9;1527:22;4198:20;1473:2;1492:5;1488:16;1481:75;1625:2;1683:9;1679:22;4198:20;1625:2;1644:5;1640:16;1633:75;1777:2;1835:9;1831:22;4198:20;1777:2;1796:5;1792:16;1785:75;1155:726;;;;;1916:2208;;2027:5;;2015:9;2010:3;2006:19;2002:31;1999:2;;;-1:-1;;2036:12;1999:2;2064:21;2079:5;2064:21;;;2055:30;;;2174:49;2219:3;2195:22;2174:49;;;2157:15;2150:74;2326:49;2371:3;2293:2;2351:9;2347:22;2326:49;;;2293:2;2312:5;2308:16;2301:75;2485:49;2530:3;2452:2;2510:9;2506:22;2485:49;;;2452:2;2471:5;2467:16;2460:75;2638:49;2683:3;2605:2;2663:9;2659:22;2638:49;;;2605:2;2624:5;2620:16;2613:75;2761:3;2820:9;2816:22;4198:20;2761:3;2781:5;2777:16;2770:75;2918:3;2977:9;2973:22;4198:20;2918:3;2938:5;2934:16;2927:75;3067:3;3126:9;3122:22;4198:20;3067:3;3087:5;3083:16;3076:75;3216:3;3275:9;3271:22;4198:20;3216:3;3236:5;3232:16;3225:75;3378:3;3449:6;3438:9;3434:22;4198:20;3405:5;3398;3394:17;3387:76;;3524:3;3595:6;3584:9;3580:22;4198:20;3551:5;3544;3540:17;3533:76;;3708:3;;3697:9;3693:19;3680:33;3733:18;;3725:6;3722:30;3719:2;;;2143:1;;3755:12;3719:2;3801:54;3851:3;3842:6;3831:9;3827:22;3801:54;;;3793:5;3786;3782:17;3775:81;3955:3;;;;3944:9;3940:19;3927:33;3913:47;;3980:18;3972:6;3969:30;3966:2;;;2143:1;;4002:12;3966:2;;4048:54;4098:3;4089:6;4078:9;4074:22;4048:54;;;4040:5;4033;4029:17;4022:81;;;1993:2131;;;;;4268:480;;;4445:3;4433:9;4424:7;4420:23;4416:33;4413:2;;;-1:-1;;4452:12;4413:2;4514:81;4587:7;4563:22;4514:81;;;4504:91;;4651:81;4724:7;4632:3;4704:9;4700:22;4651:81;;;4641:91;;4407:341;;;;;;4755:371;;4881:2;4869:9;4860:7;4856:23;4852:32;4849:2;;;-1:-1;;4887:12;4849:2;4945:17;4932:31;4983:18;4975:6;4972:30;4969:2;;;-1:-1;;5005:12;4969:2;5035:75;5102:7;5093:6;5082:9;5078:22;5035:75;;;5025:85;4843:283;-1:-1;;;;4843:283;5133:725;;;;5302:2;5290:9;5281:7;5277:23;5273:32;5270:2;;;5318:1;5315;5308:12;5270:2;5366:17;5353:31;5404:18;;5396:6;5393:30;5390:2;;;5436:1;5433;5426:12;5390:2;5456:75;5523:7;5514:6;5503:9;5499:22;5456:75;;;5446:85;;5568:2;5611:9;5607:22;4198:20;5576:63;;5704:2;5693:9;5689:18;5676:32;5662:46;;5728:18;5720:6;5717:30;5714:2;;;5760:1;5757;5750:12;5714:2;;5780:62;5834:7;5825:6;5814:9;5810:22;5780:62;;;5770:72;;;5264:594;;;;;;5865:491;;;;6003:2;5991:9;5982:7;5978:23;5974:32;5971:2;;;-1:-1;;6009:12;5971:2;-1:-1;;4198:20;;;6161:2;6200:22;;4198:20;;-1:-1;6269:2;6308:22;;;4198:20;;5965:391;-1:-1;5965:391;9716:400;10012:66;9992:87;;9976:2;10098:12;;9880:236;10907:400;11203:66;11183:87;;11167:2;11289:12;;11071:236;11689:398;11984:66;11964:87;;11949:1;12070:11;;11853:234;16930:254;;7096:5;25874:12;7207:52;7252:6;7247:3;7240:4;7233:5;7229:16;7207:52;;;7271:16;;;;;17051:133;-1:-1;;17051:133;17191:3843;;8822:66;8809:11;8802:87;10421:66;8787:1;8912:3;8908:11;10401:87;14846:66;10507:12;8912:3;10507:12;14826:87;14028:66;14932:12;8912:3;14932:12;14008:87;8414:66;14114:12;8912:3;14114:12;8394:87;8005:66;8500:12;8912:3;8500:12;7985:87;15664:66;8091:12;8912:3;8091:12;15644:87;13619:66;15750:12;8912:3;15750:12;13599:87;12801:66;13705:12;8912:3;13705:12;12781:87;15255:66;12887:12;8912:3;12887:12;15235:87;13210:66;15341:12;8912:3;15341:12;13190:87;20861:148;20695;20529;13296:12;8912:3;13296:12;20529:148;;;20695;;;20861;;21041:1440;14437:66;14417:87;;7596:66;14401:2;14523:12;;7576:87;12392:66;7682:12;;;12372:87;9603:66;12478:12;;;9583:87;11984:66;9689:12;;;11964:87;12070:11;;;21625:856;22488:201;26810:13;;26803:21;6428:34;;22600:2;22585:18;;22571:118;22696:213;6545:37;;;22814:2;22799:18;;22785:124;22916:297;;23052:2;23073:17;23066:47;6736:5;25874:12;26111:6;23052:2;23041:9;23037:18;26099:19;6829:52;6874:6;26139:14;23041:9;26139:14;23052:2;6855:5;6851:16;6829:52;;;27641:2;27621:14;27637:7;27617:28;6893:39;;;;26139:14;6893:39;;23023:190;-1:-1;;23023:190;23220:407;23411:2;23425:47;;;9158:2;23396:18;;;26099:19;9194:66;26139:14;;;9174:87;9280:12;;;23382:245;23634:407;23825:2;23839:47;;;10758:2;23810:18;;;26099:19;10794:66;26139:14;;;10774:87;10880:12;;;23796:245;24048:407;24239:2;24253:47;;;11540:2;24224:18;;;26099:19;11576:66;26139:14;;;11556:87;11662:12;;;24210:245;24462:326;16086:22;;6545:37;;16273:4;16262:16;;;16256:23;16333:14;;;6545:37;16435:4;16424:16;;;16418:23;16495:14;;;6545:37;16597:4;16586:16;;;16580:23;16657:14;;;6545:37;;;;24636:3;24621:19;;24607:181;25015:256;25077:2;25071:9;25103:17;;;25178:18;25163:34;;25199:22;;;25160:62;25157:2;;;25235:1;;25225:12;25157:2;25077;25244:22;25055:216;;-1:-1;25055:216;27277:268;27342:1;27349:101;27363:6;27360:1;27357:13;27349:101;;;27430:11;;;27424:18;27411:11;;;27404:39;27385:2;27378:10;27349:101;;;27465:6;27462:1;27459:13;27456:2;;;27342:1;27521:6;27516:3;27512:16;27505:27;27456:2;;27326:219;;;"
            }
        }
    },
    "sources": {
        "test/TestLibs.sol": {
            "id": 8
        },
        "src/LibMath.sol": {
            "id": 5
        },
        "@0x/contracts-utils/contracts/src/SafeMath.sol": {
            "id": 10
        },
        "src/LibOrder.sol": {
            "id": 6
        },
        "src/LibEIP712.sol": {
            "id": 3
        },
        "src/LibFillResults.sol": {
            "id": 4
        },
        "src/LibAbiEncoder.sol": {
            "id": 0
        }
    },
    "sourceCodes": {
        "test/TestLibs.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"../src/LibMath.sol\";\nimport \"../src/LibOrder.sol\";\nimport \"../src/LibFillResults.sol\";\nimport \"../src/LibAbiEncoder.sol\";\n\n\ncontract TestLibs is \n    LibMath,\n    LibOrder,\n    LibFillResults,\n    LibAbiEncoder\n{\n    function publicAbiEncodeFillOrder(\n        Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        pure\n        returns (bytes memory fillOrderCalldata)\n    {\n        fillOrderCalldata = abiEncodeFillOrder(\n            order,\n            takerAssetFillAmount,\n            signature\n        );\n        return fillOrderCalldata;\n    }\n\n    function publicGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = getPartialAmountFloor(\n            numerator,\n            denominator,\n            target\n        );\n        return partialAmount;\n    }\n\n    function publicGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = getPartialAmountCeil(\n            numerator,\n            denominator,\n            target\n        );\n        return partialAmount;\n    }\n\n    function publicIsRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (bool isError)\n    {\n        isError = isRoundingErrorFloor(\n            numerator,\n            denominator,\n            target\n        );\n        return isError;\n    }\n\n    function publicIsRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        public\n        pure\n        returns (bool isError)\n    {\n        isError = isRoundingErrorCeil(\n            numerator,\n            denominator,\n            target\n        );\n        return isError;\n    }\n\n    function publicGetOrderHash(Order memory order)\n        public\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = getOrderHash(order);\n        return orderHash;\n    }\n\n    function getOrderSchemaHash()\n        public\n        pure\n        returns (bytes32)\n    {\n        return EIP712_ORDER_SCHEMA_HASH;\n    }\n\n    function getDomainSeparatorSchemaHash()\n        public\n        pure\n        returns (bytes32)\n    {\n        return EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n    }\n\n    function publicAddFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        public\n        pure\n        returns (FillResults memory)\n    {\n        addFillResults(totalFillResults, singleFillResults);\n        return totalFillResults;\n    }\n}\n",
        "src/LibMath.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibMath is\n    SafeMath\n{\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n        \n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        require(\n            !isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n            ),\n            \"ROUNDING_ERROR\"\n        );\n        \n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        partialAmount = safeDiv(\n            safeMul(numerator, target),\n            denominator\n        );\n        return partialAmount;\n    }\n    \n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = safeDiv(\n            safeAdd(\n                safeMul(numerator, target),\n                safeSub(denominator, 1)\n            ),\n            denominator\n        );\n        return partialAmount;\n    }\n    \n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n        \n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero. \n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n        \n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n    \n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        require(\n            denominator > 0,\n            \"DIVISION_BY_ZERO\"\n        );\n        \n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = safeSub(denominator, remainder) % denominator;\n        isError = safeMul(1000, remainder) >= safeMul(numerator, target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/SafeMath.sol": "pragma solidity ^0.5.5;\n\n\ncontract SafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(\n            c / a == b,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(\n            b <= a,\n            \"UINT256_UNDERFLOW\"\n        );\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        require(\n            c >= a,\n            \"UINT256_OVERFLOW\"\n        );\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "src/LibOrder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"./LibEIP712.sol\";\n\n\ncontract LibOrder is\n    LibEIP712\n{\n    // Hash for the EIP712 Order Schema\n    bytes32 constant internal EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"Order(\",\n        \"address makerAddress,\",\n        \"address takerAddress,\",\n        \"address feeRecipientAddress,\",\n        \"address senderAddress,\",\n        \"uint256 makerAssetAmount,\",\n        \"uint256 takerAssetAmount,\",\n        \"uint256 makerFee,\",\n        \"uint256 takerFee,\",\n        \"uint256 expirationTimeSeconds,\",\n        \"uint256 salt,\",\n        \"bytes makerAssetData,\",\n        \"bytes takerAssetData\",\n        \")\"\n    ));\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's state is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    struct Order {\n        address makerAddress;           // Address that created the order.      \n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.          \n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.      \n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.        \n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.        \n        uint256 makerFee;               // Amount of ZRX paid to feeRecipient by maker when order is filled. If set to 0, no transfer of ZRX from maker to feeRecipient will be attempted.\n        uint256 takerFee;               // Amount of ZRX paid to feeRecipient by taker when order is filled. If set to 0, no transfer of ZRX from taker to feeRecipient will be attempted.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.          \n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.     \n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The last byte references the id of this proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The last byte references the id of this proxy.\n    }\n    // solhint-enable max-line-length\n\n    struct OrderInfo {\n        uint8 orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 hash of the order (see LibOrder.getOrderHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates Keccak-256 hash of the order.\n    /// @param order The order structure.\n    /// @return Keccak-256 EIP712 hash of the order.\n    function getOrderHash(Order memory order)\n        internal\n        view\n        returns (bytes32 orderHash)\n    {\n        orderHash = hashEIP712Message(hashOrder(order));\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order.\n    function hashOrder(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = EIP712_ORDER_SCHEMA_HASH;\n        bytes32 makerAssetDataHash = keccak256(order.makerAssetData);\n        bytes32 takerAssetDataHash = keccak256(order.takerAssetData);\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     bytes32(order.makerAddress),\n        //     bytes32(order.takerAddress),\n        //     bytes32(order.feeRecipientAddress),\n        //     bytes32(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData)\n        // ));\n\n        assembly {\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            \n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, makerAssetDataHash)\n            mstore(pos3, takerAssetDataHash)\n            result := keccak256(pos1, 416)\n            \n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n        }\n        return result;\n    }\n}\n",
        "src/LibEIP712.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ncontract LibEIP712 {\n\n    // EIP191 header for EIP712 prefix\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\n\n    // EIP712 Domain Name value\n    string constant internal EIP712_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Domain Version value\n    string constant internal EIP712_DOMAIN_VERSION = \"2\";\n\n    // Hash of the EIP712 Domain Separator Schema\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n        \"EIP712Domain(\",\n        \"string name,\",\n        \"string version,\",\n        \"address verifyingContract\",\n        \")\"\n    ));\n\n    // Hash of the EIP712 Domain Separator data\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public EIP712_DOMAIN_HASH;\n\n    constructor ()\n        public\n    {\n        EIP712_DOMAIN_HASH = keccak256(abi.encodePacked(\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\n            uint256(address(this))\n        ));\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct in this EIP712 Domain.\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to this EIP712 Domain.\n    function hashEIP712Message(bytes32 hashStruct)\n        internal\n        view\n        returns (bytes32 result)\n    {\n        bytes32 eip712DomainHash = EIP712_DOMAIN_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct    \n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "src/LibFillResults.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\n\nimport \"@0x/contracts-utils/contracts/src/SafeMath.sol\";\n\n\ncontract LibFillResults is\n    SafeMath\n{\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of ZRX paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of ZRX paid by taker to feeRecipients(s).\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                    // Amounts filled and fees paid of left order.\n        FillResults right;                   // Amounts filled and fees paid of right order.\n        uint256 leftMakerAssetSpreadAmount;  // Spread between price of left and right order, denominated in the left order's makerAsset, paid to taker.\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    ///      Modifies the first FillResults instance specified.\n    /// @param totalFillResults Fill results instance that will be added onto.\n    /// @param singleFillResults Fill results instance that will be added to totalFillResults.\n    function addFillResults(FillResults memory totalFillResults, FillResults memory singleFillResults)\n        internal\n        pure\n    {\n        totalFillResults.makerAssetFilledAmount = safeAdd(totalFillResults.makerAssetFilledAmount, singleFillResults.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = safeAdd(totalFillResults.takerAssetFilledAmount, singleFillResults.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = safeAdd(totalFillResults.makerFeePaid, singleFillResults.makerFeePaid);\n        totalFillResults.takerFeePaid = safeAdd(totalFillResults.takerFeePaid, singleFillResults.takerFeePaid);\n    }\n}\n",
        "src/LibAbiEncoder.sol": "/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibOrder.sol\";\n\n\ncontract LibAbiEncoder {\n\n    /// @dev ABI encodes calldata for `fillOrder`.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return ABI encoded calldata for `fillOrder`.\n    function abiEncodeFillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory fillOrderCalldata)\n    {\n        // We need to call MExchangeCore.fillOrder using a delegatecall in\n        // assembly so that we can intercept a call that throws. For this, we\n        // need the input encoded in memory in the Ethereum ABIv2 format [1].\n\n        // | Area     | Offset | Length  | Contents                                    |\n        // | -------- |--------|---------|-------------------------------------------- |\n        // | Header   | 0x00   | 4       | function selector                           |\n        // | Params   |        | 3 * 32  | function parameters:                        |\n        // |          | 0x00   |         |   1. offset to order (*)                    |\n        // |          | 0x20   |         |   2. takerAssetFillAmount                   |\n        // |          | 0x40   |         |   3. offset to signature (*)                |\n        // | Data     |        | 12 * 32 | order:                                      |\n        // |          | 0x000  |         |   1.  senderAddress                         |\n        // |          | 0x020  |         |   2.  makerAddress                          |\n        // |          | 0x040  |         |   3.  takerAddress                          |\n        // |          | 0x060  |         |   4.  feeRecipientAddress                   |\n        // |          | 0x080  |         |   5.  makerAssetAmount                      |\n        // |          | 0x0A0  |         |   6.  takerAssetAmount                      |\n        // |          | 0x0C0  |         |   7.  makerFeeAmount                        |\n        // |          | 0x0E0  |         |   8.  takerFeeAmount                        |\n        // |          | 0x100  |         |   9.  expirationTimeSeconds                 |\n        // |          | 0x120  |         |   10. salt                                  |\n        // |          | 0x140  |         |   11. Offset to makerAssetData (*)          |\n        // |          | 0x160  |         |   12. Offset to takerAssetData (*)          |\n        // |          | 0x180  | 32      | makerAssetData Length                       |\n        // |          | 0x1A0  | **      | makerAssetData Contents                     |\n        // |          | 0x1C0  | 32      | takerAssetData Length                       |\n        // |          | 0x1E0  | **      | takerAssetData Contents                     |\n        // |          | 0x200  | 32      | signature Length                            |\n        // |          | 0x220  | **      | signature Contents                          |\n\n        // * Offsets are calculated from the beginning of the current area: Header, Params, Data:\n        //     An offset stored in the Params area is calculated from the beginning of the Params section.\n        //     An offset stored in the Data area is calculated from the beginning of the Data section.\n\n        // ** The length of dynamic array contents are stored in the field immediately preceeding the contents.\n\n        // [1]: https://solidity.readthedocs.io/en/develop/abi-spec.html\n\n        assembly {\n\n            // Areas below may use the following variables:\n            //   1. <area>Start   -- Start of this area in memory\n            //   2. <area>End     -- End of this area in memory. This value may\n            //                       be precomputed (before writing contents),\n            //                       or it may be computed as contents are written.\n            //   3. <area>Offset  -- Current offset into area. If an area's End\n            //                       is precomputed, this variable tracks the\n            //                       offsets of contents as they are written.\n\n            /////// Setup Header Area ///////\n            // Load free memory pointer\n            fillOrderCalldata := mload(0x40)\n            // bytes4(keccak256(\"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)\"))\n            // = 0xb4be83d5\n            // Leave 0x20 bytes to store the length\n            mstore(add(fillOrderCalldata, 0x20), 0xb4be83d500000000000000000000000000000000000000000000000000000000)\n            let headerAreaEnd := add(fillOrderCalldata, 0x24)\n\n            /////// Setup Params Area ///////\n            // This area is preallocated and written to later.\n            // This is because we need to fill in offsets that have not yet been calculated.\n            let paramsAreaStart := headerAreaEnd\n            let paramsAreaEnd := add(paramsAreaStart, 0x60)\n            let paramsAreaOffset := paramsAreaStart\n\n            /////// Setup Data Area ///////\n            let dataAreaStart := paramsAreaEnd\n            let dataAreaEnd := dataAreaStart\n\n            // Offset from the source data we're reading from\n            let sourceOffset := order\n            // arrayLenBytes and arrayLenWords track the length of a dynamically-allocated bytes array.\n            let arrayLenBytes := 0\n            let arrayLenWords := 0\n\n            /////// Write order Struct ///////\n            // Write memory location of Order, relative to the start of the\n            // parameter list, then increment the paramsAreaOffset respectively.\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            // Write values for each field in the order\n            // It would be nice to use a loop, but we save on gas by writing\n            // the stores sequentially.\n            mstore(dataAreaEnd, mload(sourceOffset))                            // makerAddress\n            mstore(add(dataAreaEnd, 0x20), mload(add(sourceOffset, 0x20)))      // takerAddress\n            mstore(add(dataAreaEnd, 0x40), mload(add(sourceOffset, 0x40)))      // feeRecipientAddress\n            mstore(add(dataAreaEnd, 0x60), mload(add(sourceOffset, 0x60)))      // senderAddress\n            mstore(add(dataAreaEnd, 0x80), mload(add(sourceOffset, 0x80)))      // makerAssetAmount\n            mstore(add(dataAreaEnd, 0xA0), mload(add(sourceOffset, 0xA0)))      // takerAssetAmount\n            mstore(add(dataAreaEnd, 0xC0), mload(add(sourceOffset, 0xC0)))      // makerFeeAmount\n            mstore(add(dataAreaEnd, 0xE0), mload(add(sourceOffset, 0xE0)))      // takerFeeAmount\n            mstore(add(dataAreaEnd, 0x100), mload(add(sourceOffset, 0x100)))    // expirationTimeSeconds\n            mstore(add(dataAreaEnd, 0x120), mload(add(sourceOffset, 0x120)))    // salt\n            mstore(add(dataAreaEnd, 0x140), mload(add(sourceOffset, 0x140)))    // Offset to makerAssetData\n            mstore(add(dataAreaEnd, 0x160), mload(add(sourceOffset, 0x160)))    // Offset to takerAssetData\n            dataAreaEnd := add(dataAreaEnd, 0x180)\n            sourceOffset := add(sourceOffset, 0x180)\n\n            // Write offset to <order.makerAssetData>\n            mstore(add(dataAreaStart, mul(10, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.makerAssetData>\n            sourceOffset := mload(add(order, 0x140)) // makerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.makerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of <order.makerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Write offset to <order.takerAssetData>\n            mstore(add(dataAreaStart, mul(11, 0x20)), sub(dataAreaEnd, dataAreaStart))\n\n            // Calculate length of <order.takerAssetData>\n            sourceOffset := mload(add(order, 0x160)) // takerAssetData\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of <order.takerAssetData>\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of  <order.takerAssetData>\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            /////// Write takerAssetFillAmount ///////\n            mstore(paramsAreaOffset, takerAssetFillAmount)\n            paramsAreaOffset := add(paramsAreaOffset, 0x20)\n\n            /////// Write signature ///////\n            // Write offset to paramsArea\n            mstore(paramsAreaOffset, sub(dataAreaEnd, paramsAreaStart))\n\n            // Calculate length of signature\n            sourceOffset := signature\n            arrayLenBytes := mload(sourceOffset)\n            sourceOffset := add(sourceOffset, 0x20)\n            arrayLenWords := div(add(arrayLenBytes, 0x1F), 0x20)\n\n            // Write length of signature\n            mstore(dataAreaEnd, arrayLenBytes)\n            dataAreaEnd := add(dataAreaEnd, 0x20)\n\n            // Write contents of signature\n            for {let i := 0} lt(i, arrayLenWords) {i := add(i, 1)} {\n                mstore(dataAreaEnd, mload(sourceOffset))\n                dataAreaEnd := add(dataAreaEnd, 0x20)\n                sourceOffset := add(sourceOffset, 0x20)\n            }\n\n            // Set length of calldata\n            mstore(fillOrderCalldata, sub(dataAreaEnd, add(fillOrderCalldata, 0x20)))\n\n            // Increment free memory pointer\n            mstore(0x40, dataAreaEnd)\n        }\n\n        return fillOrderCalldata;\n    }\n}\n"
    },
    "sourceTreeHashHex": "0x1c51307e916a231927384c7f824e599dba1bacd0b57f2ad0e964d75e13e9d967",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.8+commit.23d335f2.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "constantinople",
            "remappings": [
                "@0x/contracts-utils=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/contracts/exchange-libs/node_modules/@0x/contracts-utils",
                "@0x/contracts-exchange-libs=/Users/fabioberger/Documents/projects/0x_project/0x-monorepo-one/node_modules/@0x/contracts-exchange-libs"
            ]
        }
    },
    "networks": {}
}
